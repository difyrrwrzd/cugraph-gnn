<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="cuda__macros_8hpp" kind="file" language="C++">
    <compoundname>cuda_macros.hpp</compoundname>
    <includes local="no">cuda.h</includes>
    <includes local="no">cuda_runtime_api.h</includes>
    <includes local="no">chrono</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">execinfo.h</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">mutex</includes>
    <includes local="no">raft/core/error.hpp</includes>
    <includes refid="error_8hpp" local="yes">error.hpp</includes>
    <includedby refid="cuda__macros_8cpp" local="yes">src/cuda_macros.cpp</includedby>
    <includedby refid="net__utils_8cpp" local="yes">src/net_utils.cpp</includedby>
    <includedby refid="parallel__utils_8cpp" local="yes">src/parallel_utils.cpp</includedby>
    <includedby refid="communicator_8cpp" local="yes">src/wholememory/communicator.cpp</includedby>
    <includedby refid="communicator_8hpp" local="yes">src/wholememory/communicator.hpp</includedby>
    <includedby refid="embedding_8cpp" local="yes">src/wholememory/embedding.cpp</includedby>
    <includedby refid="embedding__optimizer_8cpp" local="yes">src/wholememory/embedding_optimizer.cpp</includedby>
    <includedby refid="env__func__ptrs_8cpp" local="yes">src/wholememory/env_func_ptrs.cpp</includedby>
    <includedby refid="initialize_8cpp" local="yes">src/wholememory/initialize.cpp</includedby>
    <includedby refid="memory__handle_8cpp" local="yes">src/wholememory/memory_handle.cpp</includedby>
    <includedby refid="nccl__comms_8cpp" local="yes">src/wholememory/nccl_comms.cpp</includedby>
    <includedby refid="system__info_8cpp" local="yes">src/wholememory/system_info.cpp</includedby>
    <incdepgraph>
      <node id="8">
        <label>iomanip</label>
      </node>
      <node id="12">
        <label>raft/core/error.hpp</label>
      </node>
      <node id="13">
        <label>error.hpp</label>
        <link refid="error_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdio</label>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>src/cuda_macros.hpp</label>
        <link refid="cuda__macros_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cuda.h</label>
      </node>
      <node id="11">
        <label>mutex</label>
      </node>
      <node id="3">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="4">
        <label>chrono</label>
      </node>
      <node id="7">
        <label>execinfo.h</label>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>src/wholememory/communicator.hpp</label>
        <link refid="communicator_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>src/wholememory/embedding_optimizer.cpp</label>
        <link refid="embedding__optimizer_8cpp"/>
      </node>
      <node id="17">
        <label>src/wholememory/nccl_comms.cpp</label>
        <link refid="nccl__comms_8cpp"/>
      </node>
      <node id="14">
        <label>src/wholememory/embedding.cpp</label>
        <link refid="embedding_8cpp"/>
      </node>
      <node id="16">
        <label>src/wholememory/env_func_ptrs.cpp</label>
        <link refid="env__func__ptrs_8cpp"/>
      </node>
      <node id="10">
        <label>src/wholememory/memory_handle.cpp</label>
        <link refid="memory__handle_8cpp"/>
      </node>
      <node id="12">
        <label>src/wholememory/embedding_cache.cpp</label>
        <link refid="embedding__cache_8cpp"/>
      </node>
      <node id="7">
        <label>src/nvshmem_plugins/nvshmem_wholememory_bootstrap.cpp</label>
        <link refid="nvshmem__wholememory__bootstrap_8cpp"/>
      </node>
      <node id="1">
        <label>src/cuda_macros.hpp</label>
        <link refid="cuda__macros_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>src/wholememory/memory_handle.hpp</label>
        <link refid="memory__handle_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/wholememory/system_info.cpp</label>
        <link refid="system__info_8cpp"/>
      </node>
      <node id="4">
        <label>src/parallel_utils.cpp</label>
        <link refid="parallel__utils_8cpp"/>
      </node>
      <node id="9">
        <label>src/wholememory/initialize.cpp</label>
        <link refid="initialize_8cpp"/>
      </node>
      <node id="13">
        <label>src/wholememory/wholememory.cpp</label>
        <link refid="wholememory_8cpp"/>
      </node>
      <node id="8">
        <label>src/wholememory/file_io.cpp</label>
        <link refid="file__io_8cpp"/>
      </node>
      <node id="3">
        <label>src/net_utils.cpp</label>
        <link refid="net__utils_8cpp"/>
      </node>
      <node id="5">
        <label>src/wholememory/communicator.cpp</label>
        <link refid="communicator_8cpp"/>
      </node>
      <node id="2">
        <label>src/cuda_macros.cpp</label>
        <link refid="cuda__macros_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structwholememory_1_1cuda__error" prot="public">wholememory::cuda_error</innerclass>
    <innerclass refid="structwholememory_1_1cu__error" prot="public">wholememory::cu_error</innerclass>
    <innernamespace refid="namespacewholememory">wholememory</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="cuda__macros_8hpp_1abcf14f9284822e1b3e0c2e673d15fb0e" prot="public" static="no">
        <name>WM_CUDA_TRY</name>
        <param><defname>call</defname></param>
        <initializer>  do {                                                         \
    cudaError_t const status = call;                           \
    if (status != cudaSuccess) {                               \
      cudaGetLastError();                                      \
      std::string msg{};                                       \
      <ref refid="error_8hpp_1a33c6861f6bff7b4e32aba13aa0e6b01a" kindref="member">SET_WHOLEMEMORY_ERROR_MSG</ref>(msg,                           \
                                &quot;CUDA error encountered at: &quot;, \
                                &quot;call=&apos;%s&apos;, Reason=%s:%s&quot;,     \
                                #call,                         \
                                cudaGetErrorName(status),      \
                                cudaGetErrorString(status));   \
      throw <ref refid="structwholememory_1_1cuda__error" kindref="compound">wholememory::cuda_error</ref>(msg);                      \
    }                                                          \
  } while (0)</initializer>
        <briefdescription>
<para>Error checking macro for CUDA runtime API functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes a CUDA runtime API function call, if the call does not return cudaSuccess, invokes cudaGetLastError() to clear the error and throws an exception detailing the CUDA error that occurred </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="62" column="9" bodyfile="src/cuda_macros.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cuda__macros_8hpp_1a7d48b62f3df53ec1496f053529c79c52" prot="public" static="no">
        <name>WM_CUDA_CHECK</name>
        <param><defname>call</defname></param>
        <initializer><ref refid="cuda__macros_8hpp_1abcf14f9284822e1b3e0c2e673d15fb0e" kindref="member">WM_CUDA_TRY</ref>(call)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="79" column="9" bodyfile="src/cuda_macros.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cuda__macros_8hpp_1a4b09b799f3119b4248a3acd86b6607ae" prot="public" static="no">
        <name>WM_CUDA_TRY_NO_THROW</name>
        <param><defname>call</defname></param>
        <initializer>  do {                                                             \
    cudaError_t const status = call;                               \
    if (cudaSuccess != status) {                                   \
      printf(&quot;CUDA call=&apos;%s&apos; at file=%s line=%d failed with %s\n&quot;, \
             #call,                                                \
             __FILE__,                                             \
             __LINE__,                                             \
             cudaGetErrorString(status));                          \
      <ref refid="communicator_8hpp_1a70b54559cae3920bb2713ca60f7bcb5c" kindref="member">abort</ref>();                                                     \
    }                                                              \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="86" column="9" bodyfile="src/cuda_macros.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" prot="public" static="no">
        <name>WM_CUDA_CHECK_NO_THROW</name>
        <param><defname>call</defname></param>
        <initializer><ref refid="cuda__macros_8hpp_1a4b09b799f3119b4248a3acd86b6607ae" kindref="member">WM_CUDA_TRY_NO_THROW</ref>(call)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="100" column="9" bodyfile="src/cuda_macros.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cuda__macros_8hpp_1aa6b9e5374b5a385a03ab59b79eee8915" prot="public" static="no">
        <name>WM_CU_TRY</name>
        <param><defname>call</defname></param>
        <initializer>  do {                                                                        \
    CUresult const status = call;                                             \
    if (status != CUDA_SUCCESS) {                                             \
      const char* p_err_name = nullptr;                                       \
      cuGetErrorName(status, &amp;p_err_name);                                    \
      const char* p_err_str = nullptr;                                        \
      if (cuGetErrorString(status, &amp;p_err_str) == CUDA_ERROR_INVALID_VALUE) { \
        p_err_str = &quot;Unrecoginzed CU error num&quot;;                              \
      }                                                                       \
      std::string msg{};                                                      \
      <ref refid="error_8hpp_1a33c6861f6bff7b4e32aba13aa0e6b01a" kindref="member">SET_WHOLEMEMORY_ERROR_MSG</ref>(msg,                                          \
                                &quot;CU error encountered at: &quot;,                  \
                                &quot;call=&apos;%s&apos;, Reason=%s:%s&quot;,                    \
                                #call,                                        \
                                p_err_name,                                   \
                                p_err_str);                                   \
      throw <ref refid="structwholememory_1_1cu__error" kindref="compound">wholememory::cu_error</ref>(msg);                                       \
    }                                                                         \
  } while (0)</initializer>
        <briefdescription>
<para>Error checking macro for CUDA driver API functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes a CUDA driver API function call, if the call does not return CUDA_SUCCESS, invokes cuGetErrorString() to clear the error and throws an exception detailing the CU error that occurred </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="111" column="9" bodyfile="src/cuda_macros.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cuda__macros_8hpp_1ab91989c3164b0d59babf67dddbf74120" prot="public" static="no">
        <name>WM_CU_CHECK</name>
        <param><defname>call</defname></param>
        <initializer><ref refid="cuda__macros_8hpp_1aa6b9e5374b5a385a03ab59b79eee8915" kindref="member">WM_CU_TRY</ref>(call)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="133" column="9" bodyfile="src/cuda_macros.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cuda__macros_8hpp_1aff191e23338860d73e0027235a0158a7" prot="public" static="no">
        <name>WM_CU_TRY_NO_THROW</name>
        <param><defname>call</defname></param>
        <initializer>  do {                                                                                             \
    CUresult const status = call;                                                                  \
    if (status != CUDA_SUCCESS) {                                                                  \
      const char* p_err_str = nullptr;                                                             \
      if (cuGetErrorString(status, &amp;p_err_str) == CUDA_ERROR_INVALID_VALUE) {                      \
        p_err_str = &quot;Unrecoginzed CU error num&quot;;                                                   \
      }                                                                                            \
      std::string msg{};                                                                           \
      printf(                                                                                      \
        &quot;CU call=&apos;%s&apos; at file=%s line=%d failed with %s\n&quot;, #call, __FILE__, __LINE__, p_err_str); \
    }                                                                                              \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="140" column="9" bodyfile="src/cuda_macros.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cuda__macros_8hpp_1a3e015acee4f30ba2649b399a50260b62" prot="public" static="no">
        <name>WM_CU_CHECK_NO_THROW</name>
        <param><defname>call</defname></param>
        <initializer><ref refid="cuda__macros_8hpp_1aff191e23338860d73e0027235a0158a7" kindref="member">WM_CU_TRY_NO_THROW</ref>(call)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="155" column="9" bodyfile="src/cuda_macros.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cuda__macros_8hpp_1a33babea6bdc5182c14afc77064655995" prot="public" static="no">
        <name>WM_CUDA_DEBUG_SYNC_STREAM</name>
        <param><defname>S</defname></param>
        <initializer><ref refid="namespacewholememory_1a41c85310d93d38aec8f7ea3709df0ab5" kindref="member">wholememory::debug_synchronize</ref>(__FILE__, __LINE__, (S))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="164" column="9" bodyfile="src/cuda_macros.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cuda__macros_8hpp_1a22fa8f512551d1e6d41874708d91a04b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_debug_sync_mode</definition>
        <argsstring>(bool debug_sync_mode)</argsstring>
        <name>set_debug_sync_mode</name>
        <param>
          <type>bool</type>
          <declname>debug_sync_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.hpp" line="158" column="6" declfile="src/cuda_macros.hpp" declline="158" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda_runtime_api.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;execinfo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;raft/core/error.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="error_8hpp" kindref="compound">error.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacewholememory" kindref="compound">wholememory</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structwholememory_1_1cuda__error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwholememory_1_1cuda__error" kindref="compound">cuda_error</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>raft::exception<sp/>{</highlight></codeline>
<codeline lineno="40" refid="structwholememory_1_1cuda__error_1a3e8f548928fe7ff5d31163a0cf03ba6e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structwholememory_1_1cuda__error_1a3e8f548928fe7ff5d31163a0cf03ba6e" kindref="member">cuda_error</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>message)<sp/>:<sp/>raft::exception(message)<sp/>{}</highlight></codeline>
<codeline lineno="41" refid="structwholememory_1_1cuda__error_1a8be221a80725404fb3459603aa6572bc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structwholememory_1_1cuda__error_1a8be221a80725404fb3459603aa6572bc" kindref="member">cuda_error</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message)<sp/>:<sp/>raft::exception(message)<sp/>{}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structwholememory_1_1cu__error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwholememory_1_1cu__error" kindref="compound">cu_error</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>raft::exception<sp/>{</highlight></codeline>
<codeline lineno="48" refid="structwholememory_1_1cu__error_1a1cb00fa865615a4a3b6c8e261b342206" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structwholememory_1_1cu__error_1a1cb00fa865615a4a3b6c8e261b342206" kindref="member">cu_error</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>message)<sp/>:<sp/>raft::exception(message)<sp/>{}</highlight></codeline>
<codeline lineno="49" refid="structwholememory_1_1cu__error_1a3a11520d886c9e26ebdfccf320e918c8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structwholememory_1_1cu__error_1a3a11520d886c9e26ebdfccf320e918c8" kindref="member">cu_error</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message)<sp/>:<sp/>raft::exception(message)<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>wholememory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="cuda__macros_8hpp_1abcf14f9284822e1b3e0c2e673d15fb0e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_CUDA_TRY(call)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>cudaError_t<sp/>const<sp/>status<sp/>=<sp/>call;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>cudaSuccess)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>cudaGetLastError();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SET_WHOLEMEMORY_ERROR_MSG(msg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CUDA<sp/>error<sp/>encountered<sp/>at:<sp/>&quot;</highlight><highlight class="normal">,<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;call=&apos;%s&apos;,<sp/>Reason=%s:%s&quot;,<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#call,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaGetErrorName(status),<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaGetErrorString(status));<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>wholememory::cuda_error(msg);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WM_CUDA_CHECK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="cuda__macros_8hpp_1a7d48b62f3df53ec1496f053529c79c52" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_CUDA_CHECK(call)<sp/>WM_CUDA_TRY(call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@brief<sp/>check<sp/>for<sp/>cuda<sp/>runtime<sp/>API<sp/>errors<sp/>but<sp/>log<sp/>error<sp/>instead<sp/>of<sp/>raising</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="cuda__macros_8hpp_1a4b09b799f3119b4248a3acd86b6607ae" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_CUDA_TRY_NO_THROW(call)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>cudaError_t<sp/>const<sp/>status<sp/>=<sp/>call;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(cudaSuccess<sp/>!=<sp/>status)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;CUDA<sp/>call=&apos;%s&apos;<sp/>at<sp/>file=%s<sp/>line=%d<sp/>failed<sp/>with<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#call,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaGetErrorString(status));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abort();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WM_CUDA_CHECK_NO_THROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_CUDA_CHECK_NO_THROW(call)<sp/>WM_CUDA_TRY_NO_THROW(call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="cuda__macros_8hpp_1aa6b9e5374b5a385a03ab59b79eee8915" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_CU_TRY(call)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CUresult<sp/>const<sp/>status<sp/>=<sp/>call;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>CUDA_SUCCESS)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>p_err_name<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>cuGetErrorName(status,<sp/>&amp;p_err_name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>p_err_str<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(cuGetErrorString(status,<sp/>&amp;p_err_str)<sp/>==<sp/>CUDA_ERROR_INVALID_VALUE)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_err_str<sp/>=<sp/>&quot;Unrecoginzed<sp/>CU<sp/>error<sp/>num&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SET_WHOLEMEMORY_ERROR_MSG(msg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CU<sp/>error<sp/>encountered<sp/>at:<sp/>&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;call=&apos;%s&apos;,<sp/>Reason=%s:%s&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#call,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_err_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_err_str);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>wholememory::cu_error(msg);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WM_CU_CHECK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="cuda__macros_8hpp_1ab91989c3164b0d59babf67dddbf74120" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_CU_CHECK(call)<sp/>WM_CU_TRY(call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@brief<sp/>check<sp/>for<sp/>cuda<sp/>driver<sp/>API<sp/>errors<sp/>but<sp/>log<sp/>error<sp/>instead<sp/>of<sp/>raising</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="cuda__macros_8hpp_1aff191e23338860d73e0027235a0158a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_CU_TRY_NO_THROW(call)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CUresult<sp/>const<sp/>status<sp/>=<sp/>call;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>CUDA_SUCCESS)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>p_err_str<sp/>=<sp/>nullptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(cuGetErrorString(status,<sp/>&amp;p_err_str)<sp/>==<sp/>CUDA_ERROR_INVALID_VALUE)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_err_str<sp/>=<sp/>&quot;Unrecoginzed<sp/>CU<sp/>error<sp/>num&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CU<sp/>call=&apos;%s&apos;<sp/>at<sp/>file=%s<sp/>line=%d<sp/>failed<sp/>with<sp/>%s\n&quot;,<sp/>#call,<sp/>__FILE__,<sp/>__LINE__,<sp/>p_err_str);<sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WM_CU_CHECK_NO_THROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="cuda__macros_8hpp_1a3e015acee4f30ba2649b399a50260b62" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_CU_CHECK_NO_THROW(call)<sp/>WM_CU_TRY_NO_THROW(call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="cuda__macros_8hpp_1a22fa8f512551d1e6d41874708d91a04b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cuda__macros_8hpp_1a22fa8f512551d1e6d41874708d91a04b" kindref="member">set_debug_sync_mode</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug_sync_mode);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacewholememory" kindref="compound">wholememory</ref><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacewholememory_1a41c85310d93d38aec8f7ea3709df0ab5" kindref="member">debug_synchronize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>cudaStream_t<sp/>stream);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="cuda__macros_8hpp_1a33babea6bdc5182c14afc77064655995" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_CUDA_DEBUG_SYNC_STREAM(S)<sp/>wholememory::debug_synchronize(__FILE__,<sp/>__LINE__,<sp/>(S))</highlight></codeline>
    </programlisting>
    <location file="src/cuda_macros.hpp"/>
  </compounddef>
</doxygen>
