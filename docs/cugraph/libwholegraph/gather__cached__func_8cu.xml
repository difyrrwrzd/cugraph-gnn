<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="gather__cached__func_8cu" kind="file" language="C++">
    <compoundname>gather_cached_func.cu</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;gather_cached_func.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;cuda_macros.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;embedding_cache_func.cuh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;error.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;gather_scatter_func.cuh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;logger.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;wholememory_ops/register.hpp&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;wholememory/embedding_cache.hpp&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>wholememory_ops<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>EmbedT,<sp/>typename<sp/>OutputT,<sp/>typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">__global__<sp/>void<sp/>gather_cached_kernel(wholememory_gref_t<sp/>padded_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>stride_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>start_embedding_idx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>embedding_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_gref_t<sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_gref_t<sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>IndexT*<sp/>input_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputT*<sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>output_stride,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>raw_start_gid)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT<sp/>entry_gid<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input_indices[blockIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT<sp/>fixed_cache_gid<sp/>=<sp/>entry_gid<sp/>-<sp/>cache_start_gid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT<sp/>fixed_raw_gid<sp/><sp/><sp/>=<sp/>entry_gid<sp/>-<sp/>raw_start_gid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT<sp/>cache_set_idx<sp/><sp/><sp/>=<sp/>fixed_cache_gid<sp/>/<sp/>cache_set_coverage;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_lid<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;int&gt;(fixed_cache_gid<sp/>-<sp/>cache_set_idx<sp/>*<sp/>cache_set_coverage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CacheLineInfo<sp/>cache_line_info;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory::device_reference&lt;uint16_t&gt;<sp/>cache_line_tag_dev_ref(cache_line_tag_gref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_line_info.LoadTag(&amp;cache_line_tag_dev_ref[CacheLineInfo::kCacheSetSize<sp/>*<sp/>cache_set_idx]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_line_index<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cache_line_info.KeyIndexSync(cache_set_lid);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int4*<sp/>padded_embedding_ptr<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__shared__<sp/>int4<sp/>s_embedding[32];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EmbedT*<sp/>s_embedding_embed_t<sp/>=<sp/>reinterpret_cast&lt;EmbedT*&gt;(&amp;s_embedding[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory::device_reference&lt;int4&gt;<sp/>embedding_dev_ref(padded_embedding_gref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory::device_reference&lt;int4&gt;<sp/>cached_embedding_dev_ref(cached_embedding_gref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cache_line_index<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>padded_embedding_ptr<sp/>=<sp/>&amp;cached_embedding_dev_ref[(static_cast&lt;int64_t&gt;(cache_set_idx)<sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CacheLineInfo::kCacheSetSize<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_line_index)<sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stride_in_int4];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>padded_embedding_ptr<sp/>=<sp/>&amp;embedding_dev_ref[static_cast&lt;int64_t&gt;(fixed_raw_gid)<sp/>*<sp/>stride_in_int4];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>int<sp/>EMBED_TYPE_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(EmbedT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>int<sp/>EMBED_TYPE_COUNT_PER_INT4<sp/>=<sp/>16<sp/>/<sp/>EMBED_TYPE_SIZE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>start_int4_idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>EMBED_TYPE_SIZE<sp/>*<sp/>start_embedding_idx<sp/>/<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>start_padding<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>start_embedding_idx<sp/>%<sp/>EMBED_TYPE_COUNT_PER_INT4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>end_int4_idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(EMBED_TYPE_SIZE<sp/>*<sp/>(start_embedding_idx<sp/>+<sp/>embedding_size)<sp/>+<sp/>15)<sp/>/<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>shared_start_idx<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>start_padding;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>output_start_idx<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OutputT*<sp/>output_embed_ptr<sp/>=<sp/>output<sp/>+<sp/>static_cast&lt;int64_t&gt;(blockIdx.x)<sp/>*<sp/>output_stride;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(;<sp/>start_int4_idx<sp/>*<sp/>EMBED_TYPE_COUNT_PER_INT4<sp/>&lt;<sp/>start_embedding_idx<sp/>+<sp/>embedding_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_int4_idx<sp/>+=<sp/>32)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>const<sp/>int4_idx<sp/>=<sp/>start_int4_idx<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(int4_idx<sp/>&lt;<sp/>end_int4_idx)<sp/>{<sp/>s_embedding[threadIdx.x]<sp/>=<sp/>padded_embedding_ptr[int4_idx];<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>shared_end_idx<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min(32<sp/>*<sp/>EMBED_TYPE_COUNT_PER_INT4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_embedding_idx<sp/>+<sp/>embedding_size<sp/>-<sp/>start_int4_idx<sp/>*<sp/>EMBED_TYPE_COUNT_PER_INT4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(output_start_idx<sp/>&lt;<sp/>embedding_size<sp/>&amp;&amp;<sp/>shared_start_idx<sp/>&lt;<sp/>shared_end_idx)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(shared_start_idx<sp/>+<sp/>threadIdx.x<sp/>&lt;<sp/>shared_end_idx)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputT<sp/>output_value<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_type&lt;EmbedT,<sp/>OutputT&gt;(s_embedding_embed_t[shared_start_idx<sp/>+<sp/>threadIdx.x]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_embed_ptr[output_start_idx<sp/>+<sp/>threadIdx.x]<sp/>=<sp/>output_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>const<sp/>data_count<sp/>=<sp/>min(32,<sp/>shared_end_idx<sp/>-<sp/>shared_start_idx);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_start_idx<sp/>+=<sp/>data_count;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_start_idx<sp/>+=<sp/>data_count;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shared_start_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>EmbedT,<sp/>typename<sp/>OutputT,<sp/>typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>gather_cached_temp_func(wholememory_gref_t<sp/>padded_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_matrix_description_t<sp/>embedding_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_gref_t<sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_matrix_description_t<sp/>cached_embedding_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_gref_t<sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>input_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_array_description_t<sp/>indices_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_matrix_description_t<sp/>output_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>raw_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>indice_count<sp/>=<sp/>indices_desc.size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(indice_count<sp/>==<sp/>0)<sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(embedding_desc.stride<sp/>==<sp/>cached_embedding_desc.stride);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(embedding_desc.stride<sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_dtype_get_element_size(embedding_desc.dtype)<sp/>%</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(int4)<sp/>==</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(embedding_desc.sizes[1]<sp/>==<sp/>output_desc.sizes[1]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(indices_desc.size<sp/>==<sp/>output_desc.sizes[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>stride_in_int4<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>embedding_desc.stride<sp/>*<sp/>wholememory_dtype_get_element_size(embedding_desc.dtype)<sp/>/<sp/>sizeof(int4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>start_embedding_idx<sp/>=<sp/>embedding_desc.storage_offset;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>embedding_size<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>embedding_desc.sizes[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>output_stride<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>output_desc.stride;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gather_cached_kernel&lt;EmbedT,<sp/>OutputT,<sp/>IndexT&gt;&lt;&lt;&lt;indice_count,<sp/>32,<sp/>0,<sp/>stream&gt;&gt;&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>padded_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stride_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>start_embedding_idx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>embedding_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>IndexT*&gt;(input_indices)<sp/>+<sp/>indices_desc.storage_offset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;OutputT*&gt;(output)<sp/>+<sp/>output_desc.storage_offset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_stride,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>raw_start_gid);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">REGISTER_DISPATCH_THREE_TYPES(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GatherCachedFuncFloating,<sp/>gather_cached_temp_func,<sp/>ALLFLOAT,<sp/>ALLFLOAT,<sp/>SINT3264)</highlight></codeline>
<codeline><highlight class="normal">REGISTER_DISPATCH_THREE_TYPES(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GatherCachedFuncInteger,<sp/>gather_cached_temp_func,<sp/>ALLSINT,<sp/>ALLSINT,<sp/>SINT3264)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">wholememory_error_code_t<sp/>gather_cached_func(wholememory_gref_t<sp/>padded_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor_description_t*<sp/>embedding_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_gref_t<sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor_description_t*<sp/>cached_embedding_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_gref_t<sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor_description_t*<sp/>indices_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor_description_t*<sp/>output_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>raw_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(embedding_desc-&gt;dim<sp/>!=<sp/>2<sp/>||<sp/>cached_embedding_desc-&gt;dim<sp/>!=<sp/>2<sp/>||<sp/>indices_desc-&gt;dim<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_desc-&gt;dim<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;tensor<sp/>dim<sp/>not<sp/>right.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(embedding_desc-&gt;strides[1]<sp/>!=<sp/>1<sp/>||<sp/>cached_embedding_desc-&gt;strides[1]<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indices_desc-&gt;strides[0]<sp/>!=<sp/>1<sp/>||<sp/>output_desc-&gt;strides[1]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;tensor<sp/>stride<sp/>of<sp/>last<sp/>dim<sp/>should<sp/>be<sp/>1.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(embedding_desc-&gt;strides[0]<sp/>!=<sp/>cached_embedding_desc-&gt;strides[0])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;padded_embedding<sp/>and<sp/>cached_embedding<sp/>should<sp/>have<sp/>same<sp/>strides[0].&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(embedding_desc-&gt;strides[0]<sp/>*<sp/>wholememory_dtype_get_element_size(embedding_desc-&gt;dtype)<sp/>%</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(int4)<sp/>!=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;embedding<sp/>should<sp/>be<sp/>aligned<sp/>to<sp/>int4<sp/>(16<sp/>bytes).&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(embedding_desc-&gt;sizes[1]<sp/>!=<sp/>output_desc-&gt;sizes[1])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;embedding<sp/>size<sp/>for<sp/>embedding<sp/>and<sp/>output<sp/>should<sp/>be<sp/>same,<sp/>%ld<sp/>v.s.<sp/>%ld.&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>embedding_desc-&gt;sizes[1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_desc-&gt;sizes[1]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(indices_desc-&gt;dtype<sp/>!=<sp/>WHOLEMEMORY_DT_INT64<sp/>&amp;&amp;<sp/>indices_desc-&gt;dtype<sp/>!=<sp/>WHOLEMEMORY_DT_INT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;indices<sp/>should<sp/>be<sp/>int64<sp/>or<sp/>int32.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(indices_desc-&gt;sizes[0]<sp/>!=<sp/>output_desc-&gt;sizes[0])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;indices<sp/>size<sp/>and<sp/>output<sp/>entry<sp/>count<sp/>should<sp/>be<sp/>the<sp/>same.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(embedding_desc-&gt;dtype<sp/>!=<sp/>cached_embedding_desc-&gt;dtype)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;embedding<sp/>and<sp/>cache<sp/>should<sp/>be<sp/>same<sp/>type&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_dtype_t<sp/>const<sp/>embedding_dtype<sp/>=<sp/>embedding_desc-&gt;dtype;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_dtype_t<sp/>const<sp/>output_dtype<sp/><sp/><sp/><sp/>=<sp/>output_desc-&gt;dtype;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(wholememory_dtype_is_floating_number(embedding_dtype)<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!wholememory_dtype_is_floating_number(output_dtype)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_dtype_is_integer_number(embedding_dtype)<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!wholememory_dtype_is_integer_number(output_dtype))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;embedding<sp/>and<sp/>output<sp/>should<sp/>be<sp/>all<sp/>float<sp/>or<sp/>all<sp/>integer&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_matrix_description_t<sp/>embedding_matrix_desc,<sp/>cached_embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_matrix_desc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_convert_tensor_desc_to_matrix(&amp;embedding_matrix_desc,<sp/>embedding_desc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(wholememory_convert_tensor_desc_to_matrix(&amp;cached_embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_desc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_convert_tensor_desc_to_matrix(&amp;output_matrix_desc,<sp/>output_desc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_array_description_t<sp/>indices_array_desc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_convert_tensor_desc_to_array(&amp;indices_array_desc,<sp/>indices_desc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(indices_array_desc.size<sp/>==<sp/>0)<sp/>return<sp/>WHOLEMEMORY_SUCCESS;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(wholememory_dtype_is_floating_number(embedding_dtype))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DISPATCH_THREE_TYPES(embedding_dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_desc-&gt;dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GatherCachedFuncFloating,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padded_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_array_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DISPATCH_THREE_TYPES(embedding_dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_desc-&gt;dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GatherCachedFuncInteger,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padded_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_array_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>WHOLEMEMORY_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>EmbedT,<sp/>typename<sp/>OutputT,<sp/>typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">__global__<sp/>void<sp/>try_gather_cached_kernel(int<sp/>stride_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>start_embedding_idx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>embedding_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_gref_t<sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_gref_t<sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>IndexT*<sp/>input_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexT*<sp/>hit_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexT*<sp/>miss_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputT*<sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>output_stride,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>cache_start_gid)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT<sp/>entry_gid<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input_indices[blockIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT<sp/>fixed_cache_gid<sp/>=<sp/>entry_gid<sp/>-<sp/>cache_start_gid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT<sp/>cache_set_idx<sp/><sp/><sp/>=<sp/>fixed_cache_gid<sp/>/<sp/>cache_set_coverage;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_lid<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;int&gt;(fixed_cache_gid<sp/>-<sp/>cache_set_idx<sp/>*<sp/>cache_set_coverage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CacheLineInfo<sp/>cache_line_info;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory::device_reference&lt;uint16_t&gt;<sp/>cache_line_tag_dev_ref(cache_line_tag_gref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_line_info.LoadTag(&amp;cache_line_tag_dev_ref[CacheLineInfo::kCacheSetSize<sp/>*<sp/>cache_set_idx]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_line_index<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cache_line_info.KeyIndexSync(cache_set_lid);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int4*<sp/>padded_embedding_ptr<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__shared__<sp/>int4<sp/>s_embedding[32];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EmbedT*<sp/>s_embedding_embed_t<sp/>=<sp/>reinterpret_cast&lt;EmbedT*&gt;(&amp;s_embedding[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory::device_reference&lt;int4&gt;<sp/>cached_embedding_dev_ref(cached_embedding_gref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cache_line_index<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>padded_embedding_ptr<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;cached_embedding_dev_ref[static_cast&lt;int64_t&gt;(cache_set_idx<sp/>*<sp/>CacheLineInfo::kCacheSetSize<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_line_index)<sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stride_in_int4];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(threadIdx.x<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(hit_indices)<sp/>hit_indices[blockIdx.x]<sp/>=<sp/>cache_line_index<sp/>&gt;=<sp/>0<sp/>?<sp/>entry_gid<sp/>:<sp/>(IndexT)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(miss_indices)<sp/>miss_indices[blockIdx.x]<sp/>=<sp/>cache_line_index<sp/>&gt;=<sp/>0<sp/>?<sp/>(IndexT)-1<sp/>:<sp/>entry_gid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cache_line_index<sp/>&lt;<sp/>0)<sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>int<sp/>EMBED_TYPE_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(EmbedT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>int<sp/>EMBED_TYPE_COUNT_PER_INT4<sp/>=<sp/>16<sp/>/<sp/>EMBED_TYPE_SIZE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>start_int4_idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>EMBED_TYPE_SIZE<sp/>*<sp/>start_embedding_idx<sp/>/<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>start_padding<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>start_embedding_idx<sp/>%<sp/>EMBED_TYPE_COUNT_PER_INT4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>end_int4_idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(EMBED_TYPE_SIZE<sp/>*<sp/>(start_embedding_idx<sp/>+<sp/>embedding_size)<sp/>+<sp/>15)<sp/>/<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>shared_start_idx<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>start_padding;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>output_start_idx<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OutputT*<sp/>output_embed_ptr<sp/>=<sp/>output<sp/>+<sp/>static_cast&lt;int64_t&gt;(blockIdx.x)<sp/>*<sp/>output_stride;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(;<sp/>start_int4_idx<sp/>*<sp/>EMBED_TYPE_COUNT_PER_INT4<sp/>&lt;<sp/>start_embedding_idx<sp/>+<sp/>embedding_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_int4_idx<sp/>+=<sp/>32)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>const<sp/>int4_idx<sp/>=<sp/>start_int4_idx<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(int4_idx<sp/>&lt;<sp/>end_int4_idx)<sp/>{<sp/>s_embedding[threadIdx.x]<sp/>=<sp/>padded_embedding_ptr[int4_idx];<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>shared_end_idx<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min(32<sp/>*<sp/>EMBED_TYPE_COUNT_PER_INT4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_embedding_idx<sp/>+<sp/>embedding_size<sp/>-<sp/>start_int4_idx<sp/>*<sp/>EMBED_TYPE_COUNT_PER_INT4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(output_start_idx<sp/>&lt;<sp/>embedding_size<sp/>&amp;&amp;<sp/>shared_start_idx<sp/>&lt;<sp/>shared_end_idx)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(shared_start_idx<sp/>+<sp/>threadIdx.x<sp/>&lt;<sp/>shared_end_idx)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputT<sp/>output_value<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_type&lt;EmbedT,<sp/>OutputT&gt;(s_embedding_embed_t[shared_start_idx<sp/>+<sp/>threadIdx.x]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_embed_ptr[output_start_idx<sp/>+<sp/>threadIdx.x]<sp/>=<sp/>output_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>const<sp/>data_count<sp/>=<sp/>min(32,<sp/>shared_end_idx<sp/>-<sp/>shared_start_idx);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_start_idx<sp/>+=<sp/>data_count;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_start_idx<sp/>+=<sp/>data_count;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shared_start_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>EmbedT,<sp/>typename<sp/>OutputT,<sp/>typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>try_gather_cached_temp_func(wholememory_gref_t<sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_matrix_description_t<sp/>cached_embedding_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_gref_t<sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>input_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_array_description_t<sp/>indices_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>hit_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>miss_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_matrix_description_t<sp/>output_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>indice_count<sp/>=<sp/>indices_desc.size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(cached_embedding_desc.stride<sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_dtype_get_element_size(cached_embedding_desc.dtype)<sp/>%</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(int4)<sp/>==</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(cached_embedding_desc.sizes[1]<sp/>==<sp/>output_desc.sizes[1]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(indices_desc.size<sp/>==<sp/>output_desc.sizes[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>stride_in_int4<sp/>=<sp/>cached_embedding_desc.stride<sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_dtype_get_element_size(cached_embedding_desc.dtype)<sp/>/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(int4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>start_embedding_idx<sp/>=<sp/>cached_embedding_desc.storage_offset;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>embedding_size<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cached_embedding_desc.sizes[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>output_stride<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>output_desc.stride;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>try_gather_cached_kernel&lt;EmbedT,<sp/>OutputT,<sp/>IndexT&gt;&lt;&lt;&lt;indice_count,<sp/>32,<sp/>0,<sp/>stream&gt;&gt;&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stride_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>start_embedding_idx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>embedding_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>IndexT*&gt;(input_indices)<sp/>+<sp/>indices_desc.storage_offset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;IndexT*&gt;(hit_indices),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;IndexT*&gt;(miss_indices),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;OutputT*&gt;(output)<sp/>+<sp/>output_desc.storage_offset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_stride,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_start_gid);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">REGISTER_DISPATCH_THREE_TYPES(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TryGatherCachedFuncFloating,<sp/>try_gather_cached_temp_func,<sp/>ALLFLOAT,<sp/>ALLFLOAT,<sp/>SINT3264)</highlight></codeline>
<codeline><highlight class="normal">REGISTER_DISPATCH_THREE_TYPES(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TryGatherCachedFuncInteger,<sp/>try_gather_cached_temp_func,<sp/>ALLSINT,<sp/>ALLSINT,<sp/>SINT3264)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">wholememory_error_code_t<sp/>try_gather_cached_func(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_gref_t<sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_description_t*<sp/>cached_embedding_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_gref_t<sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_description_t*<sp/>indices_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>hit_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>miss_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_description_t*<sp/>output_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int64_t<sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cached_embedding_desc-&gt;dim<sp/>!=<sp/>2<sp/>||<sp/>indices_desc-&gt;dim<sp/>!=<sp/>1<sp/>||<sp/>output_desc-&gt;dim<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;tensor<sp/>dim<sp/>not<sp/>right.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cached_embedding_desc-&gt;strides[1]<sp/>!=<sp/>1<sp/>||<sp/>indices_desc-&gt;strides[0]<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_desc-&gt;strides[1]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;tensor<sp/>stride<sp/>of<sp/>last<sp/>dim<sp/>should<sp/>be<sp/>1.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cached_embedding_desc-&gt;strides[0]<sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_dtype_get_element_size(cached_embedding_desc-&gt;dtype)<sp/>%<sp/>sizeof(int4)<sp/>!=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;cached_embedding_desc<sp/>should<sp/>be<sp/>aligned<sp/>to<sp/>int4<sp/>(16<sp/>bytes).&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cached_embedding_desc-&gt;sizes[1]<sp/>!=<sp/>output_desc-&gt;sizes[1])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;embedding<sp/>size<sp/>for<sp/>embedding<sp/>and<sp/>output<sp/>should<sp/>be<sp/>same.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(indices_desc-&gt;dtype<sp/>!=<sp/>WHOLEMEMORY_DT_INT64<sp/>&amp;&amp;<sp/>indices_desc-&gt;dtype<sp/>!=<sp/>WHOLEMEMORY_DT_INT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;indices<sp/>should<sp/>be<sp/>int64<sp/>or<sp/>int32.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(indices_desc-&gt;sizes[0]<sp/>!=<sp/>output_desc-&gt;sizes[0])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;indices<sp/>size<sp/>and<sp/>output<sp/>entry<sp/>count<sp/>should<sp/>be<sp/>the<sp/>same.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_dtype_t<sp/>const<sp/>embedding_dtype<sp/>=<sp/>cached_embedding_desc-&gt;dtype;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_dtype_t<sp/>const<sp/>output_dtype<sp/><sp/><sp/><sp/>=<sp/>output_desc-&gt;dtype;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(wholememory_dtype_is_floating_number(embedding_dtype)<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!wholememory_dtype_is_floating_number(output_dtype)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_dtype_is_integer_number(embedding_dtype)<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!wholememory_dtype_is_integer_number(output_dtype))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;embedding<sp/>and<sp/>output<sp/>should<sp/>be<sp/>all<sp/>float<sp/>or<sp/>all<sp/>integer&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_INVALID_INPUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_matrix_description_t<sp/>embedding_matrix_desc,<sp/>cached_embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_matrix_desc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_convert_tensor_desc_to_matrix(&amp;embedding_matrix_desc,<sp/>cached_embedding_desc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(wholememory_convert_tensor_desc_to_matrix(&amp;cached_embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_desc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_convert_tensor_desc_to_matrix(&amp;output_matrix_desc,<sp/>output_desc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_array_description_t<sp/>indices_array_desc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_convert_tensor_desc_to_array(&amp;indices_array_desc,<sp/>indices_desc));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(indices_array_desc.size<sp/>==<sp/>0)<sp/>return<sp/>WHOLEMEMORY_SUCCESS;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(wholememory_dtype_is_floating_number(embedding_dtype))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DISPATCH_THREE_TYPES(embedding_dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_desc-&gt;dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryGatherCachedFuncFloating,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_array_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hit_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miss_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DISPATCH_THREE_TYPES(embedding_dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_desc-&gt;dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryGatherCachedFuncInteger,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_embedding_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_line_tag_gref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_array_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hit_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miss_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_matrix_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>WHOLEMEMORY_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>wholememory_ops</highlight></codeline>
    </programlisting>
    <location file="src/wholememory_ops/functions/gather_cached_func.cu"/>
  </compounddef>
</doxygen>
