<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="parallel__utils_8hpp" kind="file" language="C++">
    <compoundname>parallel_utils.hpp</compoundname>
    <includes local="no">unistd.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">vector</includes>
    <includes refid="logger_8hpp" local="yes">logger.hpp</includes>
    <includedby refid="parallel__utils_8cpp" local="yes">src/parallel_utils.cpp</includedby>
    <includedby refid="wholememory_8cpp" local="yes">src/wholememory/wholememory.cpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="10">
        <label>raft/core/error.hpp</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>wholememory/wholememory.h</label>
        <link refid="wholememory_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="6">
        <label>cstdarg</label>
      </node>
      <node id="16">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>logger.hpp</label>
        <link refid="logger_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>error.hpp</label>
        <link refid="error_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>unistd.h</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="1">
        <label>src/parallel_utils.hpp</label>
        <link refid="parallel__utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>wholememory/global_reference.h</label>
        <link refid="global__reference_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/parallel_utils.hpp</label>
        <link refid="parallel__utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/parallel_utils.cpp</label>
        <link refid="parallel__utils_8cpp"/>
      </node>
      <node id="3">
        <label>src/wholememory/wholememory.cpp</label>
        <link refid="wholememory_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="parallel__utils_8hpp_1aa158e2f66cd55282e84d0d0cb82bfba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MultiThreadRun</definition>
        <argsstring>(int size, std::function&lt; void(int, int)&gt; f)</argsstring>
        <name>MultiThreadRun</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::function&lt; void(int, int)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run f with size threads <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: thread count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>: thread function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="30" column="6" bodyfile="src/parallel_utils.cpp" bodystart="33" bodyend="42" declfile="src/parallel_utils.hpp" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1a03a03c74e8b71b7ab09b1af533dc253f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetProcessorCount</definition>
        <argsstring>()</argsstring>
        <name>GetProcessorCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get processor count of the machine. <simplesect kind="return"><para>: processor count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="36" column="5" bodyfile="src/parallel_utils.cpp" bodystart="44" bodyend="44" declfile="src/parallel_utils.hpp" declline="36" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1a335fecb4c16d0745ee7a4d99bbec6672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MultiProcessRun</definition>
        <argsstring>(int size, std::function&lt; void(int, int)&gt; f, bool inline_single_process=false)</argsstring>
        <name>MultiProcessRun</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::function&lt; void(int, int)&gt;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inline_single_process</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run f with size processes <simplesect kind="note"><para>when using gtest with MultiProcessRun, testing::Test::HasFailure() need to be called before f return and modify exit code according to if has gtest failures. See parallel_utils_tests.cpp for reference. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: process count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>: process function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inline_single_process</parametername>
</parameternamelist>
<parameterdescription>
<para>: use current process to run f if size==1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="47" column="6" bodyfile="src/parallel_utils.cpp" bodystart="46" bodyend="100" declfile="src/parallel_utils.hpp" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1af222e89503cf6289149eb0fedb3195d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CreatePipes</definition>
        <argsstring>(std::vector&lt; std::array&lt; int, 2 &gt;&gt; *pipes, int nproc)</argsstring>
        <name>CreatePipes</name>
        <param>
          <type>std::vector&lt; std::array&lt; int, 2 &gt;&gt; *</type>
          <declname>pipes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nproc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="49" column="12" bodyfile="src/parallel_utils.hpp" bodystart="49" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1ae663ff24811f0fb0cd494c8919a86c35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ClosePipes</definition>
        <argsstring>(std::vector&lt; std::array&lt; int, 2 &gt;&gt; *pipes)</argsstring>
        <name>ClosePipes</name>
        <param>
          <type>std::vector&lt; std::array&lt; int, 2 &gt;&gt; *</type>
          <declname>pipes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="61" column="13" bodyfile="src/parallel_utils.hpp" bodystart="61" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1a27d5df56de20d34708079f3709bd16d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PipeBroadcast</definition>
        <argsstring>(int rank, int world_size, int root, const std::vector&lt; std::array&lt; int, 2 &gt;&gt; &amp;pipes, T *data)</argsstring>
        <name>PipeBroadcast</name>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>world_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::array&lt; int, 2 &gt;&gt; &amp;</type>
          <declname>pipes</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="71" column="13" bodyfile="src/parallel_utils.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1a73af3a6efe13b57f9c1174594c7abac3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PipeGroupBroadcast</definition>
        <argsstring>(int rank, int world_size, int group_root, int group_size, const std::vector&lt; std::array&lt; int, 2 &gt;&gt; &amp;pipes, T *data)</argsstring>
        <name>PipeGroupBroadcast</name>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>world_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>group_root</declname>
        </param>
        <param>
          <type>int</type>
          <declname>group_size</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::array&lt; int, 2 &gt;&gt; &amp;</type>
          <declname>pipes</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="85" column="13" bodyfile="src/parallel_utils.hpp" bodystart="85" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1a9bc5076283a5dabe659fd2a0e7742d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SideBandCommunicator *</type>
        <definition>SideBandCommunicator* StartSidebandCommunicator</definition>
        <argsstring>(int world_rank, int world_size, const char *server_addr, int port)</argsstring>
        <name>StartSidebandCommunicator</name>
        <param>
          <type>int</type>
          <declname>world_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>world_size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>server_addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="105" column="22" bodyfile="src/parallel_utils.cpp" bodystart="301" bodyend="310" declfile="src/parallel_utils.hpp" declline="105" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1a897ed70abe3df82a6965fd89392698c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SideBandAllToAll</definition>
        <argsstring>(SideBandCommunicator *side_band_communicator, const void *input, void *output, size_t element_size)</argsstring>
        <name>SideBandAllToAll</name>
        <param>
          <type>SideBandCommunicator *</type>
          <declname>side_band_communicator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>element_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="109" column="6" bodyfile="src/parallel_utils.cpp" bodystart="312" bodyend="318" declfile="src/parallel_utils.hpp" declline="109" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1a6fee6d78680ea2417460e8426637c72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SideBandAllGather</definition>
        <argsstring>(SideBandCommunicator *side_band_communicator, const void *input, void *output, size_t element_size)</argsstring>
        <name>SideBandAllGather</name>
        <param>
          <type>SideBandCommunicator *</type>
          <declname>side_band_communicator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>element_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="113" column="6" bodyfile="src/parallel_utils.cpp" bodystart="320" bodyend="326" declfile="src/parallel_utils.hpp" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1a76bbb752f752aeb89a19ac293a2b650a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SideBandBroadcast</definition>
        <argsstring>(SideBandCommunicator *side_band_communicator, void *data, size_t element_size, int root_rank)</argsstring>
        <name>SideBandBroadcast</name>
        <param>
          <type>SideBandCommunicator *</type>
          <declname>side_band_communicator</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>element_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root_rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="117" column="6" bodyfile="src/parallel_utils.cpp" bodystart="328" bodyend="334" declfile="src/parallel_utils.hpp" declline="117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1ac7e6e5fc083815953f970c174d33b33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShutDownSidebandCommunicator</definition>
        <argsstring>(SideBandCommunicator *side_band_communicator)</argsstring>
        <name>ShutDownSidebandCommunicator</name>
        <param>
          <type>SideBandCommunicator *</type>
          <declname>side_band_communicator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="121" column="6" bodyfile="src/parallel_utils.cpp" bodystart="336" bodyend="340" declfile="src/parallel_utils.hpp" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parallel__utils_8hpp_1aa55a61f8d5546940a8b35a04c730487d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ForkGetDeviceCount</definition>
        <argsstring>()</argsstring>
        <name>ForkGetDeviceCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parallel_utils.hpp" line="123" column="5" bodyfile="src/parallel_utils.cpp" bodystart="342" bodyend="376" declfile="src/parallel_utils.hpp" declline="123" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8hpp" kindref="compound">logger.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1aa158e2f66cd55282e84d0d0cb82bfba0" kindref="member">MultiThreadRun</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>f);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1a03a03c74e8b71b7ab09b1af533dc253f" kindref="member">GetProcessorCount</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1a335fecb4c16d0745ee7a4d99bbec6672" kindref="member">MultiProcessRun</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>f,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inline_single_process<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="parallel__utils_8hpp_1af222e89503cf6289149eb0fedb3195d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1af222e89503cf6289149eb0fedb3195d8" kindref="member">CreatePipes</ref>(std::vector&lt;std::array&lt;int,<sp/>2&gt;&gt;*<sp/>pipes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nproc)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>pipes-&gt;resize(nproc);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nproc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pipe((*pipes)[i].data())<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Create<sp/>pipe<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="parallel__utils_8hpp_1ae663ff24811f0fb0cd494c8919a86c35" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1ae663ff24811f0fb0cd494c8919a86c35" kindref="member">ClosePipes</ref>(std::vector&lt;std::array&lt;int,<sp/>2&gt;&gt;*<sp/>pipes)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pipes-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="error_8hpp_1af32f7e28d8982de1feb7cfa07a6c8794" kindref="member">WHOLEMEMORY_CHECK</ref>(close(pipes-&gt;at(i)[0])<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="error_8hpp_1af32f7e28d8982de1feb7cfa07a6c8794" kindref="member">WHOLEMEMORY_CHECK</ref>(close(pipes-&gt;at(i)[1])<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>pipes-&gt;clear();</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="71" refid="parallel__utils_8hpp_1a27d5df56de20d34708079f3709bd16d1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1a27d5df56de20d34708079f3709bd16d1" kindref="member">PipeBroadcast</ref>(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="communicator_8hpp_1ab8411355a7d80016be6edcce3437b978" kindref="member">world_size</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::array&lt;int,<sp/>2&gt;&gt;&amp;<sp/>pipes,<sp/>T*<sp/>data)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>==<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="communicator_8hpp_1ab8411355a7d80016be6edcce3437b978" kindref="member">world_size</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wret<sp/>=<sp/>write(pipes[i][1],<sp/>data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wret<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T))<sp/>{<sp/><ref refid="logger_8hpp_1a2aabf020ba5e697df145e080d894b5c4" kindref="member">WHOLEMEMORY_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;write<sp/>to<sp/>pipe<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rret<sp/>=<sp/>read(pipes[rank][0],<sp/>data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rret<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T))<sp/>{<sp/><ref refid="logger_8hpp_1a2aabf020ba5e697df145e080d894b5c4" kindref="member">WHOLEMEMORY_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;read<sp/>to<sp/>pipe<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="85" refid="parallel__utils_8hpp_1a73af3a6efe13b57f9c1174594c7abac3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1a73af3a6efe13b57f9c1174594c7abac3" kindref="member">PipeGroupBroadcast</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="communicator_8hpp_1ab8411355a7d80016be6edcce3437b978" kindref="member">world_size</ref>,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group_root,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group_size,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::array&lt;int,<sp/>2&gt;&gt;&amp;<sp/>pipes,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>data)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1af32f7e28d8982de1feb7cfa07a6c8794" kindref="member">WHOLEMEMORY_CHECK</ref>(<ref refid="communicator_8hpp_1ab8411355a7d80016be6edcce3437b978" kindref="member">world_size</ref><sp/>%<sp/>group_size<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>%<sp/>group_size<sp/>==<sp/>group_root)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>rank<sp/>-<sp/>group_root;<sp/>i<sp/>&lt;<sp/>rank<sp/>-<sp/>group_root<sp/>+<sp/>group_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wret<sp/>=<sp/>write(pipes[i][1],<sp/>data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wret<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T))<sp/>{<sp/><ref refid="logger_8hpp_1a2aabf020ba5e697df145e080d894b5c4" kindref="member">WHOLEMEMORY_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;write<sp/>to<sp/>pipe<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rret<sp/>=<sp/>read(pipes[rank][0],<sp/>data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rret<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T))<sp/>{<sp/><ref refid="logger_8hpp_1a2aabf020ba5e697df145e080d894b5c4" kindref="member">WHOLEMEMORY_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;read<sp/>to<sp/>pipe<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SideBandCommunicator;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">SideBandCommunicator*<sp/><ref refid="parallel__utils_8hpp_1a9bc5076283a5dabe659fd2a0e7742d60" kindref="member">StartSidebandCommunicator</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="communicator_8hpp_1a0be0ed3102aab1d72782301d75cf570b" kindref="member">world_rank</ref>,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="communicator_8hpp_1ab8411355a7d80016be6edcce3437b978" kindref="member">world_size</ref>,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>server_addr,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1a897ed70abe3df82a6965fd89392698c3" kindref="member">SideBandAllToAll</ref>(SideBandCommunicator*<sp/>side_band_communicator,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>input,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>output,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>element_size);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1a6fee6d78680ea2417460e8426637c72a" kindref="member">SideBandAllGather</ref>(SideBandCommunicator*<sp/>side_band_communicator,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>input,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>output,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>element_size);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1a76bbb752f752aeb89a19ac293a2b650a" kindref="member">SideBandBroadcast</ref>(SideBandCommunicator*<sp/>side_band_communicator,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>element_size,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>root_rank);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1ac7e6e5fc083815953f970c174d33b33f" kindref="member">ShutDownSidebandCommunicator</ref>(SideBandCommunicator*<sp/>side_band_communicator);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="parallel__utils_8hpp_1aa55a61f8d5546940a8b35a04c730487d" kindref="member">ForkGetDeviceCount</ref>();</highlight></codeline>
    </programlisting>
    <location file="src/parallel_utils.hpp"/>
  </compounddef>
</doxygen>
