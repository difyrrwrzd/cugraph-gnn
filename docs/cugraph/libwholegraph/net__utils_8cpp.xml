<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="net__utils_8cpp" kind="file" language="C++">
    <compoundname>net_utils.cpp</compoundname>
    <includes refid="net__utils_8h" local="yes">net_utils.h</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">netdb.h</includes>
    <includes local="no">netinet/in.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">string</includes>
    <includes refid="cuda__macros_8hpp" local="yes">cuda_macros.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>netinet/in.h</label>
      </node>
      <node id="6">
        <label>arpa/inet.h</label>
      </node>
      <node id="19">
        <label>iomanip</label>
      </node>
      <node id="23">
        <label>raft/core/error.hpp</label>
      </node>
      <node id="2">
        <label>net_utils.h</label>
        <link refid="net__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>fcntl.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="8">
        <label>netdb.h</label>
      </node>
      <node id="24">
        <label>error.hpp</label>
        <link refid="error_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="16">
        <label>cstdio</label>
      </node>
      <node id="11">
        <label>unistd.h</label>
      </node>
      <node id="17">
        <label>cstdlib</label>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>cuda_macros.hpp</label>
        <link refid="cuda__macros_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cuda.h</label>
      </node>
      <node id="22">
        <label>mutex</label>
      </node>
      <node id="14">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="15">
        <label>chrono</label>
      </node>
      <node id="4">
        <label>sys/socket.h</label>
      </node>
      <node id="18">
        <label>execinfo.h</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="1">
        <label>src/net_utils.cpp</label>
        <link refid="net__utils_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="net__utils_8cpp_1af08afee462626aed08ee6e6677014cc0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ResolveHostName</definition>
        <argsstring>(sockaddr_in *saddr, const std::string &amp;host_name, int port)</argsstring>
        <name>ResolveHostName</name>
        <param>
          <type>sockaddr_in *</type>
          <declname>saddr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>host_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.cpp" line="31" column="13" bodyfile="src/net_utils.cpp" bodystart="31" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8cpp_1a794fe9bb8268ca02b29f1216011d183f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CreateServerListenFd</definition>
        <argsstring>(int port)</argsstring>
        <name>CreateServerListenFd</name>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.cpp" line="45" column="5" bodyfile="src/net_utils.cpp" bodystart="45" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8cpp_1a2373c8f7f4010aabee06dc2f1a8f0db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ServerListen</definition>
        <argsstring>(int listen_fd, int backlog)</argsstring>
        <name>ServerListen</name>
        <param>
          <type>int</type>
          <declname>listen_fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>backlog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.cpp" line="65" column="6" bodyfile="src/net_utils.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8cpp_1a27e1c8a629c1e127e2ff8569901feed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ServerAccept</definition>
        <argsstring>(int listen_fd, sockaddr_in *client_addr, socklen_t *client_addr_len)</argsstring>
        <name>ServerAccept</name>
        <param>
          <type>int</type>
          <declname>listen_fd</declname>
        </param>
        <param>
          <type>sockaddr_in *</type>
          <declname>client_addr</declname>
        </param>
        <param>
          <type>socklen_t *</type>
          <declname>client_addr_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.cpp" line="70" column="5" bodyfile="src/net_utils.cpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8cpp_1a18d2b9566bc502b2d58b4d914aa0633f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CreateClientFd</definition>
        <argsstring>(const std::string &amp;server_name, int server_port)</argsstring>
        <name>CreateClientFd</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>server_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>server_port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.cpp" line="76" column="5" bodyfile="src/net_utils.cpp" bodystart="76" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8cpp_1af0fa6b7d4c1a9154ff355a8591204bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SingleSend</definition>
        <argsstring>(int sock_fd, const void *send_data, size_t send_size)</argsstring>
        <name>SingleSend</name>
        <param>
          <type>int</type>
          <declname>sock_fd</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.cpp" line="105" column="6" bodyfile="src/net_utils.cpp" bodystart="105" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8cpp_1a0ccf467583c413aa687ec2bff9247258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SingleRecv</definition>
        <argsstring>(int sock_fd, void *recv_data, size_t recv_size)</argsstring>
        <name>SingleRecv</name>
        <param>
          <type>int</type>
          <declname>sock_fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>recv_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.cpp" line="114" column="6" bodyfile="src/net_utils.cpp" bodystart="114" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="net__utils_8h" kindref="compound">net_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cuda__macros_8hpp" kindref="compound">cuda_macros.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResolveHostName(sockaddr_in*<sp/>saddr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="communicator_8cpp_1a3bf60dd8990775b41eee8c48f7aff2da" kindref="member">host_name</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>addrinfo<sp/>hints<sp/>=<sp/>{0,<sp/>AF_INET,<sp/>SOCK_STREAM,<sp/>IPPROTO_TCP,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>addrinfo*<sp/>res;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>port_buf[16];</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>snprintf(port_buf,<sp/>16,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>port);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>getaddrinfo(<ref refid="communicator_8cpp_1a3bf60dd8990775b41eee8c48f7aff2da" kindref="member">host_name</ref>.c_str(),<sp/>port_buf,<sp/>&amp;hints,<sp/>&amp;res);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Resolve<sp/>IP<sp/>for<sp/>host<sp/>%s<sp/>failed.\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="communicator_8cpp_1a3bf60dd8990775b41eee8c48f7aff2da" kindref="member">host_name</ref>.c_str());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="communicator_8hpp_1a70b54559cae3920bb2713ca60f7bcb5c" kindref="member">abort</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>*saddr<sp/>=<sp/>*(sockaddr_in*)(res-&gt;ai_addr);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net__utils_8cpp_1a794fe9bb8268ca02b29f1216011d183f" kindref="member">CreateServerListenFd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>server_sock<sp/>=<sp/>socket(AF_INET,<sp/>SOCK_STREAM,<sp/>0);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(server_sock<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>setsockopt(server_sock,<sp/>SOL_SOCKET,<sp/>SO_REUSEADDR,<sp/>&amp;enable,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Binding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>sockaddr_in<sp/>server_addr;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>memset(&amp;server_addr,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>server_addr.sin_family<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>server_addr.sin_port<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>server_addr.sin_addr.s_addr<sp/>=<sp/>htonl(INADDR_ANY);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(bind(server_sock,<sp/>(sockaddr*)&amp;server_addr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_addr))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>server_sock;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net__utils_8cpp_1a2373c8f7f4010aabee06dc2f1a8f0db4" kindref="member">ServerListen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>listen_fd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>backlog)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(listen(listen_fd,<sp/>backlog)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net__utils_8cpp_1a27e1c8a629c1e127e2ff8569901feed5" kindref="member">ServerAccept</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>listen_fd,<sp/>sockaddr_in*<sp/>client_addr,<sp/>socklen_t*<sp/>client_addr_len)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>client_sock<sp/>=<sp/>accept(listen_fd,<sp/>(sockaddr*)client_addr,<sp/>client_addr_len);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client_sock;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net__utils_8cpp_1a18d2b9566bc502b2d58b4d914aa0633f" kindref="member">CreateClientFd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>server_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>server_port)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>client_sock<sp/>=<sp/>socket(AF_INET,<sp/>SOCK_STREAM,<sp/>0);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(client_sock<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>sockaddr_in<sp/>server_addr;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>ResolveHostName(&amp;server_addr,<sp/>server_name,<sp/>server_port);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(server_addr.sin_family<sp/>==<sp/>AF_INET);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(server_addr.sin_port<sp/>==<sp/>htons(server_port));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>inet_pton(AF_INET,<sp/>server_name.c_str(),<sp/>&amp;server_addr.sin_addr);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(connect(client_sock,<sp/>(sockaddr*)&amp;server_addr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_addr))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(errno)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ECONNREFUSED:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Server<sp/>may<sp/>not<sp/>running,<sp/>waiting...&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ETIMEDOUT:<sp/>printf(</highlight><highlight class="stringliteral">&quot;Connecting<sp/>timeout<sp/>retrying...\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ENETUNREACH:<sp/>printf(</highlight><highlight class="stringliteral">&quot;Network<sp/>unreachable,<sp/>retrying...\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>printf(</highlight><highlight class="stringliteral">&quot;unknow<sp/>error<sp/>%d,<sp/>retrying...\n&quot;</highlight><highlight class="normal">,<sp/>errno);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(500<sp/>*<sp/>1000);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client_sock;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net__utils_8cpp_1af0fa6b7d4c1a9154ff355a8591204bf8" kindref="member">SingleSend</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock_fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>send_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>send_size)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>ssize_t<sp/>bytes_send<sp/>=<sp/>send(sock_fd,<sp/>send_data,<sp/>send_size,<sp/>0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_send<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;recv<sp/>returned<sp/>%ld,<sp/>errno=%d<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>bytes_send,<sp/>errno,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(bytes_send<sp/>==<sp/>send_size);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net__utils_8cpp_1a0ccf467583c413aa687ec2bff9247258" kindref="member">SingleRecv</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock_fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>recv_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>recv_size)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>ssize_t<sp/>bytes_received<sp/>=<sp/>recv(sock_fd,<sp/>recv_data,<sp/>recv_size,<sp/>0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_received<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;recv<sp/>returned<sp/>%ld,<sp/>errno=%d<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>bytes_received,<sp/>errno,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(bytes_received<sp/>==<sp/>recv_size);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/net_utils.cpp"/>
  </compounddef>
</doxygen>
