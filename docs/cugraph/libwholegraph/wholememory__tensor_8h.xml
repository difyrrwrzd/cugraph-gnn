<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="wholememory__tensor_8h" kind="file" language="C++">
    <compoundname>wholememory_tensor.h</compoundname>
    <includes refid="tensor__description_8h" local="no">wholememory/tensor_description.h</includes>
    <includes refid="wholememory_8h" local="no">wholememory/wholememory.h</includes>
    <includedby refid="embedding_8h" local="no">include/wholememory/embedding.h</includedby>
    <includedby refid="graph__op_8h" local="no">include/wholememory/graph_op.h</includedby>
    <includedby refid="wholegraph__op_8h" local="no">include/wholememory/wholegraph_op.h</includedby>
    <includedby refid="wholememory__op_8h" local="no">include/wholememory/wholememory_op.h</includedby>
    <includedby refid="embedding_8hpp" local="no">src/wholememory/embedding.hpp</includedby>
    <includedby refid="embedding__cache_8hpp" local="no">src/wholememory/embedding_cache.hpp</includedby>
    <includedby refid="wholememory__tensor_8cpp" local="yes">src/wholememory/wholememory_tensor.cpp</includedby>
    <includedby refid="embedding__cache__func_8h" local="no">src/wholememory_ops/functions/embedding_cache_func.h</includedby>
    <includedby refid="embedding__optimizer__func_8h" local="no">src/wholememory_ops/functions/embedding_optimizer_func.h</includedby>
    <includedby refid="map__indices__func_8h" local="no">src/wholememory_ops/functions/map_indices_func.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>wholememory/wholememory.h</label>
        <link refid="wholememory_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
      <node id="1">
        <label>include/wholememory/wholememory_tensor.h</label>
        <link refid="wholememory__tensor_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>wholememory/global_reference.h</label>
        <link refid="global__reference_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>wholememory/tensor_description.h</label>
        <link refid="tensor__description_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>src/wholememory/embedding_optimizer.hpp</label>
        <link refid="embedding__optimizer_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/wholememory_ops/scatter_op.cpp</label>
        <link refid="scatter__op_8cpp"/>
      </node>
      <node id="12">
        <label>src/graph_ops/csr_add_self_loop.cpp</label>
        <link refid="csr__add__self__loop_8cpp"/>
      </node>
      <node id="10">
        <label>include/wholememory/graph_op.h</label>
        <link refid="graph__op_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/wholememory/embedding.hpp</label>
        <link refid="embedding_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/wholememory/embedding_optimizer.cpp</label>
        <link refid="embedding__optimizer_8cpp"/>
      </node>
      <node id="16">
        <label>include/wholememory/wholememory_op.h</label>
        <link refid="wholememory__op_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>src/wholememory_ops/gather_op.cpp</label>
        <link refid="gather__op_8cpp"/>
      </node>
      <node id="21">
        <label>src/wholememory_ops/functions/map_indices_func.h</label>
        <link refid="map__indices__func_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/wholememory/embedding.cpp</label>
        <link refid="embedding_8cpp"/>
      </node>
      <node id="19">
        <label>src/wholememory/wholememory_tensor.cpp</label>
        <link refid="wholememory__tensor_8cpp"/>
      </node>
      <node id="20">
        <label>src/wholememory_ops/functions/embedding_optimizer_func.h</label>
        <link refid="embedding__optimizer__func_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/wholememory/embedding_cache.cpp</label>
        <link refid="embedding__cache_8cpp"/>
      </node>
      <node id="11">
        <label>src/graph_ops/append_unique.cpp</label>
        <link refid="append__unique_8cpp"/>
      </node>
      <node id="14">
        <label>src/wholegraph_ops/unweighted_sample_without_replacement.cpp</label>
        <link refid="unweighted__sample__without__replacement_8cpp"/>
      </node>
      <node id="2">
        <label>include/wholememory/embedding.h</label>
        <link refid="embedding_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/wholememory/wholememory_tensor.h</label>
        <link refid="wholememory__tensor_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/wholememory/wholegraph_op.h</label>
        <link refid="wholegraph__op_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/wholememory_ops/functions/embedding_cache_func.h</label>
        <link refid="embedding__cache__func_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/wholememory/embedding_cache.hpp</label>
        <link refid="embedding__cache_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>src/wholegraph_ops/weighted_sample_without_replacement.cpp</label>
        <link refid="weighted__sample__without__replacement_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="wholememory__tensor_8h_1ab5f682b6d30a9b04fc032b20b34efd4b" prot="public" static="no">
        <name>WM_TENSOR_COUNT_DEBUG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="162" column="9" bodyfile="include/wholememory/wholememory_tensor.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" prot="public" static="no">
        <type>struct wholememory_tensor_ *</type>
        <definition>typedef struct wholememory_tensor_* wholememory_tensor_t</definition>
        <argsstring></argsstring>
        <name>wholememory_tensor_t</name>
        <briefdescription>
<para>Opaque handle to WholeMemoryTensor. </para>
        </briefdescription>
        <detaileddescription>
<para>An Opaque handle to WholeMemoryTensor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="30" column="35" bodyfile="include/wholememory/wholememory_tensor.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="wholememory__tensor_8h_1a0ffc85adcd2d4bf705b0e0880f344fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_create_tensor</definition>
        <argsstring>(wholememory_tensor_t *wholememory_tensor, wholememory_tensor_description_t *tensor_description, wholememory_comm_t comm, wholememory_memory_type_t memory_type, wholememory_memory_location_t memory_location)</argsstring>
        <name>wholememory_create_tensor</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>wholememory_tensor</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>tensor_description</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a58cc0d50d4f407e416d73b7a806aff50" kindref="member">wholememory_memory_type_t</ref></type>
          <declname>memory_type</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1aaab2c1ef14fcbfffce91ce5856c5d9fe" kindref="member">wholememory_memory_location_t</ref></type>
          <declname>memory_location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: returned WholeMemory Tensor handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: description of the WholeMemory Tensor, should be 1-D or 2-D continuous tensor without offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Communicator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_type</parametername>
</parameternamelist>
<parameterdescription>
<para>: Memory Type of the underlying WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_location</parametername>
</parameternamelist>
<parameterdescription>
<para>: Memory Location of the underlying WholeMemory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="42" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="51" bodyend="105" declfile="include/wholememory/wholememory_tensor.h" declline="42" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1a6358b3b4a8b37c3172814e3a1c9a4d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_destroy_tensor</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_destroy_tensor</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="54" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="107" bodyend="119" declfile="include/wholememory/wholememory_tensor.h" declline="54" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1a73b5a4b92b2b3b7696c66007875c82d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_make_tensor_from_pointer</definition>
        <argsstring>(wholememory_tensor_t *wholememory_tensor, void *storage_ptr, wholememory_tensor_description_t *tensor_description)</argsstring>
        <name>wholememory_make_tensor_from_pointer</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>wholememory_tensor</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>storage_ptr</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>tensor_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make WholeMemory Tensor from local memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: returned WholeMemory Tensor handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to underlying storage memory. Note: storage pointer may be not same as data pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: description of the WholeMemory Tensor, should be 1-D or 2-D </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="64" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="121" bodyend="165" declfile="include/wholememory/wholememory_tensor.h" declline="64" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1ac6f795b22e58704ce49f6db78d68d5b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_make_tensor_from_handle</definition>
        <argsstring>(wholememory_tensor_t *wholememory_tensor, wholememory_handle_t wholememory_handle, wholememory_tensor_description_t *tensor_description)</argsstring>
        <name>wholememory_make_tensor_from_handle</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>wholememory_tensor</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>tensor_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make WholeMemory Tensor from local memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: returned WholeMemory Tensor handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wholememory_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: description of the WholeMemory Tensor, should be 1-D or 2-D </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="76" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="167" bodyend="199" declfile="include/wholememory/wholememory_tensor.h" declline="76" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1a8fd657162127ed32802f94e1b2ed348e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory_tensor_has_handle</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_has_handle</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if has WholeMemory Handle, WholeMemory Tensor created by wholememory_make_tensor has no Handle <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: if has WholeMemory Handle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="87" column="6" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="201" bodyend="204" declfile="include/wholememory/wholememory_tensor.h" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1a098f2402daf29568bfb6678ef0a7eb5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
        <definition>wholememory_handle_t wholememory_tensor_get_memory_handle</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_memory_handle</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get WholeMemory handle from WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: WholeMemory handle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="94" column="22" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="206" bodyend="210" declfile="include/wholememory/wholememory_tensor.h" declline="94" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1ae345b249eb4bac62cf8232e3d856f510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
        <definition>wholememory_tensor_description_t* wholememory_tensor_get_tensor_description</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_tensor_description</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get tensor description from WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: pointer to the underlying <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="101" column="34" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="212" bodyend="216" declfile="include/wholememory/wholememory_tensor.h" declline="101" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1a8de28a7ba7471883ba38b8ca33ed5001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_tensor_get_global_reference</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor, wholememory_gref_t *wholememory_gref)</argsstring>
        <name>wholememory_tensor_get_global_reference</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__gref__t" kindref="compound">wholememory_gref_t</ref> *</type>
          <declname>wholememory_gref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get global reference from WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wholememory_gref</parametername>
</parameternamelist>
<parameterdescription>
<para>: global reference </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="110" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="218" bodyend="231" declfile="include/wholememory/wholememory_tensor.h" declline="110" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1abe9ddf0d6119f5eba3680de07166c681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_tensor_map_local_tensor</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor, wholememory_tensor_t *local_tensor)</argsstring>
        <name>wholememory_tensor_map_local_tensor</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>local_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map local tensor of WholeMemory Tensor. Only support 1D and 2D tensor with WholeMemory Handle. For 1D tensor, storage_offset should be 0 For 2D tensor, storage_offset + size[1] should &lt;= stride[0]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: returned local tensor, need to be destroyed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="123" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="233" bodyend="276" declfile="include/wholememory/wholememory_tensor.h" declline="123" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1a3f5f9937591864246e0673b0a0cf8db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* wholememory_tensor_get_data_pointer</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_data_pointer</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get data pointer from WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Pointer to first data for CONTINUOUS WholeMemory or not WholeMemory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="131" column="6" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="278" bodyend="298" declfile="include/wholememory/wholememory_tensor.h" declline="131" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1a1fa16f060cc12d88ce8b495f62c3f310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wholememory_tensor_get_entry_per_partition</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_entry_per_partition</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get entry count per rank of a WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: entry count per rank </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="138" column="8" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="300" bodyend="330" declfile="include/wholememory/wholememory_tensor.h" declline="138" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1ab1032fd06c149ab1ab634e95e6efb3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_tensor_get_subtensor</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor, int64_t *starts, int64_t *ends, wholememory_tensor_t *sub_wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_subtensor</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>starts</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>ends</declname>
        </param>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>sub_wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get sub tensor of a WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>starts</parametername>
</parameternamelist>
<parameterdescription>
<para>: starts of each dim, length should be the dim of wholememory_tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ends</parametername>
</parameternamelist>
<parameterdescription>
<para>: ends of each dim, length should be the dim of wholememory_tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to returned sub tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="148" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="332" bodyend="384" declfile="include/wholememory/wholememory_tensor.h" declline="148" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1a02313ba65cd384d3c91d5190f94ec992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
        <definition>wholememory_tensor_t wholememory_tensor_get_root</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_root</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get root tensor of a WholeMemory Tensor, root means it is not a sub tensor of any WholeMemory Tensor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: the root of current WholeMemory tensor, maybe same as wholememory_tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="160" column="22" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="386" bodyend="389" declfile="include/wholememory/wholememory_tensor.h" declline="160" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8h_1a66284801c376eb593b502a5818d5b12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t get_wholememory_tensor_count</definition>
        <argsstring>()</argsstring>
        <name>get_wholememory_tensor_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/wholememory_tensor.h" line="163" column="9" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="49" bodyend="49" declfile="include/wholememory/wholememory_tensor.h" declline="163" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tensor__description_8h" kindref="compound">wholememory/tensor_description.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="wholememory_8h" kindref="compound">wholememory/wholememory.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">wholememory_tensor_*<sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8h_1a0ffc85adcd2d4bf705b0e0880f344fe2" kindref="member">wholememory_create_tensor</ref>(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>wholememory_tensor,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>tensor_description,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__comm__" kindref="compound">wholememory_comm_t</ref><sp/>comm,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="wholememory_8h_1a58cc0d50d4f407e416d73b7a806aff50" kindref="member">wholememory_memory_type_t</ref><sp/>memory_type,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="wholememory_8h_1aaab2c1ef14fcbfffce91ce5856c5d9fe" kindref="member">wholememory_memory_location_t</ref><sp/>memory_location);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8h_1a6358b3b4a8b37c3172814e3a1c9a4d0d" kindref="member">wholememory_destroy_tensor</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8h_1a73b5a4b92b2b3b7696c66007875c82d4" kindref="member">wholememory_make_tensor_from_pointer</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>wholememory_tensor,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>storage_ptr,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>tensor_description);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8h_1ac6f795b22e58704ce49f6db78d68d5b0" kindref="member">wholememory_make_tensor_from_handle</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>wholememory_tensor,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__handle__" kindref="compound">wholememory_handle_t</ref><sp/>wholememory_handle,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>tensor_description);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="wholememory__tensor_8h_1a8fd657162127ed32802f94e1b2ed348e" kindref="member">wholememory_tensor_has_handle</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="structwholememory__handle__" kindref="compound">wholememory_handle_t</ref><sp/><ref refid="wholememory__tensor_8h_1a098f2402daf29568bfb6678ef0a7eb5f" kindref="member">wholememory_tensor_get_memory_handle</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/><ref refid="wholememory__tensor_8h_1ae345b249eb4bac62cf8232e3d856f510" kindref="member">wholememory_tensor_get_tensor_description</ref>(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8h_1a8de28a7ba7471883ba38b8ca33ed5001" kindref="member">wholememory_tensor_get_global_reference</ref>(</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor,<sp/><ref refid="structwholememory__gref__t" kindref="compound">wholememory_gref_t</ref>*<sp/>wholememory_gref);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8h_1abe9ddf0d6119f5eba3680de07166c681" kindref="member">wholememory_tensor_map_local_tensor</ref>(</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor,<sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>local_tensor);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="wholememory__tensor_8h_1a3f5f9937591864246e0673b0a0cf8db2" kindref="member">wholememory_tensor_get_data_pointer</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="wholememory__tensor_8h_1a1fa16f060cc12d88ce8b495f62c3f310" kindref="member">wholememory_tensor_get_entry_per_partition</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8h_1ab1032fd06c149ab1ab634e95e6efb3a0" kindref="member">wholememory_tensor_get_subtensor</ref>(</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>int64_t*<sp/>starts,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>int64_t*<sp/>ends,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>sub_wholememory_tensor);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/><ref refid="wholememory__tensor_8h_1a02313ba65cd384d3c91d5190f94ec992" kindref="member">wholememory_tensor_get_root</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="wholememory__tensor_8h_1ab5f682b6d30a9b04fc032b20b34efd4b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WM_TENSOR_COUNT_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">int64_t<sp/><ref refid="wholememory__tensor_8h_1a66284801c376eb593b502a5818d5b12e" kindref="member">get_wholememory_tensor_count</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/wholememory/wholememory_tensor.h"/>
  </compounddef>
</doxygen>
