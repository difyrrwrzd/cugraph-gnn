<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="embedding__cache__func_8cu" kind="file" language="C++">
    <compoundname>embedding_cache_func.cu</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;embedding_cache_func.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;cub/cub.cuh&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;wholememory/wholememory_op.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;wholememory/wholememory_tensor.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;cuda_macros.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;embedding_cache_func.cuh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;error.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;exchange_ids_nccl_func.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;logger.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;wholememory/embedding_cache.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;wholememory/env_func_ptrs.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;wholememory/integer_utils.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;wholememory_ops/functions/embedding_cache_func.cuh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;wholememory_ops/register.hpp&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>wholememory_ops<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Sort<sp/>local<sp/>indices,<sp/>do<sp/>unique<sp/>and<sp/>return<sp/>unique_indices<sp/>and<sp/>count<sp/>of<sp/>each<sp/>indices</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@tparam<sp/>IndexT<sp/>:<sp/>data<sp/>type<sp/>of<sp/>indices</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>indices<sp/>:<sp/>indices<sp/>to<sp/>process</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>indice_desc<sp/>:<sp/>description<sp/>of<sp/>indices</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>num_runs<sp/>:<sp/>return<sp/>number<sp/>of<sp/>unique<sp/>indices</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>unique_indices_handle<sp/>:<sp/>temp_memory_handle<sp/>of<sp/>unique<sp/>indices</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>unique_count_handle<sp/>:<sp/>temp_memory_handle<sp/>of<sp/>count<sp/>of<sp/>each<sp/>unique<sp/>indices</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>p_thrust_allocator<sp/>:<sp/>thrust<sp/>allocator</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>p_env_fns<sp/>:<sp/>env_fns</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>stream<sp/>:<sp/>CUDA<sp/>stream<sp/>to<sp/>use</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>SortUniqueLocalIndicesTempFunc(const<sp/>void*<sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_array_description_t<sp/>indice_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>num_runs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_memory_handle*<sp/>unique_indices_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_memory_handle*<sp/>unique_count_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wm_thrust_allocator*<sp/>p_thrust_allocator,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_env_func_t*<sp/>p_env_fns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(indice_desc.size<sp/>==<sp/>0)<sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wm_thrust_allocator&amp;<sp/>allocator<sp/>=<sp/>*p_thrust_allocator;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(indice_desc.storage_offset<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>IndexT*<sp/>indices_to_sort<sp/>=<sp/>static_cast&lt;const<sp/>IndexT*&gt;(indices);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>sorted_indices_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sorted_indices_handle.device_malloc(indice_desc.size,<sp/>indice_desc.dtype);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT*<sp/>sorted_indices<sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;IndexT*&gt;(sorted_indices_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>cub_temp_storage<sp/><sp/><sp/><sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>temp_storage_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub::DeviceRadixSort::SortKeys(cub_temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_storage_bytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_to_sort,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indice_desc.size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(IndexT)<sp/>*<sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub_temp_storage<sp/>=<sp/>allocator.allocate(temp_storage_bytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub::DeviceRadixSort::SortKeys(cub_temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_storage_bytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_to_sort,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indice_desc.size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(IndexT)<sp/>*<sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unique_indices_handle-&gt;device_malloc(indice_desc.size,<sp/>indice_desc.dtype);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unique_count_handle-&gt;device_malloc(indice_desc.size,<sp/>WHOLEMEMORY_DT_INT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT*<sp/>unique_indices<sp/>=<sp/>static_cast&lt;IndexT*&gt;(unique_indices_handle-&gt;pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_counts<sp/><sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;int*&gt;(unique_count_handle-&gt;pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>number_runs_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>number_runs_handle.device_malloc(1,<sp/>WHOLEMEMORY_DT_INT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>number_runs<sp/><sp/><sp/>=<sp/>static_cast&lt;int*&gt;(number_runs_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub_temp_storage<sp/><sp/><sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_storage_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub::DeviceRunLengthEncode::Encode(cub_temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_storage_bytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_counts,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_runs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indice_desc.size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub_temp_storage<sp/>=<sp/>allocator.allocate(temp_storage_bytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub::DeviceRunLengthEncode::Encode(cub_temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_storage_bytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_counts,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_runs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indice_desc.size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_CHECK_NO_THROW(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cudaMemcpyAsync(num_runs,<sp/>number_runs,<sp/>sizeof(int),<sp/>cudaMemcpyDeviceToHost,<sp/>stream));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_CHECK_NO_THROW(cudaStreamSynchronize(stream));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">REGISTER_DISPATCH_ONE_TYPE(SortUniqueLocalIndicesTempFunc,<sp/>SortUniqueLocalIndicesTempFunc,<sp/>SINT3264)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">__global__<sp/>void<sp/>ComputeCacheSetLocalID(const<sp/>IndexT*<sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>indices_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>rank_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>const<sp/>thread_idx<sp/>=<sp/>threadIdx.x<sp/>+<sp/>blockIdx.x<sp/>*<sp/>blockDim.x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(thread_idx<sp/>&gt;=<sp/>indices_num_run)<sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>const<sp/>cache_set_local_id<sp/>=<sp/>(indices[thread_idx]<sp/>-<sp/>rank_start_gid)<sp/>/<sp/>cache_set_coverage;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_set_lid[thread_idx]<sp/><sp/><sp/><sp/>=<sp/>cache_set_local_id;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>BucketByCacheSetTempFunc(const<sp/>void*<sp/>unique_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>indices_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_memory_handle*<sp/>unique_cache_set_lid_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_memory_handle*<sp/>unique_cache_set_start_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_memory_handle*<sp/>unique_cache_set_count_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>cache_set_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>rank_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wm_thrust_allocator*<sp/>p_thrust_allocator,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_env_func_t*<sp/>p_env_fns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(indices_num_run<sp/>==<sp/>0)<sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wm_thrust_allocator&amp;<sp/>allocator<sp/>=<sp/>*p_thrust_allocator;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>cache_set_lid_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_set_lid_handle.device_malloc(indices_num_run,<sp/>WHOLEMEMORY_DT_INT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>cache_set_lid<sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;int*&gt;(cache_set_lid_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>const<sp/>block_count<sp/>=<sp/>wholememory::div_rounding_up_unsafe(indices_num_run,<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ComputeCacheSetLocalID&lt;&lt;&lt;block_count,<sp/>32,<sp/>0,<sp/>stream&gt;&gt;&gt;(static_cast&lt;const<sp/>IndexT*&gt;(unique_indices),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>cub_temp_storage<sp/><sp/><sp/><sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>temp_storage_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>cache_set_num_run_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unique_cache_set_lid_handle-&gt;device_malloc(indices_num_run,<sp/>WHOLEMEMORY_DT_INT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unique_cache_set_count_handle-&gt;device_malloc(indices_num_run,<sp/>WHOLEMEMORY_DT_INT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unique_cache_set_start_handle-&gt;device_malloc(indices_num_run,<sp/>WHOLEMEMORY_DT_INT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_set_num_run_handle.device_malloc(1,<sp/>WHOLEMEMORY_DT_INT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_cache_set_lid<sp/><sp/><sp/>=<sp/>static_cast&lt;int*&gt;(unique_cache_set_lid_handle-&gt;pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_cache_set_start<sp/>=<sp/>static_cast&lt;int*&gt;(unique_cache_set_start_handle-&gt;pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_cache_set_count<sp/>=<sp/>static_cast&lt;int*&gt;(unique_cache_set_count_handle-&gt;pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>cache_set_num_run_d<sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;int*&gt;(cache_set_num_run_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub::DeviceRunLengthEncode::Encode(cub_temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_storage_bytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_num_run_d,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub_temp_storage<sp/>=<sp/>allocator.allocate(temp_storage_bytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub::DeviceRunLengthEncode::Encode(cub_temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_storage_bytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_num_run_d,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*cache_set_num_run<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_CHECK_NO_THROW(cudaMemcpyAsync(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_set_num_run,<sp/>cache_set_num_run_d,<sp/>sizeof(int),<sp/>cudaMemcpyDeviceToHost,<sp/>stream));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_CHECK_NO_THROW(cudaStreamSynchronize(stream));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(*cache_set_num_run<sp/>==<sp/>0)<sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub_temp_storage<sp/><sp/><sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_storage_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub::DeviceScan::ExclusiveSum(cub_temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_storage_bytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cache_set_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub_temp_storage<sp/>=<sp/>allocator.allocate(temp_storage_bytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cub::DeviceScan::ExclusiveSum(cub_temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_storage_bytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cache_set_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">REGISTER_DISPATCH_ONE_TYPE(BucketByCacheSetTempFunc,<sp/>BucketByCacheSetTempFunc,<sp/>SINT3264)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">__global__<sp/>void<sp/>UpdateCacheDirectKernel(const<sp/>int*<sp/>unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_cache_set_update_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_cache_set_update_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>IndexT*<sp/>unique_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_indices_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>local_cache_line_tag,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>local_cache_line_lfu_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t*<sp/>local_access_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int4*<sp/>local_cached_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int4*<sp/>local_memory_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>embedding_dim_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>rank_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static_assert(wholememory::embedding_cache_base::kCacheSetSize<sp/>==<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int64_t<sp/>const<sp/>cache_set_lid<sp/>=<sp/>unique_cache_set_lid[blockIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_cache_line_tag<sp/>+=<sp/>cache_set_lid<sp/>*<sp/>wholememory::embedding_cache_base::kCacheSetSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_cache_line_lfu_count<sp/>+=<sp/>cache_set_lid<sp/>*<sp/>wholememory::embedding_cache_base::kCacheSetSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_access_count<sp/>+=<sp/>cache_set_lid<sp/>*<sp/>cache_set_coverage;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_cached_data<sp/>+=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_set_lid<sp/>*<sp/>wholememory::embedding_cache_base::kCacheSetSize<sp/>*<sp/>embedding_dim_in_int4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_memory_data<sp/>+=<sp/>cache_set_lid<sp/>*<sp/>cache_set_coverage<sp/>*<sp/>embedding_dim_in_int4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CacheLineInfo<sp/>cache_line_info;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_line_info.LoadInfo(local_cache_line_tag,<sp/>local_cache_line_lfu_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_update_start_idx<sp/>=<sp/>unique_cache_set_update_start[blockIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_update_count<sp/><sp/><sp/><sp/><sp/>=<sp/>unique_cache_set_update_count[blockIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>Updater<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_ops::CacheSetUpdater&lt;IndexT&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Updater<sp/>updater;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__shared__<sp/>typename<sp/>Updater::TempStorage<sp/>temp_storage;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__shared__<sp/>IndexT<sp/>s_load_to_cache_ids[CacheSetUpdater&lt;IndexT&gt;::kCacheSetSize];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__shared__<sp/>IndexT<sp/>s_write_back_to_memory_ids[CacheSetUpdater&lt;IndexT&gt;::kCacheSetSize];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>s_load_to_cache_ids[threadIdx.x]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>s_write_back_to_memory_ids[threadIdx.x]<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>old_cached_lid<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cache_line_info.LocalID();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>updater.template<sp/>UpdateCache&lt;true,<sp/>true&gt;(temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_line_info,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_access_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indices<sp/>+<sp/>cache_set_update_start_idx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indices_count<sp/>+<sp/>cache_set_update_start_idx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;s_load_to_cache_ids[0],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;s_write_back_to_memory_ids[0],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_start_gid<sp/>+<sp/>cache_set_coverage<sp/>*<sp/>cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_update_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT<sp/>thread_node_id<sp/><sp/><sp/><sp/><sp/>=<sp/>s_write_back_to_memory_ids[threadIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>int<sp/>valid_mask<sp/><sp/><sp/>=<sp/>__ballot_sync(0xFFFFFFFF,<sp/>thread_node_id<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>need_write_back_count<sp/>=<sp/>__popc(valid_mask);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(valid_mask<sp/>==<sp/>(1ULL<sp/>&lt;&lt;<sp/>need_write_back_count)<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>need_write_back_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IndexT<sp/>write_back_gid<sp/>=<sp/>s_write_back_to_memory_ids[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>local_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>write_back_gid<sp/>-<sp/>rank_start_gid<sp/>-<sp/>cache_set_coverage<sp/>*<sp/>cache_set_lid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>__ballot_sync(0xFFFFFFFF,<sp/>static_cast&lt;int&gt;(old_cached_lid<sp/>==<sp/>local_id));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>cache_line_idx<sp/><sp/><sp/><sp/>=<sp/>__ffs(mask)<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(cache_line_idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>cache_line_idx<sp/>&lt;=<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(local_id<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>local_id<sp/>&lt;<sp/>cache_set_coverage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>idx<sp/>=<sp/>threadIdx.x;<sp/>idx<sp/>&lt;<sp/>embedding_dim_in_int4;<sp/>idx<sp/>+=<sp/>32)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_memory_data[local_id<sp/>*<sp/>embedding_dim_in_int4<sp/>+<sp/>idx]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_cached_data[cache_line_idx<sp/>*<sp/>embedding_dim_in_int4<sp/>+<sp/>idx];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>thread_node_id<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s_load_to_cache_ids[threadIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>valid_mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>__ballot_sync(0xFFFFFFFF,<sp/>thread_node_id<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>need_load_count<sp/>=<sp/>__popc(valid_mask);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(valid_mask<sp/>==<sp/>(1ULL<sp/>&lt;&lt;<sp/>need_load_count)<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>need_load_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IndexT<sp/>load_gid<sp/><sp/><sp/><sp/>=<sp/>s_load_to_cache_ids[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>local_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>load_gid<sp/>-<sp/>rank_start_gid<sp/>-<sp/>cache_set_coverage<sp/>*<sp/>cache_set_lid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>cache_line_idx<sp/>=<sp/>cache_line_info.KeyIndexSync(local_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(cache_line_idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>cache_line_idx<sp/>&lt;=<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(local_id<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>local_id<sp/>&lt;<sp/>cache_set_coverage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>idx<sp/>=<sp/>threadIdx.x;<sp/>idx<sp/>&lt;<sp/>embedding_dim_in_int4;<sp/>idx<sp/>+=<sp/>32)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_cached_data[cache_line_idx<sp/>*<sp/>embedding_dim_in_int4<sp/>+<sp/>idx]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_memory_data[local_id<sp/>*<sp/>embedding_dim_in_int4<sp/>+<sp/>idx];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_line_info.StoreInfo(local_cache_line_tag,<sp/>local_cache_line_lfu_count);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>UpdateCacheDirectTempFunc(const<sp/>int*<sp/>unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_cache_set_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_cache_set_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>void*<sp/>unique_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_indices_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>local_cache_line_tag,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>local_cache_line_lfu_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t*<sp/>local_access_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int4*<sp/>local_cache_line_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int4*<sp/>local_memory_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>embedding_dim_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>rank_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cache_set_num_run<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateCacheDirectKernel&lt;IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&lt;cache_set_num_run,<sp/>32,<sp/>0,<sp/>stream&gt;&gt;&gt;(unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>IndexT*&gt;(unique_indices),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indices_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_cache_line_tag,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_cache_line_lfu_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_access_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_cache_line_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_memory_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>embedding_dim_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">REGISTER_DISPATCH_ONE_TYPE(UpdateCacheDirectTempFunc,<sp/>UpdateCacheDirectTempFunc,<sp/>SINT3264)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">wholememory_error_code_t<sp/>update_cache_direct_same_comm(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_array_description_t<sp/>indice_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_t<sp/>wm_raw_memory_embedding,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>wholememory::embedding_cache_local_data*<sp/>cache_local_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_env_func_t*<sp/>p_env_fns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wm_thrust_allocator<sp/>thrust_allocator(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>world_size<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>world_rank<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_handle_t<sp/>wholememory_handle<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor_get_memory_handle(wm_raw_memory_embedding);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_comm_t<sp/>wm_comm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_get_communicator(&amp;wm_comm,<sp/>wholememory_handle));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_communicator_get_size(&amp;world_size,<sp/>wm_comm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_communicator_get_rank(&amp;world_rank,<sp/>wm_comm));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto*<sp/>raw_embedding_desc<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor_get_tensor_description(wholememory_tensor_get_root(wm_raw_memory_embedding));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>embedding_entry_count_per_rank<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_determine_entry_partition_plan(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;embedding_entry_count_per_rank,<sp/>raw_embedding_desc-&gt;sizes[0],<sp/>world_size));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>indices_num_run<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>unique_indice_handle(p_env_fns),<sp/>unique_count_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DISPATCH_ONE_TYPE(indice_desc.dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SortUniqueLocalIndicesTempFunc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indice_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;indices_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_indice_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_count_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;thrust_allocator,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_env_fns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>catch<sp/>(...)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;SortUniqueLocalIndicesTempFunc<sp/>failed.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_LOGIC_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>unique_cache_set_lid_handle(p_env_fns),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unique_cache_set_start_handle(p_env_fns),<sp/>unique_cache_set_count_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_num_run;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DISPATCH_ONE_TYPE(indice_desc.dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BucketByCacheSetTempFunc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indice_handle.pointer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_cache_set_lid_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_cache_set_start_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_cache_set_count_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;cache_set_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>world_rank<sp/>*<sp/>embedding_entry_count_per_rank,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;thrust_allocator,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_env_fns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_cache_set_lid<sp/><sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;int*&gt;(unique_cache_set_lid_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_cache_set_start<sp/><sp/><sp/>=<sp/>static_cast&lt;int*&gt;(unique_cache_set_start_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_cache_set_count<sp/><sp/><sp/>=<sp/>static_cast&lt;int*&gt;(unique_cache_set_count_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>embedding_local_pointer<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_get_local_memory(&amp;embedding_local_pointer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullptr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullptr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor_get_memory_handle(wm_raw_memory_embedding)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>const<sp/>embedding_dim<sp/>=<sp/>raw_embedding_desc-&gt;strides[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>const<sp/>dtype_size<sp/>=<sp/>wholememory_dtype_get_element_size(raw_embedding_desc-&gt;dtype);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(embedding_dim<sp/>*<sp/>dtype_size<sp/>%<sp/>16<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>const<sp/>embedding_dim_in_int4<sp/>=<sp/>embedding_dim<sp/>*<sp/>dtype_size<sp/>/<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DISPATCH_ONE_TYPE(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indice_desc.dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateCacheDirectTempFunc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unique_cache_set_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unique_cache_set_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unique_indice_handle.pointer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>int*&gt;(unique_count_handle.pointer()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;uint16_t*&gt;(wholememory_tensor_get_data_pointer(cache_local_data-&gt;cache_line_tag_)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;uint16_t*&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor_get_data_pointer(cache_local_data-&gt;cache_line_lfu_count_)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;int64_t*&gt;(wholememory_tensor_get_data_pointer(cache_local_data-&gt;access_count_)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;int4*&gt;(wholememory_tensor_get_data_pointer(cache_local_data-&gt;cache_line_data_)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;int4*&gt;(embedding_local_pointer),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>embedding_dim_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_set_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>world_rank<sp/>*<sp/>embedding_entry_count_per_rank,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>WHOLEMEMORY_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">__global__<sp/>void<sp/>DetermineLoadCacheKernel(const<sp/>int*<sp/>unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_cache_set_update_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_cache_set_update_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>IndexT*<sp/>unique_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_indices_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>local_cache_line_tag,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>local_cache_line_lfu_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t*<sp/>local_access_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexT*<sp/>output_local_write_cache_index,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexT*<sp/>output_global_load_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>rank_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static_assert(wholememory::embedding_cache_base::kCacheSetSize<sp/>==<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int64_t<sp/>const<sp/>cache_set_lid<sp/>=<sp/>unique_cache_set_lid[blockIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_cache_line_tag<sp/>+=<sp/>cache_set_lid<sp/>*<sp/>wholememory::embedding_cache_base::kCacheSetSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_cache_line_lfu_count<sp/>+=<sp/>cache_set_lid<sp/>*<sp/>wholememory::embedding_cache_base::kCacheSetSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_access_count<sp/>+=<sp/>cache_set_lid<sp/>*<sp/>cache_set_coverage;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CacheLineInfo<sp/>cache_line_info;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_line_info.LoadInfo(local_cache_line_tag,<sp/>local_cache_line_lfu_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_update_start_idx<sp/>=<sp/>unique_cache_set_update_start[blockIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_update_count<sp/><sp/><sp/><sp/><sp/>=<sp/>unique_cache_set_update_count[blockIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_local_write_cache_index<sp/>+=<sp/>cache_set_update_start_idx;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_global_load_gid<sp/>+=<sp/>cache_set_update_start_idx;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>Updater<sp/>=<sp/>wholememory_ops::CacheSetUpdater&lt;IndexT&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Updater<sp/>updater;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__shared__<sp/>typename<sp/>Updater::TempStorage<sp/>temp_storage;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__shared__<sp/>IndexT<sp/>s_load_to_cache_ids[CacheSetUpdater&lt;IndexT&gt;::kCacheSetSize];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>s_load_to_cache_ids[threadIdx.x]<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>old_cached_lid<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cache_line_info.LocalID();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>updater.template<sp/>UpdateCache&lt;true,<sp/>false&gt;(temp_storage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_line_info,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_access_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indices<sp/>+<sp/>cache_set_update_start_idx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indices_count<sp/>+<sp/>cache_set_update_start_idx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;s_load_to_cache_ids[0],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullptr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_start_gid<sp/>+<sp/>cache_set_coverage<sp/>*<sp/>cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_update_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndexT<sp/>thread_node_id<sp/><sp/><sp/>=<sp/>s_load_to_cache_ids[threadIdx.x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>int<sp/>valid_mask<sp/>=<sp/>__ballot_sync(0xFFFFFFFF,<sp/>thread_node_id<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>need_load_count<sp/><sp/><sp/><sp/><sp/>=<sp/>__popc(valid_mask);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(valid_mask<sp/>==<sp/>(1ULL<sp/>&lt;&lt;<sp/>need_load_count)<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>need_load_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IndexT<sp/>load_gid<sp/><sp/><sp/><sp/>=<sp/>s_load_to_cache_ids[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>local_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>load_gid<sp/>-<sp/>rank_start_gid<sp/>-<sp/>cache_set_coverage<sp/>*<sp/>cache_set_lid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>cache_line_idx<sp/>=<sp/>cache_line_info.KeyIndexSync(local_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(cache_line_idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>cache_line_idx<sp/>&lt;=<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_global_load_gid[i]<sp/>=<sp/>load_gid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_local_write_cache_index[i]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_line_idx<sp/>+<sp/>cache_set_lid<sp/>*<sp/>wholememory::embedding_cache_base::kCacheSetSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>need_load_count<sp/>+<sp/>threadIdx.x;<sp/>i<sp/>&lt;<sp/>cache_set_update_count;<sp/>i<sp/>+=<sp/>32)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_global_load_gid[i]<sp/>=<sp/>output_local_write_cache_index[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_line_info.StoreInfo(local_cache_line_tag,<sp/>local_cache_line_lfu_count);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>DetermineLoadCacheTempFunc(const<sp/>int*<sp/>unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_cache_set_update_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_cache_set_update_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>void*<sp/>unique_indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int*<sp/>unique_indices_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>local_cache_line_tag,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>local_cache_line_lfu_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t*<sp/>local_access_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>output_local_write_cache_index,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>output_global_load_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>rank_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cache_set_num_run<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DetermineLoadCacheKernel&lt;IndexT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&lt;cache_set_num_run,<sp/>32,<sp/>0,<sp/>stream&gt;&gt;&gt;(unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_update_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_update_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>IndexT*&gt;(unique_indices),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indices_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_cache_line_tag,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_cache_line_lfu_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_access_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;IndexT*&gt;(output_local_write_cache_index),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;IndexT*&gt;(output_global_load_gid),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_start_gid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">REGISTER_DISPATCH_ONE_TYPE(DetermineLoadCacheTempFunc,<sp/>DetermineLoadCacheTempFunc,<sp/>SINT3264)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">wholememory_error_code_t<sp/>update_cache_different_comm(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_array_description_t<sp/>indice_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_t<sp/>wm_raw_memory_embedding,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_comm_t<sp/>cache_comm,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>embedding_entry_count_per_cache_rank,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>wholememory::embedding_cache_local_data*<sp/>cache_local_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_env_func_t*<sp/>p_env_fns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wm_thrust_allocator<sp/>thrust_allocator(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_world_size<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_world_rank<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_communicator_get_size(&amp;cache_world_size,<sp/>cache_comm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_communicator_get_rank(&amp;cache_world_rank,<sp/>cache_comm));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>indices_num_run<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>unique_indice_handle(p_env_fns),<sp/>unique_count_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DISPATCH_ONE_TYPE(indice_desc.dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SortUniqueLocalIndicesTempFunc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indice_desc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;indices_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_indice_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_count_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;thrust_allocator,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_env_fns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>catch<sp/>(...)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;SortUniqueLocalIndicesTempFunc<sp/>failed.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_LOGIC_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>unique_cache_set_lid_handle(p_env_fns),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unique_cache_set_start_handle(p_env_fns),<sp/>unique_cache_set_count_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_num_run;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DISPATCH_ONE_TYPE(indice_desc.dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BucketByCacheSetTempFunc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_indice_handle.pointer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_cache_set_lid_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_cache_set_start_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;unique_cache_set_count_handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;cache_set_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_world_rank<sp/>*<sp/>embedding_entry_count_per_cache_rank,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;thrust_allocator,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_env_fns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_cache_set_lid<sp/><sp/><sp/>=<sp/>static_cast&lt;int*&gt;(unique_cache_set_lid_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_cache_set_start<sp/>=<sp/>static_cast&lt;int*&gt;(unique_cache_set_start_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>unique_cache_set_count<sp/>=<sp/>static_cast&lt;int*&gt;(unique_cache_set_count_handle.pointer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>global_load_gid_handle(p_env_fns),<sp/>local_write_cache_index_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>global_load_gid_ptr<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>global_load_gid_handle.device_malloc(indices_num_run,<sp/>indice_desc.dtype);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>local_write_cache_index_ptr<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>local_write_cache_index_handle.device_malloc(indices_num_run,<sp/>indice_desc.dtype);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DISPATCH_ONE_TYPE(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indice_desc.dtype,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DetermineLoadCacheTempFunc,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_lid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unique_cache_set_count,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unique_indice_handle.pointer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>int*&gt;(unique_count_handle.pointer()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;uint16_t*&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor_get_data_pointer(cache_local_data-&gt;cache_line_tag_)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;uint16_t*&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor_get_data_pointer(cache_local_data-&gt;cache_line_lfu_count_)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int64_t*&gt;(wholememory_tensor_get_data_pointer(cache_local_data-&gt;access_count_)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_write_cache_index_ptr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>global_load_gid_ptr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_world_rank<sp/>*<sp/>embedding_entry_count_per_cache_rank,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_num_run,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>catch<sp/>(...)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHOLEMEMORY_ERROR(&quot;DetermineLoadCacheTempFunc<sp/>failed.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>WHOLEMEMORY_LOGIC_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_memory_handle<sp/>temp_cache_buffer_handle(p_env_fns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_description_t<sp/>temp_cache_desc<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*wholememory_tensor_get_tensor_description(wm_raw_memory_embedding);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_cache_desc.storage_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>temp_cache_desc.sizes[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>indices_num_run;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void*<sp/>temp_cache_ptr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp_cache_buffer_handle.device_malloc(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_get_memory_element_count_from_tensor(&amp;temp_cache_desc),<sp/>temp_cache_desc.dtype);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_t<sp/>temp_cache_tensor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_make_tensor_from_pointer(&amp;temp_cache_tensor,<sp/>temp_cache_ptr,<sp/>&amp;temp_cache_desc));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_description_t<sp/>cache_indice_desc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_copy_array_desc_to_tensor(&amp;cache_indice_desc,<sp/>&amp;indice_desc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_indice_desc.sizes[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>indices_num_run;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_indice_desc.storage_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_t<sp/>gather_indice_tensor,<sp/>scatter_indice_tensor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_make_tensor_from_pointer(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;gather_indice_tensor,<sp/>global_load_gid_ptr,<sp/>&amp;cache_indice_desc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_make_tensor_from_pointer(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;scatter_indice_tensor,<sp/>local_write_cache_index_ptr,<sp/>&amp;cache_indice_desc));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_gather(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wm_raw_memory_embedding,<sp/>gather_indice_tensor,<sp/>temp_cache_tensor,<sp/>p_env_fns,<sp/>stream));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_scatter(temp_cache_tensor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scatter_indice_tensor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_local_data-&gt;cache_line_data_,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_env_fns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_destroy_tensor(temp_cache_tensor));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_destroy_tensor(gather_indice_tensor));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_destroy_tensor(scatter_indice_tensor));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>WHOLEMEMORY_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">__global__<sp/>void<sp/>WriteBackCacheDirectKernel(uint16_t*<sp/>local_cache_line_tag,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int4*<sp/>local_cached_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int4*<sp/>local_memory_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>embedding_dim_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>drop_all)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static_assert(wholememory::embedding_cache_base::kCacheSetSize<sp/>==<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int64_t<sp/>const<sp/>cache_set_lid<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_cache_line_tag<sp/>+=<sp/>cache_set_lid<sp/>*<sp/>wholememory::embedding_cache_base::kCacheSetSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_cached_data<sp/>+=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_set_lid<sp/>*<sp/>wholememory::embedding_cache_base::kCacheSetSize<sp/>*<sp/>embedding_dim_in_int4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local_memory_data<sp/>+=<sp/>cache_set_lid<sp/>*<sp/>cache_set_coverage<sp/>*<sp/>embedding_dim_in_int4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CacheLineInfo<sp/>cache_line_info;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_line_info.LoadTag(local_cache_line_tag);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>is_modified<sp/>=<sp/>cache_line_info.IsModified()<sp/>&amp;&amp;<sp/>cache_line_info.IsValid();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto<sp/>modify_mask<sp/>=<sp/>__ballot_sync(0xFFFFFFFF,<sp/>static_cast&lt;int&gt;(is_modified));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(modify_mask<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>lane_idx<sp/>=<sp/>__ffs(modify_mask)<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>local_id<sp/>=<sp/>__shfl_sync(0xFFFFFFFF,<sp/>cache_line_info.LocalID(),<sp/>lane_idx,<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>idx<sp/>=<sp/>threadIdx.x;<sp/>idx<sp/>&lt;<sp/>embedding_dim_in_int4;<sp/>idx<sp/>+=<sp/>32)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_memory_data[local_id<sp/>*<sp/>embedding_dim_in_int4<sp/>+<sp/>idx]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_cached_data[lane_idx<sp/>*<sp/>embedding_dim_in_int4<sp/>+<sp/>idx];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>modify_mask<sp/>^=<sp/>(1<sp/>&lt;&lt;<sp/>lane_idx);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(drop_all)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_line_info.ClearCacheLine();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache_line_info.ClearModify();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cache_line_info.StoreTag(local_cache_line_tag);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">wholememory_error_code_t<sp/>writeback_cache_direct_same_comm(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_t<sp/>wm_raw_memory_embedding,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>wholememory::embedding_cache_local_data*<sp/>cache_local_data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>drop_all,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>world_size<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>world_rank<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_handle_t<sp/>wholememory_handle<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor_get_memory_handle(wm_raw_memory_embedding);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_comm_t<sp/>wm_comm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_get_communicator(&amp;wm_comm,<sp/>wholememory_handle));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_communicator_get_size(&amp;world_size,<sp/>wm_comm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_communicator_get_rank(&amp;world_rank,<sp/>wm_comm));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto*<sp/>raw_embedding_desc<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor_get_tensor_description(wholememory_tensor_get_root(wm_raw_memory_embedding));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>embedding_entry_count_per_rank<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_determine_entry_partition_plan(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;embedding_entry_count_per_rank,<sp/>raw_embedding_desc-&gt;sizes[0],<sp/>world_size));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(embedding_entry_count_per_rank<sp/>%<sp/>cache_set_coverage<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wholememory_tensor_t<sp/>raw_local_tensor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor_map_local_tensor(wm_raw_memory_embedding,<sp/>&amp;raw_local_tensor));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>cache_set_count<sp/>=<sp/>wholememory::div_rounding_up_unsafe(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor_get_tensor_description(raw_local_tensor)-&gt;sizes[0],<sp/>cache_set_coverage);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>const<sp/>embedding_dim<sp/>=<sp/>raw_embedding_desc-&gt;strides[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>const<sp/>dtype_size<sp/>=<sp/>wholememory_dtype_get_element_size(raw_embedding_desc-&gt;dtype);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_CHECK_NOTHROW(embedding_dim<sp/>*<sp/>dtype_size<sp/>%<sp/>16<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>const<sp/>embedding_dim_in_int4<sp/>=<sp/>embedding_dim<sp/>*<sp/>dtype_size<sp/>/<sp/>16;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cache_set_count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBackCacheDirectKernel&lt;&lt;&lt;cache_set_count,<sp/>32,<sp/>0,<sp/>stream&gt;&gt;&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;uint16_t*&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor_get_data_pointer(cache_local_data-&gt;cache_line_tag_)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int4*&gt;(wholememory_tensor_get_data_pointer(cache_local_data-&gt;cache_line_data_)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int4*&gt;(wholememory_tensor_get_data_pointer(raw_local_tensor)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>embedding_dim_in_int4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_set_coverage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>drop_all);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WM_CUDA_CHECK_NO_THROW(cudaGetLastError());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>WM_CUDA_DEBUG_SYNC_STREAM(stream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>WHOLEMEMORY_RETURN_ON_FAIL(wholememory_destroy_tensor(raw_local_tensor));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>WHOLEMEMORY_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>wholememory_ops</highlight></codeline>
    </programlisting>
    <location file="src/wholememory_ops/functions/embedding_cache_func.cu"/>
  </compounddef>
</doxygen>
