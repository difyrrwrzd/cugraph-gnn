<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="system__info_8cpp" kind="file" language="C++">
    <compoundname>system_info.cpp</compoundname>
    <includes refid="system__info_8hpp" local="yes">system_info.hpp</includes>
    <includes local="no">string</includes>
    <includes refid="cuda__macros_8hpp" local="yes">cuda_macros.hpp</includes>
    <incdepgraph>
      <node id="11">
        <label>iomanip</label>
      </node>
      <node id="15">
        <label>raft/core/error.hpp</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="16">
        <label>error.hpp</label>
        <link refid="error_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cstdio</label>
      </node>
      <node id="2">
        <label>system_info.hpp</label>
        <link refid="system__info_8hpp"/>
      </node>
      <node id="9">
        <label>cstdlib</label>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>cuda_macros.hpp</label>
        <link refid="cuda__macros_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cuda.h</label>
      </node>
      <node id="14">
        <label>mutex</label>
      </node>
      <node id="6">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="7">
        <label>chrono</label>
      </node>
      <node id="1">
        <label>src/wholememory/system_info.cpp</label>
        <link refid="system__info_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>execinfo.h</label>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="system__info_8cpp_1aa415ac5d8f2b57a6a409294242a40b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DevAttrPagebleMemoryAccess</definition>
        <argsstring>()</argsstring>
        <name>DevAttrPagebleMemoryAccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/system_info.cpp" line="22" column="6" bodyfile="src/wholememory/system_info.cpp" bodystart="22" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="system__info_8cpp_1a18bdb4a151278353ee50cfa496dba0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DeviceCanAccessPeer</definition>
        <argsstring>(int peer_device)</argsstring>
        <name>DeviceCanAccessPeer</name>
        <param>
          <type>int</type>
          <declname>peer_device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/system_info.cpp" line="32" column="6" bodyfile="src/wholememory/system_info.cpp" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="system__info_8cpp_1a9fd5ec853ae2127290da62c79103465b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DevicesCanAccessP2P</definition>
        <argsstring>(const int *dev_ids, int count)</argsstring>
        <name>DevicesCanAccessP2P</name>
        <param>
          <type>const int *</type>
          <declname>dev_ids</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/system_info.cpp" line="41" column="6" bodyfile="src/wholememory/system_info.cpp" bodystart="41" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="system__info_8cpp_1aa1d10b39ddd98784da026207f441401c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetCudaCompCap</definition>
        <argsstring>()</argsstring>
        <name>GetCudaCompCap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/system_info.cpp" line="67" column="5" bodyfile="src/wholememory/system_info.cpp" bodystart="67" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="system__info_8cpp_1a8d382576959665e2ce0bf3f9748eff85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* GetCPUArch</definition>
        <argsstring>()</argsstring>
        <name>GetCPUArch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/system_info.cpp" line="79" column="12" bodyfile="src/wholememory/system_info.cpp" bodystart="79" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="system__info_8cpp_1a1498d86ae084dab2e930543fa6cf6e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SupportMNNVL</definition>
        <argsstring>()</argsstring>
        <name>SupportMNNVL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/system_info.cpp" line="91" column="6" bodyfile="src/wholememory/system_info.cpp" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="system__info_8cpp_1a08c33ef7194ee8a76c4edce2eab2fc7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SupportEGM</definition>
        <argsstring>()</argsstring>
        <name>SupportEGM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/system_info.cpp" line="97" column="6" bodyfile="src/wholememory/system_info.cpp" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="system__info_8cpp_1a7758895085a4b665ac9908c6324e395f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SupportMNNVLForEGM</definition>
        <argsstring>()</argsstring>
        <name>SupportMNNVLForEGM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/system_info.cpp" line="103" column="6" bodyfile="src/wholememory/system_info.cpp" bodystart="103" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="system__info_8hpp" kindref="compound">system_info.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cuda__macros_8hpp" kindref="compound">cuda_macros.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="system__info_8cpp_1aa415ac5d8f2b57a6a409294242a40b72" kindref="member">DevAttrPagebleMemoryAccess</ref>()</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_dev_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(cudaGetDevice(&amp;current_dev_id));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>cudaDeviceAttr<sp/>attr<sp/>=<sp/>cudaDevAttrPageableMemoryAccess;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(cudaDeviceGetAttribute(&amp;value,<sp/>attr,<sp/>current_dev_id));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="system__info_8cpp_1a18bdb4a151278353ee50cfa496dba0b6" kindref="member">DeviceCanAccessPeer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peer_device)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_dev_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(cudaGetDevice(&amp;current_dev_id));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>can_access<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(cudaDeviceCanAccessPeer(&amp;can_access,<sp/>current_dev_id,<sp/>peer_device));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>can_access<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="system__info_8cpp_1a9fd5ec853ae2127290da62c79103465b" kindref="member">DevicesCanAccessP2P</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dev_ids,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_dev_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(cudaGetDevice(&amp;current_dev_id));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_can_access<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count<sp/>&amp;&amp;<sp/>all_can_access;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_dev<sp/>=<sp/>dev_ids[i];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(cudaSetDevice(src_dev));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>count;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>i)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peer_dev<sp/><sp/><sp/>=<sp/>dev_ids[j];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>can_access<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(cudaDeviceCanAccessPeer(&amp;can_access,<sp/>src_dev,<sp/>peer_dev));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_access<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_can_access<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(cudaSetDevice(current_dev_id));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_can_access;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="system__info_8cpp_1aa1d10b39ddd98784da026207f441401c" kindref="member">GetCudaCompCap</ref>()</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cuda_dev;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(cudaGetDevice(&amp;cuda_dev));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cc_major,<sp/>cc_minor;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceGetAttribute(&amp;cc_major,<sp/>cudaDevAttrComputeCapabilityMajor,<sp/>cuda_dev));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="cuda__macros_8hpp_1a1d4e4e4337fdfdb036f1817f266938c4" kindref="member">WM_CUDA_CHECK_NO_THROW</ref>(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceGetAttribute(&amp;cc_minor,<sp/>cudaDevAttrComputeCapabilityMinor,<sp/>cuda_dev));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cc_major<sp/>*<sp/>10<sp/>+<sp/>cc_minor;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="system__info_8cpp_1a8d382576959665e2ce0bf3f9748eff85" kindref="member">GetCPUArch</ref>()</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__PPC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>arch_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ppc64&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__aarch64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>arch_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;arm64&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__x86_64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>arch_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;x86_64&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arch_str;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="system__info_8cpp_1a1498d86ae084dab2e930543fa6cf6e36" kindref="member">SupportMNNVL</ref>()</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>replace<sp/>with<sp/>NVML,<sp/>nvmlDeviceGetGpuFabricInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="system__info_8cpp_1aa1d10b39ddd98784da026207f441401c" kindref="member">GetCudaCompCap</ref>()<sp/>&gt;=<sp/>90;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="system__info_8cpp_1a08c33ef7194ee8a76c4edce2eab2fc7a" kindref="member">SupportEGM</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arch_str<sp/>=<sp/><ref refid="system__info_8cpp_1a8d382576959665e2ce0bf3f9748eff85" kindref="member">GetCPUArch</ref>();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arch_str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;arm64&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="system__info_8cpp_1aa415ac5d8f2b57a6a409294242a40b72" kindref="member">DevAttrPagebleMemoryAccess</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="system__info_8cpp_1a7758895085a4b665ac9908c6324e395f" kindref="member">SupportMNNVLForEGM</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="system__info_8cpp_1a1498d86ae084dab2e930543fa6cf6e36" kindref="member">SupportMNNVL</ref>()<sp/>&amp;&amp;<sp/><ref refid="system__info_8cpp_1a08c33ef7194ee8a76c4edce2eab2fc7a" kindref="member">SupportEGM</ref>();<sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/wholememory/system_info.cpp"/>
  </compounddef>
</doxygen>
