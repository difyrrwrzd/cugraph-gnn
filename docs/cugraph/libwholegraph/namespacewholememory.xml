<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacewholememory" kind="namespace" language="C++">
    <compoundname>wholememory</compoundname>
    <innerclass refid="structwholememory_1_1cuda__error" prot="public">wholememory::cuda_error</innerclass>
    <innerclass refid="structwholememory_1_1cu__error" prot="public">wholememory::cu_error</innerclass>
    <innerclass refid="structwholememory_1_1logic__error" prot="public">wholememory::logic_error</innerclass>
    <innerclass refid="structwholememory_1_1host__info" prot="public">wholememory::host_info</innerclass>
    <innerclass refid="structwholememory_1_1rank__info" prot="public">wholememory::rank_info</innerclass>
    <innerclass refid="classwholememory_1_1noncached__embedding" prot="public">wholememory::noncached_embedding</innerclass>
    <innerclass refid="classwholememory_1_1device__cached__host__embedding" prot="public">wholememory::device_cached_host_embedding</innerclass>
    <innerclass refid="classwholememory_1_1local__cached__global__readonly__embedding" prot="public">wholememory::local_cached_global_readonly_embedding</innerclass>
    <innerclass refid="classwholememory_1_1embedding__base" prot="public">wholememory::embedding_base</innerclass>
    <innerclass refid="classwholememory_1_1embedding__cache__local__data" prot="public">wholememory::embedding_cache_local_data</innerclass>
    <innerclass refid="classwholememory_1_1embedding__cache__base" prot="public">wholememory::embedding_cache_base</innerclass>
    <innerclass refid="classwholememory_1_1device__cache__for__host" prot="public">wholememory::device_cache_for_host</innerclass>
    <innerclass refid="classwholememory_1_1local__cache__for__global" prot="public">wholememory::local_cache_for_global</innerclass>
    <innerclass refid="classwholememory_1_1SGDEmbeddingOptimizer" prot="public">wholememory::SGDEmbeddingOptimizer</innerclass>
    <innerclass refid="classwholememory_1_1LazyAdamEmbeddingOptimizer" prot="public">wholememory::LazyAdamEmbeddingOptimizer</innerclass>
    <innerclass refid="classwholememory_1_1AdaGradEmbeddingOptimizer" prot="public">wholememory::AdaGradEmbeddingOptimizer</innerclass>
    <innerclass refid="classwholememory_1_1RMSPropEmbeddingOptimizer" prot="public">wholememory::RMSPropEmbeddingOptimizer</innerclass>
    <innerclass refid="classwholememory_1_1optimizer__state__t" prot="public">wholememory::optimizer_state_t</innerclass>
    <innerclass refid="classwholememory_1_1embedding__optimizer__impl__base" prot="public">wholememory::embedding_optimizer_impl_base</innerclass>
    <innerclass refid="classwholememory_1_1ChunkedMemoryPool" prot="public">wholememory::ChunkedMemoryPool</innerclass>
    <innerclass refid="classwholememory_1_1DeviceChunkedMemoryPool" prot="public">wholememory::DeviceChunkedMemoryPool</innerclass>
    <innerclass refid="classwholememory_1_1PinnedChunkedMemoryPool" prot="public">wholememory::PinnedChunkedMemoryPool</innerclass>
    <innerclass refid="classwholememory_1_1HostChunkedMemoryPool" prot="public">wholememory::HostChunkedMemoryPool</innerclass>
    <innerclass refid="classwholememory_1_1CachedAllocator" prot="public">wholememory::CachedAllocator</innerclass>
    <innerclass refid="structwholememory_1_1default__memory__context__t" prot="public">wholememory::default_memory_context_t</innerclass>
    <innerclass refid="classwholememory_1_1wholememory__impl" prot="public">wholememory::wholememory_impl</innerclass>
    <innerclass refid="structwholememory_1_1wholememory__vma__data" prot="public">wholememory::wholememory_vma_data</innerclass>
    <innerclass refid="classwholememory_1_1distributed__wholememory__impl" prot="public">wholememory::distributed_wholememory_impl</innerclass>
    <innerclass refid="classwholememory_1_1global__mapped__host__wholememory__impl" prot="public">wholememory::global_mapped_host_wholememory_impl</innerclass>
    <innerclass refid="classwholememory_1_1continuous__device__wholememory__impl" prot="public">wholememory::continuous_device_wholememory_impl</innerclass>
    <innerclass refid="classwholememory_1_1chunked__device__wholememory__impl" prot="public">wholememory::chunked_device_wholememory_impl</innerclass>
    <innerclass refid="structwholememory_1_1wholememory__create__param" prot="public">wholememory::wholememory_create_param</innerclass>
    <innerclass refid="classwholememory_1_1nccl__comms" prot="public">wholememory::nccl_comms</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacewholememory_1ad6de2acff817f4a1645066e29e305c17" prot="public" static="no" strong="no">
        <type>int32_t</type>
        <name>wm_comm_op</name>
        <enumvalue id="namespacewholememory_1ad6de2acff817f4a1645066e29e305c17a36d4ee478218dafc0967bd85a001825f" prot="public">
          <name>WM_COMM_OP_STARTING</name>
          <initializer>= 0xEEC0EE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacewholememory_1ad6de2acff817f4a1645066e29e305c17a3eaa867aa45b64d00e52481f25b63100" prot="public">
          <name>WM_COMM_OP_EXCHANGE_ID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacewholememory_1ad6de2acff817f4a1645066e29e305c17a7de239af32391f9312cb9b50963891d8" prot="public">
          <name>WM_COMM_OP_WAIT_CREATE_TEMPDIR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacewholememory_1ad6de2acff817f4a1645066e29e305c17a3952b76a72c500e4c02f1800a92e25e0" prot="public">
          <name>WM_COMM_OP_DESTROY_ALL_HANDLES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacewholememory_1ad6de2acff817f4a1645066e29e305c17a285594ef08ad1e2790175293068ed40d" prot="public">
          <name>WM_COMM_OP_DESTROY_COMM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="386" column="1" bodyfile="src/wholememory/communicator.cpp" bodystart="386" bodyend="392"/>
      </memberdef>
      <memberdef kind="enum" id="namespacewholememory_1a369f71096da2650026bf51ca498bbb5a" prot="public" static="no" strong="no">
        <type>int32_t</type>
        <name>wm_memory_op</name>
        <enumvalue id="namespacewholememory_1a369f71096da2650026bf51ca498bbb5aad2d2c1af078a6c824c1cc3d41ae766f8" prot="public">
          <name>WM_MEM_OP_CREATE</name>
          <initializer>= 0xEEEEE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacewholememory_1a369f71096da2650026bf51ca498bbb5aa34de9cd557e3301ee92f8e2f43251272" prot="public">
          <name>WM_MEM_OP_EXCHANGE_ID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacewholememory_1a369f71096da2650026bf51ca498bbb5aadabd83e51160e661a69fb93635896995" prot="public">
          <name>WM_MEM_OP_DESTROY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="47" column="1" bodyfile="src/wholememory/memory_handle.cpp" bodystart="47" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacewholememory_1a45760c67e0bae10d2b9024d8bdca17f0" prot="public" static="no">
        <type>std::function&lt; <ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref>(const void *)&gt;</type>
        <definition>using wholememory::optimizer_parameter_setter_fn_t = typedef std::function&lt;wholememory_error_code_t(const void*)&gt;</definition>
        <argsstring></argsstring>
        <name>optimizer_parameter_setter_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/embedding_optimizer.hpp" line="43" column="1" bodyfile="src/wholememory/embedding_optimizer.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacewholememory_1a9bfc7b2b308c90e26436f3a38e895a20" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool wholememory::s_debug_sync_mode</definition>
        <argsstring></argsstring>
        <name>s_debug_sync_mode</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.cpp" line="25" column="13" bodyfile="src/cuda_macros.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1aea725090d22d80cc9eab6df7b2cc8bc3" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex wholememory::comm_mu</definition>
        <argsstring></argsstring>
        <name>comm_mu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="379" column="19" bodyfile="src/wholememory/communicator.cpp" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1a299919bbd1dedf37c9fb166576ef7a6d" prot="public" static="yes" mutable="no">
        <type>std::map&lt; int, <ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref> &gt;</type>
        <definition>std::map&lt;int, wholememory_comm_t&gt; wholememory::communicator_map</definition>
        <argsstring></argsstring>
        <name>communicator_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="380" column="17" bodyfile="src/wholememory/communicator.cpp" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1aad511b71076b9f04fb1f401110326f25" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int wholememory::HOST_NAME_MAX_LENGTH</definition>
        <argsstring></argsstring>
        <name>HOST_NAME_MAX_LENGTH</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="403" column="22" bodyfile="src/wholememory/communicator.cpp" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1a68037805753b8d1b4c1b9de1f2daae28" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int wholememory::BOOT_ID_MAX_LENGTH</definition>
        <argsstring></argsstring>
        <name>BOOT_ID_MAX_LENGTH</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="404" column="22" bodyfile="src/wholememory/communicator.cpp" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1a9357798c89fbaee360de89945aebcc44" prot="public" static="no" mutable="no">
        <type>struct wholememory::rank_info</type>
        <definition>struct wholememory::rank_info wholememory::__attribute__</definition>
        <argsstring></argsstring>
        <name>__attribute__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="425" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1a486259b6e63a5738cc753d0fc0d2f1dc" prot="public" static="yes" mutable="no">
        <type><ref refid="structwholememory__env__func__t" kindref="compound">wholememory_env_func_t</ref></type>
        <definition>wholememory_env_func_t wholememory::default_env_func</definition>
        <argsstring></argsstring>
        <name>default_env_func</name>
        <initializer>= {
  .temporary_fns =
    {
      .create_memory_context_fn  = <ref refid="namespacewholememory_1acf279522fb30c81b5b18dbfda4bb6600" kindref="member">default_create_memory_context_func</ref>,
      .destroy_memory_context_fn = <ref refid="namespacewholememory_1a2bdc4741fa36325af29dccb86f6e7996" kindref="member">default_destroy_memory_context_func</ref>,
      .malloc_fn                 = <ref refid="namespacewholememory_1a0710b520cc82c9d80eb546dddd020f7e" kindref="member">default_malloc_func</ref>,
      .free_fn                   = <ref refid="namespacewholememory_1a156dc488b5c63d15b346d91262f0a8bd" kindref="member">default_free_func</ref>,
      .global_context            = nullptr,
    },
  .output_fns = {
    .malloc_fn      = <ref refid="namespacewholememory_1a0710b520cc82c9d80eb546dddd020f7e" kindref="member">default_malloc_func</ref>,
    .free_fn        = <ref refid="namespacewholememory_1a156dc488b5c63d15b346d91262f0a8bd" kindref="member">default_free_func</ref>,
    .global_context = nullptr,
  }}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="90" column="31" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1a53e980f59c6f5dbf675789c2efc5a562" prot="public" static="yes" mutable="no">
        <type><ref refid="structwholememory__env__func__t" kindref="compound">wholememory_env_func_t</ref></type>
        <definition>wholememory_env_func_t wholememory::cached_env_func</definition>
        <argsstring></argsstring>
        <name>cached_env_func</name>
        <initializer>= {
  .temporary_fns =
    {
      .create_memory_context_fn  = <ref refid="namespacewholememory_1acf279522fb30c81b5b18dbfda4bb6600" kindref="member">default_create_memory_context_func</ref>,
      .destroy_memory_context_fn = <ref refid="namespacewholememory_1a2bdc4741fa36325af29dccb86f6e7996" kindref="member">default_destroy_memory_context_func</ref>,
      .malloc_fn                 = <ref refid="namespacewholememory_1af3fb6a254c441306d3616d3f6432ee57" kindref="member">cached_malloc_func</ref>,
      .free_fn                   = <ref refid="namespacewholememory_1a9a9b4acba0a60e5ccc739be187ecfcdd" kindref="member">cached_free_func</ref>,
      .global_context            = nullptr,
    },
  .output_fns = {
    .malloc_fn      = <ref refid="namespacewholememory_1af3fb6a254c441306d3616d3f6432ee57" kindref="member">cached_malloc_func</ref>,
    .free_fn        = <ref refid="namespacewholememory_1a9a9b4acba0a60e5ccc739be187ecfcdd" kindref="member">cached_free_func</ref>,
    .global_context = nullptr,
  }}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="356" column="31" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1abaf22b3215973db634303c969eac7c8e" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex wholememory::mu</definition>
        <argsstring></argsstring>
        <name>mu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/initialize.cpp" line="29" column="19" bodyfile="src/wholememory/initialize.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1ad74e6882da96fc6e2442c92069821e11" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool wholememory::is_wm_init</definition>
        <argsstring></argsstring>
        <name>is_wm_init</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/initialize.cpp" line="30" column="13" bodyfile="src/wholememory/initialize.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1abfb8c908f4ab21a8593e5aaed752bbd9" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string wholememory::RAFT_NAME</definition>
        <argsstring></argsstring>
        <name>RAFT_NAME</name>
        <initializer>= &quot;wholememory&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/initialize.cpp" line="32" column="26" bodyfile="src/wholememory/initialize.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1a6e7c8f965139a959fc10af1c3ea52a2b" prot="public" static="yes" mutable="no">
        <type>cudaDeviceProp *</type>
        <definition>cudaDeviceProp* wholememory::device_props</definition>
        <argsstring></argsstring>
        <name>device_props</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/initialize.cpp" line="33" column="23" bodyfile="src/wholememory/initialize.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1ae11a07a5d7ace757e223ed2dc01fc017" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex wholememory::wholememory_vma_mu</definition>
        <argsstring></argsstring>
        <name>wholememory_vma_mu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="216" column="19" bodyfile="src/wholememory/memory_handle.cpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewholememory_1a2623a93e16e23a6a7e9f1a6bb5b50bbe" prot="public" static="yes" mutable="no">
        <type>std::map&lt; uint64_t, wholememory_vma_data &gt;</type>
        <definition>std::map&lt;uint64_t, wholememory_vma_data&gt; wholememory::wholememory_vma_map</definition>
        <argsstring></argsstring>
        <name>wholememory_vma_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="220" column="17" bodyfile="src/wholememory/memory_handle.cpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacewholememory_1a766b9bf2185026932f6da415e3984c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wholememory::__attribute__</definition>
        <argsstring>((constructor)) static void ReadDebugSyncModeFromEnv()</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(constructor)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.cpp" line="27" column="1" bodyfile="src/cuda_macros.cpp" bodystart="27" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1af2aa6b202dc6f43a7f0993a497c2aafd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::set_debug_sync_mode</definition>
        <argsstring>(bool debug_sync_mode)</argsstring>
        <name>set_debug_sync_mode</name>
        <param>
          <type>bool</type>
          <declname>debug_sync_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.cpp" line="45" column="6" bodyfile="src/cuda_macros.cpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a41c85310d93d38aec8f7ea3709df0ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::debug_synchronize</definition>
        <argsstring>(const char *filename, int line, cudaStream_t stream)</argsstring>
        <name>debug_synchronize</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/cuda_macros.cpp" line="47" column="6" bodyfile="src/cuda_macros.cpp" bodystart="47" bodyend="67" declfile="src/cuda_macros.hpp" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a4033065ca9bce3f08195fe129c148574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1aca1fd1d8935433e6ba2e3918214e07f9" kindref="member">LogLevel</ref> &amp;</type>
        <definition>LogLevel &amp; wholememory::get_log_level</definition>
        <argsstring>()</argsstring>
        <name>get_log_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logger.cpp" line="24" column="10" bodyfile="src/logger.cpp" bodystart="24" bodyend="28" declfile="src/logger.hpp" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a8e4a31a1162a4a8b732df36bd7c2fb40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::set_log_level</definition>
        <argsstring>(LogLevel lev)</argsstring>
        <name>set_log_level</name>
        <param>
          <type><ref refid="wholememory_8h_1aca1fd1d8935433e6ba2e3918214e07f9" kindref="member">LogLevel</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logger.cpp" line="30" column="6" bodyfile="src/logger.cpp" bodystart="30" bodyend="30" declfile="src/logger.hpp" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a0d576289ac0363828be1beec7d4cf320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory::will_log_for</definition>
        <argsstring>(LogLevel lev)</argsstring>
        <name>will_log_for</name>
        <param>
          <type><ref refid="wholememory_8h_1aca1fd1d8935433e6ba2e3918214e07f9" kindref="member">LogLevel</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logger.cpp" line="32" column="6" bodyfile="src/logger.cpp" bodystart="32" bodyend="32" declfile="src/logger.hpp" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__CStringFormat_1ga4f5d8ab83984f560343bdffc037e393d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string wholememory::format</definition>
        <argsstring>(const char *fmt, va_list &amp;vl)</argsstring>
        <name>format</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list &amp;</type>
          <declname>vl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logger.hpp" line="49" column="20" bodyfile="src/logger.hpp" bodystart="49" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="group__CStringFormat_1ga199f31858eed3e5c749216f1377dc380" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string wholememory::format</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>format</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logger.hpp" line="60" column="20" bodyfile="src/logger.hpp" bodystart="60" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a95b01d87eac905d8199b7f8f5f3d870a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::create_unique_id</definition>
        <argsstring>(wholememory_unique_id_t *unique_id) noexcept</argsstring>
        <name>create_unique_id</name>
        <param>
          <type><ref refid="structwholememory__unique__id__t" kindref="compound">wholememory_unique_id_t</ref> *</type>
          <declname>unique_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="394" column="26" bodyfile="src/wholememory/communicator.cpp" bodystart="394" bodyend="401" declfile="src/wholememory/communicator.hpp" declline="263" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a5e8206e3ef57ec992ff2ebfce3449301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct wholememory::host_info</type>
        <definition>struct wholememory::host_info wholememory::__attribute__</definition>
        <argsstring>((aligned(128)))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(aligned(128))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="404" column="22" declfile="src/wholememory/communicator.cpp" declline="404" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ad29403e48601467e6547d7eff592986e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::get_host_name</definition>
        <argsstring>(char *hostname, int maxlen, const char delim)</argsstring>
        <name>get_host_name</name>
        <param>
          <type>char *</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxlen</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="427" column="13" bodyfile="src/wholememory/communicator.cpp" bodystart="427" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1acf12a3f356dd209bb82510b24ad4a704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::get_boot_id</definition>
        <argsstring>(char *host_id, size_t len)</argsstring>
        <name>get_boot_id</name>
        <param>
          <type>char *</type>
          <declname>host_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="446" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="446" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a46b207a1367c70e5abaeb241cedfc769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::get_shm_devid</definition>
        <argsstring>(dev_t *shm_dev)</argsstring>
        <name>get_shm_devid</name>
        <param>
          <type>dev_t *</type>
          <declname>shm_dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="475" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="475" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1adbfb3c230e831ace53be3c5f6566cf82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::get_host_info</definition>
        <argsstring>(host_info *phi)</argsstring>
        <name>get_host_info</name>
        <param>
          <type>host_info *</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="482" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="482" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a9c5172123345ce7690b59f39a9757b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::exchange_rank_info</definition>
        <argsstring>(wholememory_comm_t wm_comm)</argsstring>
        <name>exchange_rank_info</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>wm_comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="490" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="490" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a95008f0a1f11568c54ae618ec66bbc72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::negotiate_communicator_id_locked</definition>
        <argsstring>(wholememory_comm_t wm_comm)</argsstring>
        <name>negotiate_communicator_id_locked</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>wm_comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="518" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="518" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a380fdb86cf1c7824a5e1c13080347349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string wholememory::get_temporary_directory_path</definition>
        <argsstring>(wholememory_comm_t comm)</argsstring>
        <name>get_temporary_directory_path</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="540" column="13" bodyfile="src/wholememory/communicator.cpp" bodystart="540" bodyend="550" declfile="src/wholememory/communicator.hpp" declline="289" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1af35e40bbda1b5855e82cd1b365532641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string wholememory::get_shm_prefix</definition>
        <argsstring>(wholememory_comm_t comm)</argsstring>
        <name>get_shm_prefix</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="552" column="13" bodyfile="src/wholememory/communicator.cpp" bodystart="552" bodyend="562" declfile="src/wholememory/communicator.hpp" declline="291" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a96587d25f987409d1b7d1a9e520375d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::maybe_create_temp_dir</definition>
        <argsstring>(wholememory_comm_t wm_comm)</argsstring>
        <name>maybe_create_temp_dir</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>wm_comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="564" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="564" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a5725f479c4bd27606c4a9bcaa86fbd99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::maybe_remove_temp_dir</definition>
        <argsstring>(wholememory_comm_t wm_comm)</argsstring>
        <name>maybe_remove_temp_dir</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>wm_comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="574" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="574" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a1dbde04b51c898448692ea4cf58f9e55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t wholememory::get_alloc_granularity</definition>
        <argsstring>(int dev_id)</argsstring>
        <name>get_alloc_granularity</name>
        <param>
          <type>int</type>
          <declname>dev_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="583" column="15" bodyfile="src/wholememory/communicator.cpp" bodystart="583" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a3af64ba7abc562da548370fa251cd826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::determine_alloc_granularity</definition>
        <argsstring>(wholememory_comm_t comm)</argsstring>
        <name>determine_alloc_granularity</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="598" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="598" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a9f8e92de4da5081630c846c779fc4263" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::create_communicator</definition>
        <argsstring>(wholememory_comm_t *comm, wholememory_unique_id_t unique_id, int world_rank, int world_size) noexcept</argsstring>
        <name>create_communicator</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__unique__id__t" kindref="compound">wholememory_unique_id_t</ref></type>
          <declname>unique_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>world_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>world_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="610" column="26" bodyfile="src/wholememory/communicator.cpp" bodystart="610" bodyend="649" declfile="src/wholememory/communicator.hpp" declline="265" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ac28dc0954635eb3e3e797fbde34101c4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::destroy_all_wholememory</definition>
        <argsstring>(wholememory_comm_t comm) noexcept</argsstring>
        <name>destroy_all_wholememory</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="651" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="651" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1accb6ff921c8934a7878a8855f645a551" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::destroy_communicator_locked</definition>
        <argsstring>(wholememory_comm_t comm) noexcept</argsstring>
        <name>destroy_communicator_locked</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="672" column="26" bodyfile="src/wholememory/communicator.cpp" bodystart="672" bodyend="704" declfile="src/wholememory/communicator.hpp" declline="270" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a7d7a70bc0fd811bc3365a0006672568d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::destroy_communicator</definition>
        <argsstring>(wholememory_comm_t comm) noexcept</argsstring>
        <name>destroy_communicator</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="706" column="26" bodyfile="src/wholememory/communicator.cpp" bodystart="706" bodyend="710" declfile="src/wholememory/communicator.hpp" declline="272" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ad196384a459e9d06c87a84b500373f13" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::communicator_support_type_location</definition>
        <argsstring>(wholememory_comm_t comm, wholememory_memory_type_t memory_type, wholememory_memory_location_t memory_location) noexcept</argsstring>
        <name>communicator_support_type_location</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a58cc0d50d4f407e416d73b7a806aff50" kindref="member">wholememory_memory_type_t</ref></type>
          <declname>memory_type</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1aaab2c1ef14fcbfffce91ce5856c5d9fe" kindref="member">wholememory_memory_location_t</ref></type>
          <declname>memory_location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="712" column="26" bodyfile="src/wholememory/communicator.cpp" bodystart="712" bodyend="719" declfile="src/wholememory/communicator.hpp" declline="274" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ad3eaac5ad3d1adab0c25930187bbb892" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::destroy_all_communicators</definition>
        <argsstring>() noexcept</argsstring>
        <name>destroy_all_communicators</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="721" column="26" bodyfile="src/wholememory/communicator.cpp" bodystart="721" bodyend="729" declfile="src/wholememory/communicator.hpp" declline="279" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a066152d2429b6fadba01de0cb71dee49" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::communicator_get_rank</definition>
        <argsstring>(int *rank, wholememory_comm_t comm) noexcept</argsstring>
        <name>communicator_get_rank</name>
        <param>
          <type>int *</type>
          <declname>rank</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="731" column="26" bodyfile="src/wholememory/communicator.cpp" bodystart="731" bodyend="735" declfile="src/wholememory/communicator.hpp" declline="281" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a7e32c1600ee5fc7de9c172221823698f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::communicator_get_size</definition>
        <argsstring>(int *size, wholememory_comm_t comm) noexcept</argsstring>
        <name>communicator_get_size</name>
        <param>
          <type>int *</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="737" column="26" bodyfile="src/wholememory/communicator.cpp" bodystart="737" bodyend="741" declfile="src/wholememory/communicator.hpp" declline="283" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ae0648dd1c3cb302520b9e2b5fbecb5d6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory::communicator_is_bind_to_nvshmem</definition>
        <argsstring>(wholememory_comm_t comm) noexcept</argsstring>
        <name>communicator_is_bind_to_nvshmem</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="743" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="743" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a6374c623eb001a87d3b9f27070a61c45" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a75fb650e8a2ffb7be976f9962451ce82" kindref="member">wholememory_distributed_backend_t</ref></type>
        <definition>wholememory_distributed_backend_t wholememory::communicator_get_distributed_backend</definition>
        <argsstring>(wholememory_comm_t comm) noexcept</argsstring>
        <name>communicator_get_distributed_backend</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="752" column="35" bodyfile="src/wholememory/communicator.cpp" bodystart="752" bodyend="756" declfile="src/wholememory/communicator.hpp" declline="296" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a8b696746c0e9af2a26f527980f8f81ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::communicator_barrier</definition>
        <argsstring>(wholememory_comm_t comm)</argsstring>
        <name>communicator_barrier</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="758" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="758" bodyend="771" declfile="src/wholememory/communicator.hpp" declline="285" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a9c2c75c1847de5be0addf761edf559d5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory::is_intranode_communicator</definition>
        <argsstring>(wholememory_comm_t comm) noexcept</argsstring>
        <name>is_intranode_communicator</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="773" column="6" bodyfile="src/wholememory/communicator.cpp" bodystart="773" bodyend="773" declfile="src/wholememory/communicator.hpp" declline="287" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a6b51adbdf967904a9b109296a5cff842" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::communicator_set_distributed_backend</definition>
        <argsstring>(wholememory_comm_t comm, wholememory_distributed_backend_t distributed_backend) noexcept</argsstring>
        <name>communicator_set_distributed_backend</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a75fb650e8a2ffb7be976f9962451ce82" kindref="member">wholememory_distributed_backend_t</ref></type>
          <declname>distributed_backend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/communicator.cpp" line="856" column="26" bodyfile="src/wholememory/communicator.cpp" bodystart="856" bodyend="884" declfile="src/wholememory/communicator.hpp" declline="293" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a84f44c146fe5a6d841b213cc1034d7c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>static int64_t wholememory::align_embedding_dim</definition>
        <argsstring>(int64_t embedding_dim, size_t element_size)</argsstring>
        <name>align_embedding_dim</name>
        <param>
          <type>int64_t</type>
          <declname>embedding_dim</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>element_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/embedding.cpp" line="43" column="16" bodyfile="src/wholememory/embedding.cpp" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1acadac0421b4c5cf85580f587d6b2dfdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::float_setter_fn</definition>
        <argsstring>(float *target_ptr, const void *data)</argsstring>
        <name>float_setter_fn</name>
        <param>
          <type>float *</type>
          <declname>target_ptr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/embedding_optimizer.cpp" line="29" column="26" bodyfile="src/wholememory/embedding_optimizer.cpp" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a133f8c08105e34b6d4a7b768b158fd52" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::create_embedding_optimizer</definition>
        <argsstring>(wholememory_embedding_optimizer_t *optimizer, wholememory_optimizer_type_t optimizer_type) noexcept</argsstring>
        <name>create_embedding_optimizer</name>
        <param>
          <type><ref refid="embedding_8h_1a35feb5c3fa89c1bed12e5c698499df19" kindref="member">wholememory_embedding_optimizer_t</ref> *</type>
          <declname>optimizer</declname>
        </param>
        <param>
          <type><ref refid="embedding_8h_1a550f5f2bdfbd3fcccb8d357e555451cf" kindref="member">wholememory_optimizer_type_t</ref></type>
          <declname>optimizer_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/embedding_optimizer.cpp" line="485" column="26" bodyfile="src/wholememory/embedding_optimizer.cpp" bodystart="485" bodyend="518" declfile="src/wholememory/embedding_optimizer.hpp" declline="137" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ab924d8320a1cac8376e8d072563c40bd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::optimizer_set_parameter</definition>
        <argsstring>(wholememory_embedding_optimizer_t optimizer, const char *parameter_name, void *value) noexcept</argsstring>
        <name>optimizer_set_parameter</name>
        <param>
          <type><ref refid="embedding_8h_1a35feb5c3fa89c1bed12e5c698499df19" kindref="member">wholememory_embedding_optimizer_t</ref></type>
          <declname>optimizer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>parameter_name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/embedding_optimizer.cpp" line="520" column="26" bodyfile="src/wholememory/embedding_optimizer.cpp" bodystart="520" bodyend="530" declfile="src/wholememory/embedding_optimizer.hpp" declline="141" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a0081be82f933fca09996cb975e898716" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::destroy_embedding_optimizer</definition>
        <argsstring>(wholememory_embedding_optimizer_t optimizer) noexcept</argsstring>
        <name>destroy_embedding_optimizer</name>
        <param>
          <type><ref refid="embedding_8h_1a35feb5c3fa89c1bed12e5c698499df19" kindref="member">wholememory_embedding_optimizer_t</ref></type>
          <declname>optimizer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/embedding_optimizer.cpp" line="532" column="6" bodyfile="src/wholememory/embedding_optimizer.cpp" bodystart="532" bodyend="536" declfile="src/wholememory/embedding_optimizer.hpp" declline="145" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1acf279522fb30c81b5b18dbfda4bb6600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::default_create_memory_context_func</definition>
        <argsstring>(void **memory_context, void *)</argsstring>
        <name>default_create_memory_context_func</name>
        <param>
          <type>void **</type>
          <declname>memory_context</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="29" column="6" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a2bdc4741fa36325af29dccb86f6e7996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::default_destroy_memory_context_func</definition>
        <argsstring>(void *memory_context, void *)</argsstring>
        <name>default_destroy_memory_context_func</name>
        <param>
          <type>void *</type>
          <declname>memory_context</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="38" column="6" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a0710b520cc82c9d80eb546dddd020f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* wholememory::default_malloc_func</definition>
        <argsstring>(wholememory_tensor_description_t *tensor_description, wholememory_memory_allocation_type_t memory_allocation_type, void *memory_context, void *)</argsstring>
        <name>default_malloc_func</name>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>tensor_description</declname>
        </param>
        <param>
          <type><ref refid="env__func__ptrs_8h_1a220cfc9919630023b2df6131237a8cff" kindref="member">wholememory_memory_allocation_type_t</ref></type>
          <declname>memory_allocation_type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>memory_context</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="44" column="6" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="44" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a156dc488b5c63d15b346d91262f0a8bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::default_free_func</definition>
        <argsstring>(void *memory_context, void *)</argsstring>
        <name>default_free_func</name>
        <param>
          <type>void *</type>
          <declname>memory_context</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="72" column="6" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="72" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a1e3287233c22d9454d415062410d7937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwholememory__env__func__t" kindref="compound">wholememory_env_func_t</ref> *</type>
        <definition>wholememory_env_func_t * wholememory::get_default_env_func</definition>
        <argsstring>()</argsstring>
        <name>get_default_env_func</name>
        <briefdescription>
<para>: Default environment functions for memory allocation. Will use cudaMalloc/cudaFree, cudaMallocHost/cudaFreeHost, malloc/free. Useful for function tests, NOT designed for performance tests. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>: pointers to the functions of current CUDA device </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="105" column="24" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="105" bodyend="105" declfile="src/wholememory/env_func_ptrs.hpp" declline="35" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1af6bcb1d5563ab392041b6f0d7143fc90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t wholememory::GetChunkIndex</definition>
        <argsstring>(size_t size)</argsstring>
        <name>GetChunkIndex</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="122" column="15" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="122" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1af3fb6a254c441306d3616d3f6432ee57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* wholememory::cached_malloc_func</definition>
        <argsstring>(wholememory_tensor_description_t *tensor_description, wholememory_memory_allocation_type_t memory_allocation_type, void *memory_context, void *)</argsstring>
        <name>cached_malloc_func</name>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>tensor_description</declname>
        </param>
        <param>
          <type><ref refid="env__func__ptrs_8h_1a220cfc9919630023b2df6131237a8cff" kindref="member">wholememory_memory_allocation_type_t</ref></type>
          <declname>memory_allocation_type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>memory_context</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="302" column="6" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="302" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a9a9b4acba0a60e5ccc739be187ecfcdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::cached_free_func</definition>
        <argsstring>(void *memory_context, void *)</argsstring>
        <name>cached_free_func</name>
        <param>
          <type>void *</type>
          <declname>memory_context</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="334" column="6" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="334" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1aac6ab45aa294c98f864c1a37f5c76858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwholememory__env__func__t" kindref="compound">wholememory_env_func_t</ref> *</type>
        <definition>wholememory_env_func_t * wholememory::get_cached_env_func</definition>
        <argsstring>()</argsstring>
        <name>get_cached_env_func</name>
        <briefdescription>
<para>: Environment functions for memory allocation with caches. Will cache allocated memory blocks, and reuse if possible. Minimal block size is 256 bytes, block with size &lt; 1G bytes is aligned to power of 2, block with size &gt;= 1G bytes is aligned to 1G bytes. Useful for performance tests. Need warm up to fill caches. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>: pointers to the functions of current CUDA device </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="371" column="24" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="371" bodyend="371" declfile="src/wholememory/env_func_ptrs.hpp" declline="46" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1aeee42e212661870a22da2d9323235b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory::drop_cached_env_func_cache</definition>
        <argsstring>()</argsstring>
        <name>drop_cached_env_func_cache</name>
        <briefdescription>
<para>: drop all caches of inside cached allocator of current CUDA device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/env_func_ptrs.cpp" line="373" column="6" bodyfile="src/wholememory/env_func_ptrs.cpp" bodystart="373" bodyend="373" declfile="src/wholememory/env_func_ptrs.hpp" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a93d36059e436101f5aeb0c415d1f768d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool wholememory::IsFileExist</definition>
        <argsstring>(const char *filename, int mode)</argsstring>
        <name>IsFileExist</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="38" column="13" bodyfile="src/wholememory/file_io.cpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a0d2eb78ede50f3bb408dd20735b61783" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t wholememory::StatFileSize</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>StatFileSize</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="40" column="15" bodyfile="src/wholememory/file_io.cpp" bodystart="40" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ab3a524834c002132b1fa43f4c5c0911d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t wholememory::StatFileBlockSize</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>StatFileBlockSize</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="49" column="15" bodyfile="src/wholememory/file_io.cpp" bodystart="49" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a6517de0faa601a964303dfd45840ff9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t wholememory::get_handle_partial_size</definition>
        <argsstring>(size_t handle_size, size_t memory_offset, size_t memory_entry_stride, size_t entry_size)</argsstring>
        <name>get_handle_partial_size</name>
        <param>
          <type>size_t</type>
          <declname>handle_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="58" column="15" bodyfile="src/wholememory/file_io.cpp" bodystart="58" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a76b3ba0af1fcc9c4068eada0d8b9a751" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::read_file_list_to_local_memory_roundrobin</definition>
        <argsstring>(char *local_ptr, size_t local_size, size_t local_offset, size_t entry_size, size_t memory_entry_stride, size_t memory_offset, int file_count, const char **file_names, const std::vector&lt; size_t &gt; &amp;file_sizes, size_t suggested_buffer_size, int wm_rank, int wm_world_size, int round_robin_size)</argsstring>
        <name>read_file_list_to_local_memory_roundrobin</name>
        <param>
          <type>char *</type>
          <declname>local_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>file_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>file_sizes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>suggested_buffer_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_world_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>round_robin_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read from file list to local memory of WholeMemory. File list are binary files, which are considered to be concatenated together. All ranks in WholeMemory will read the files in parallel and load each part into local memory of each rank. WholeMemory will use round-robin sharding strategy. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>local_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to local memory of WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Local memory size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The offset of local memory in WholeMemory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The entry size of each data entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_entry_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>: The stride of each entry in WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The start offset to place the read data. Should be in range [0, memory_entry_stride) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Total file count of the file list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_names</parametername>
</parameternamelist>
<parameterdescription>
<para>: File names of the file list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: Sizes of each file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suggested_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Suggested buffer size to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory rank. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_world_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory world size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>round_robin_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: continuous embedding size of a rank using round robin shard strategy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="102" column="13" bodyfile="src/wholememory/file_io.cpp" bodystart="102" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a4c03862b9b093f6097c3db7ccb0ae9ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::read_file_list_to_local_memory</definition>
        <argsstring>(char *local_ptr, size_t local_size, size_t local_offset, size_t entry_size, size_t memory_entry_stride, size_t memory_offset, int file_count, const char **file_names, const std::vector&lt; size_t &gt; &amp;file_sizes, size_t suggested_buffer_size, int wm_rank)</argsstring>
        <name>read_file_list_to_local_memory</name>
        <param>
          <type>char *</type>
          <declname>local_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>file_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>file_sizes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>suggested_buffer_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read from file list to local memory of WholeMemory. File list are binary files, which are considered to be concatenated together. All ranks in WholeMemory will read the files in parallel and load each part into local memory of each rank. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>local_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to local memory of WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Local memory size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The offset of local memory in WholeMemory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The entry size of each data entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_entry_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>: The stride of each entry in WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The start offset to place the read data. Should be in range [0, memory_entry_stride) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Total file count of the file list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_names</parametername>
</parameternamelist>
<parameterdescription>
<para>: File names of the file list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: Sizes of each file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suggested_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Suggested buffer size to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory rank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="278" column="13" bodyfile="src/wholememory/file_io.cpp" bodystart="278" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a67643151c406fbba2cae770d3c8733ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::read_file_list_to_local_memory_roundrobin_with_multi_threads</definition>
        <argsstring>(char *local_ptr, size_t local_size, size_t local_offset, size_t entry_size, size_t memory_entry_stride, size_t memory_offset, int file_count, const char **file_names, const std::vector&lt; size_t &gt; &amp;file_sizes, size_t suggested_buffer_size, int wm_rank, int wm_world_size, int round_robin_size, int dev_id)</argsstring>
        <name>read_file_list_to_local_memory_roundrobin_with_multi_threads</name>
        <param>
          <type>char *</type>
          <declname>local_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>file_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>file_sizes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>suggested_buffer_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_world_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>round_robin_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read from file list to local memory of WholeMemory. File list are binary files, which are considered to be concatenated together. All ranks in WholeMemory will read the files in parallel and load each part into local memory of each rank. WholeMemory will use round-robin sharding strategy. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>local_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to local memory of WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Local memory size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The offset of local memory in WholeMemory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The entry size of each data entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_entry_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>: The stride of each entry in WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The start offset to place the read data. Should be in range [0, memory_entry_stride) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Total file count of the file list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_names</parametername>
</parameternamelist>
<parameterdescription>
<para>: File names of the file list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: Sizes of each file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suggested_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Suggested buffer size to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory rank. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_world_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory world size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>round_robin_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: continuous embedding size of a rank using round robin shard strategy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: the device bound to the rank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="413" column="13" bodyfile="src/wholememory/file_io.cpp" bodystart="413" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ab3007cf979cb5a4bdea6664face63b27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::read_file_list_to_local_memory_with_multi_threads</definition>
        <argsstring>(char *local_ptr, size_t local_size, size_t local_offset, size_t entry_size, size_t memory_entry_stride, size_t memory_offset, int file_count, const char **file_names, const std::vector&lt; size_t &gt; &amp;file_sizes, size_t suggested_buffer_size, int wm_rank, int wm_world_size, int dev_id)</argsstring>
        <name>read_file_list_to_local_memory_with_multi_threads</name>
        <param>
          <type>char *</type>
          <declname>local_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>file_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>file_sizes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>suggested_buffer_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_world_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read from file list to local memory of WholeMemory. File list are binary files, which are considered to be concatenated together. All ranks in WholeMemory will read the files in parallel and load each part into local memory of each rank. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>local_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to local memory of WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Local memory size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The offset of local memory in WholeMemory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The entry size of each data entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_entry_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>: The stride of each entry in WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The start offset to place the read data. Should be in range [0, memory_entry_stride) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Total file count of the file list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_names</parametername>
</parameternamelist>
<parameterdescription>
<para>: File names of the file list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: Sizes of each file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suggested_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Suggested buffer size to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory rank. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_world_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory world size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: the device bound to the rank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="676" column="13" bodyfile="src/wholememory/file_io.cpp" bodystart="676" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a134381cfe45233a5101f7a8791e022ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::read_file_list_to_local_memory_roundrobin_directio</definition>
        <argsstring>(char *local_ptr, size_t local_size, size_t local_offset, size_t entry_size, size_t memory_entry_stride, size_t memory_offset, int file_count, const char **file_names, const std::vector&lt; size_t &gt; &amp;file_sizes, size_t suggested_buffer_size, int wm_rank, int wm_world_size, int round_robin_size)</argsstring>
        <name>read_file_list_to_local_memory_roundrobin_directio</name>
        <param>
          <type>char *</type>
          <declname>local_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>file_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>file_sizes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>suggested_buffer_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_world_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>round_robin_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read from file list to local memory of WholeMemory using DirectIO. Using DirectIO may have better performance by bypassing system cache if it is bottleneck. File list are binary files, which are considered to be concatenated together. All ranks in WholeMemory will read the files in parallel and load each part into local memory of each rank. Wholememory uses round-robin sharding strategy here. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>local_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to local memory of WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Local memory size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The offset of local memory in WholeMemory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The entry size of each data entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_entry_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>: The stride of each entry in WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The start offset to place the read data. Should be in range [0, memory_entry_stride) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Total file count of the file list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_names</parametername>
</parameternamelist>
<parameterdescription>
<para>: File names of the file list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: Sizes of each file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suggested_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Suggested buffer size to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory rank. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_world_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory world size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>round_robin_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: continuous embedding size of a rank using round robin shard strategy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="883" column="13" bodyfile="src/wholememory/file_io.cpp" bodystart="883" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1aa92f2d3ce01486a8736afab436554663" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::read_file_list_to_local_memory_directio</definition>
        <argsstring>(char *local_ptr, size_t local_size, size_t local_offset, size_t entry_size, size_t memory_entry_stride, size_t memory_offset, int file_count, const char **file_names, const std::vector&lt; size_t &gt; &amp;file_sizes, size_t suggested_buffer_size, int wm_rank)</argsstring>
        <name>read_file_list_to_local_memory_directio</name>
        <param>
          <type>char *</type>
          <declname>local_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>file_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>file_sizes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>suggested_buffer_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read from file list to local memory of WholeMemory using DirectIO. Using DirectIO may have better performance by bypassing system cache if it is bottleneck. File list are binary files, which are considered to be concatenated together. All ranks in WholeMemory will read the files in parallel and load each part into local memory of each rank. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>local_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to local memory of WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Local memory size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The offset of local memory in WholeMemory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The entry size of each data entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_entry_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>: The stride of each entry in WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The start offset to place the read data. Should be in range [0, memory_entry_stride) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Total file count of the file list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_names</parametername>
</parameternamelist>
<parameterdescription>
<para>: File names of the file list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: Sizes of each file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suggested_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Suggested buffer size to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory rank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="1121" column="13" bodyfile="src/wholememory/file_io.cpp" bodystart="1121" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1adfef5743941b1031fe51cddeea4da886" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::read_file_list_to_local_memory_directio_with_multi_thread</definition>
        <argsstring>(char *local_ptr, size_t local_size, size_t local_offset, size_t entry_size, size_t memory_entry_stride, size_t memory_offset, int file_count, const char **file_names, const std::vector&lt; size_t &gt; &amp;file_sizes, size_t suggested_buffer_size, int wm_rank, int wm_world_size, int dev_id)</argsstring>
        <name>read_file_list_to_local_memory_directio_with_multi_thread</name>
        <param>
          <type>char *</type>
          <declname>local_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>file_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>file_sizes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>suggested_buffer_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_world_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read from file list to local memory of WholeMemory using DirectIO. Using DirectIO may have better performance by bypassing system cache if it is bottleneck. File list are binary files, which are considered to be concatenated together. All ranks in WholeMemory will read the files in parallel and load each part into local memory of each rank. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>local_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to local memory of WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Local memory size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The offset of local memory in WholeMemory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The entry size of each data entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_entry_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>: The stride of each entry in WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The start offset to place the read data. Should be in range [0, memory_entry_stride) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Total file count of the file list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_names</parametername>
</parameternamelist>
<parameterdescription>
<para>: File names of the file list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: Sizes of each file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suggested_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Suggested buffer size to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory rank. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_world_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory world size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: the device bound to the rank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="1303" column="13" bodyfile="src/wholememory/file_io.cpp" bodystart="1303" bodyend="1528"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a577518ade39ab43ff4d4a1ec5110f38c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::read_file_list_to_local_memory_roundrobin_directio_with_multi_threads</definition>
        <argsstring>(char *local_ptr, size_t local_size, size_t local_offset, size_t entry_size, size_t memory_entry_stride, size_t memory_offset, int file_count, const char **file_names, const std::vector&lt; size_t &gt; &amp;file_sizes, size_t suggested_buffer_size, int wm_rank, int wm_world_size, int round_robin_size, int dev_id)</argsstring>
        <name>read_file_list_to_local_memory_roundrobin_directio_with_multi_threads</name>
        <param>
          <type>char *</type>
          <declname>local_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>local_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>file_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>file_sizes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>suggested_buffer_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wm_world_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>round_robin_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read from file list to local memory of WholeMemory using DirectIO. Using DirectIO may have better performance by bypassing system cache if it is bottleneck. File list are binary files, which are considered to be concatenated together. All ranks in WholeMemory will read the files in parallel and load each part into local memory of each rank. Wholememory uses round-robin sharding strategy here. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>local_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to local memory of WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Local memory size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The offset of local memory in WholeMemory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: The entry size of each data entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_entry_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>: The stride of each entry in WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: The start offset to place the read data. Should be in range [0, memory_entry_stride) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Total file count of the file list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_names</parametername>
</parameternamelist>
<parameterdescription>
<para>: File names of the file list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: Sizes of each file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suggested_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: Suggested buffer size to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory rank. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wm_world_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory world size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>round_robin_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: continuous embedding size of a rank using round robin shard strategy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: the device bound to the rank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="1552" column="13" bodyfile="src/wholememory/file_io.cpp" bodystart="1552" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ae5808d11a5d738d0f9439c2653971c8c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::load_file_to_handle</definition>
        <argsstring>(wholememory_handle_t wholememory_handle, size_t memory_offset, size_t memory_entry_stride, size_t entry_size, const char **file_names, int file_count, int round_robin_size) noexcept</argsstring>
        <name>load_file_to_handle</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>file_names</declname>
        </param>
        <param>
          <type>int</type>
          <declname>file_count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>round_robin_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="1860" column="26" bodyfile="src/wholememory/file_io.cpp" bodystart="1860" bodyend="2057" declfile="src/wholememory/file_io.h" declline="22" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1aa2fa07747c04f0b78817d66ae6f73037" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::store_handle_to_file</definition>
        <argsstring>(wholememory_handle_t wholememory_handle, size_t memory_offset, size_t memory_entry_stride, size_t entry_size, const char *local_file_name) noexcept</argsstring>
        <name>store_handle_to_file</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_entry_stride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry_size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>local_file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/file_io.cpp" line="2059" column="26" bodyfile="src/wholememory/file_io.cpp" bodystart="2059" bodyend="2174" declfile="src/wholememory/file_io.h" declline="30" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a939f4ae8079adfe5287c493cf2d007b5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::init</definition>
        <argsstring>(unsigned int flags, LogLevel log_level) noexcept</argsstring>
        <name>init</name>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1aca1fd1d8935433e6ba2e3918214e07f9" kindref="member">LogLevel</ref></type>
          <declname>log_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/initialize.cpp" line="35" column="26" bodyfile="src/wholememory/initialize.cpp" bodystart="35" bodyend="71" declfile="src/wholememory/initialize.hpp" declline="24" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a0c4fb9586479b32565199d381f5d6653" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::finalize</definition>
        <argsstring>() noexcept</argsstring>
        <name>finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/initialize.cpp" line="73" column="26" bodyfile="src/wholememory/initialize.cpp" bodystart="73" bodyend="81" declfile="src/wholememory/initialize.hpp" declline="26" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ad389ed05d77a5e3e7eef6b4fb99ca833" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>cudaDeviceProp *</type>
        <definition>cudaDeviceProp * wholememory::get_device_prop</definition>
        <argsstring>(int dev_id) noexcept</argsstring>
        <name>get_device_prop</name>
        <param>
          <type>int</type>
          <declname>dev_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return cudaDeviceProp of dev_id, if dev_id is -1, use current device <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: device id, -1 for current device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: cudaDeviceProp pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/initialize.cpp" line="83" column="16" bodyfile="src/wholememory/initialize.cpp" bodystart="83" bodyend="93" declfile="src/wholememory/initialize.hpp" declline="33" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a8fbb38a2fa1db79c78e371e99a24c7e3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>S</type>
        <definition>S wholememory::round_up_unsafe</definition>
        <argsstring>(S number_to_round, S modulus) noexcept</argsstring>
        <name>round_up_unsafe</name>
        <param>
          <type>S</type>
          <declname>number_to_round</declname>
        </param>
        <param>
          <type>S</type>
          <declname>modulus</declname>
        </param>
        <briefdescription>
<para>Utility functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Finds the smallest integer not less than <computeroutput>number_to_round</computeroutput> and modulo <computeroutput>S</computeroutput> is zero. This function assumes that <computeroutput>number_to_round</computeroutput> is non-negative and <computeroutput>modulus</computeroutput> is positive. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/integer_utils.hpp" line="29" column="10" bodyfile="src/wholememory/integer_utils.hpp" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ab0592db84bab762b9a6368d410b282d7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr S</type>
        <definition>constexpr S wholememory::div_rounding_up_unsafe</definition>
        <argsstring>(const S &amp;dividend, const T &amp;divisor) noexcept</argsstring>
        <name>div_rounding_up_unsafe</name>
        <param>
          <type>const S &amp;</type>
          <declname>dividend</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides the left-hand-side by the right-hand-side, rounding up to an integral multiple of the right-hand-side, e.g. (9,5) -&gt; 2 , (10,5) -&gt; 2, (11,5) -&gt; 3.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dividend</parametername>
</parameternamelist>
<parameterdescription>
<para>the number to divide </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>divisor</parametername>
</parameternamelist>
<parameterdescription>
<para>the number by which to divide </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The least integer multiple of divisor which is greater than or equal to the non-integral division dividend/divisor.</para>
</simplesect>
<simplesect kind="note"><para>sensitive to overflow, i.e. if dividend &gt; std::numeric_limits&lt;S&gt;::max() - divisor, the result will be incorrect </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/integer_utils.hpp" line="50" column="20" bodyfile="src/wholememory/integer_utils.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a178fd8744021de6aef14d89397725bb6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>constexpr I</type>
        <definition>constexpr I wholememory::div_rounding_up_safe</definition>
        <argsstring>(I dividend, I divisor) noexcept</argsstring>
        <name>div_rounding_up_safe</name>
        <param>
          <type>I</type>
          <declname>dividend</declname>
        </param>
        <param>
          <type>I</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides the left-hand-side by the right-hand-side, rounding up to an integral multiple of the right-hand-side, e.g. (9,5) -&gt; 2 , (10,5) -&gt; 2, (11,5) -&gt; 3.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dividend</parametername>
</parameternamelist>
<parameterdescription>
<para>the number to divide </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>divisor</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of by which to divide </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The least integer multiple of divisor which is greater than or equal to the non-integral division dividend/divisor.</para>
</simplesect>
<simplesect kind="note"><para>will not overflow, and may <emphasis>or may not</emphasis> be slower than the intuitive approach of using (dividend + divisor - 1) / divisor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/integer_utils.hpp" line="68" column="20" bodyfile="src/wholememory/integer_utils.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a5e44e7067ccf170ba371a49fdd64905c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
        <definition>wholememory_handle_t wholememory::wholememory_get_handle</definition>
        <argsstring>(const void *ptr)</argsstring>
        <name>wholememory_get_handle</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="222" column="22" bodyfile="src/wholememory/memory_handle.cpp" bodystart="222" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a9eb752b463e8a97c1b8a1d761d4783f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::register_wholememory_vma_range_locked</definition>
        <argsstring>(const void *ptr, size_t mem_block_size, wholememory_handle_t wm_h)</argsstring>
        <name>register_wholememory_vma_range_locked</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mem_block_size</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wm_h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="233" column="13" bodyfile="src/wholememory/memory_handle.cpp" bodystart="233" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a85a56390866aab0088fbe837c9870826" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void wholememory::unregister_wholememory_vma_range_locked</definition>
        <argsstring>(const void *ptr, size_t mem_block_size, wholememory_handle_t wm_h) noexcept</argsstring>
        <name>unregister_wholememory_vma_range_locked</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mem_block_size</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wm_h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="265" column="13" bodyfile="src/wholememory/memory_handle.cpp" bodystart="265" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a3e6e0d2acf4b8dcf503a869d55e9d8cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wholememory::negotiate_handle_id_with_comm_locked</definition>
        <argsstring>(wholememory_comm_t wm_comm)</argsstring>
        <name>negotiate_handle_id_with_comm_locked</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>wm_comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1579" column="5" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1579" bodyend="1599"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a1f2a7a120ad67bcb6527ecdc97744c8c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::create_wholememory</definition>
        <argsstring>(wholememory_handle_t *wholememory_handle_ptr, size_t total_size, wholememory_comm_t comm, wholememory_memory_type_t memory_type, wholememory_memory_location_t memory_location, size_t data_granularity) noexcept</argsstring>
        <name>create_wholememory</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref> *</type>
          <declname>wholememory_handle_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>total_size</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a58cc0d50d4f407e416d73b7a806aff50" kindref="member">wholememory_memory_type_t</ref></type>
          <declname>memory_type</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1aaab2c1ef14fcbfffce91ce5856c5d9fe" kindref="member">wholememory_memory_location_t</ref></type>
          <declname>memory_location</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_granularity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1629" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1629" bodyend="1708" declfile="src/wholememory/memory_handle.hpp" declline="38" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1aa567f9c7bb90682cf10f61f0534bee2b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::destroy_wholememory_with_comm_locked</definition>
        <argsstring>(wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>destroy_wholememory_with_comm_locked</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1710" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1710" bodyend="1741" declfile="src/wholememory/memory_handle.hpp" declline="45" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1afef9a3fafcc21ce34a9458c3466326b5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::destroy_wholememory</definition>
        <argsstring>(wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>destroy_wholememory</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1743" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1743" bodyend="1748" declfile="src/wholememory/memory_handle.hpp" declline="48" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1aae5601eb89eea5cebd20031061e1d9c9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::get_communicator_from_handle</definition>
        <argsstring>(wholememory_comm_t *comm, wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_communicator_from_handle</name>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1750" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1750" bodyend="1758" declfile="src/wholememory/memory_handle.hpp" declline="50" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a9161a9cdf1e361c81bbc33da19c48080" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a58cc0d50d4f407e416d73b7a806aff50" kindref="member">wholememory_memory_type_t</ref></type>
        <definition>wholememory_memory_type_t wholememory::get_memory_type</definition>
        <argsstring>(wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_memory_type</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1760" column="27" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1760" bodyend="1763" declfile="src/wholememory/memory_handle.hpp" declline="53" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a3b465d47df3912c6d731f775515538bc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1aaab2c1ef14fcbfffce91ce5856c5d9fe" kindref="member">wholememory_memory_location_t</ref></type>
        <definition>wholememory_memory_location_t wholememory::get_memory_location</definition>
        <argsstring>(wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_memory_location</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1765" column="31" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1765" bodyend="1768" declfile="src/wholememory/memory_handle.hpp" declline="55" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1aaf8b01e77c862676dd2056ee76e4ff23" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a75fb650e8a2ffb7be976f9962451ce82" kindref="member">wholememory_distributed_backend_t</ref></type>
        <definition>wholememory_distributed_backend_t wholememory::get_distributed_backend_t</definition>
        <argsstring>(wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_distributed_backend_t</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1770" column="35" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1770" bodyend="1774" declfile="src/wholememory/memory_handle.hpp" declline="90" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a06e227296433b7c9fd844a8280c02247" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wholememory::get_total_size</definition>
        <argsstring>(wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_total_size</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1776" column="8" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1776" bodyend="1779" declfile="src/wholememory/memory_handle.hpp" declline="57" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1adaec6cd9a180c84e13598dbe6b5356eb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wholememory::get_data_granularity</definition>
        <argsstring>(wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_data_granularity</name>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1781" column="8" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1781" bodyend="1784" declfile="src/wholememory/memory_handle.hpp" declline="59" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a465154029f3dfe361a7e9fc5d2d75353" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::get_local_memory_from_handle</definition>
        <argsstring>(void **local_ptr, size_t *local_size, size_t *local_offset, wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_local_memory_from_handle</name>
        <param>
          <type>void **</type>
          <declname>local_ptr</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>local_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>local_offset</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1786" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1786" bodyend="1797" declfile="src/wholememory/memory_handle.hpp" declline="61" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a01c967b39628ce3a696a8a79ea34299e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::get_rank_memory_from_handle</definition>
        <argsstring>(void **rank_memory_ptr, size_t *rank_memory_size, size_t *rank_memory_offset, int rank, wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_rank_memory_from_handle</name>
        <param>
          <type>void **</type>
          <declname>rank_memory_ptr</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>rank_memory_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>rank_memory_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1799" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1799" bodyend="1816" declfile="src/wholememory/memory_handle.hpp" declline="67" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a79b9f601faf073d658a81bc54e5836f2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::get_global_pointer_from_handle</definition>
        <argsstring>(void **global_ptr, wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_global_pointer_from_handle</name>
        <param>
          <type>void **</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1818" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1818" bodyend="1826" declfile="src/wholememory/memory_handle.hpp" declline="74" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1ab2dbc4d212890dddd8dc2d1c0919b7d9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::get_global_reference_from_handle</definition>
        <argsstring>(wholememory_gref_t *wholememory_gref, wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_global_reference_from_handle</name>
        <param>
          <type><ref refid="structwholememory__gref__t" kindref="compound">wholememory_gref_t</ref> *</type>
          <declname>wholememory_gref</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1828" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1828" bodyend="1836" declfile="src/wholememory/memory_handle.hpp" declline="77" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a3c1f384b2582692c1c846382c50118da" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::determine_partition_plan</definition>
        <argsstring>(size_t *size_per_rank, size_t total_size, size_t data_granularity, int world_size) noexcept</argsstring>
        <name>determine_partition_plan</name>
        <param>
          <type>size_t *</type>
          <declname>size_per_rank</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>total_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_granularity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>world_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1864" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1864" bodyend="1874" declfile="src/wholememory/memory_handle.hpp" declline="80" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a5f0375368614b798ed5807dd337d3904" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wholememory::determine_entry_partition_plan</definition>
        <argsstring>(size_t total_entry_count, int world_size) noexcept</argsstring>
        <name>determine_entry_partition_plan</name>
        <param>
          <type>size_t</type>
          <declname>total_entry_count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>world_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1876" column="8" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1876" bodyend="1879" declfile="src/wholememory/memory_handle.hpp" declline="85" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a9d933b27319763c4c3a4077f19306df5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory::get_partition_plan_from_handle</definition>
        <argsstring>(size_t *size_per_rank, wholememory_handle_t wholememory_handle) noexcept</argsstring>
        <name>get_partition_plan_from_handle</name>
        <param>
          <type>size_t *</type>
          <declname>size_per_rank</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/memory_handle.cpp" line="1881" column="26" bodyfile="src/wholememory/memory_handle.cpp" bodystart="1881" bodyend="1889" declfile="src/wholememory/memory_handle.hpp" declline="87" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacewholememory_1a8c0e76caf43c974d2f1ca0f1d04a5688" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t wholememory::get_nccl_datatype_size</definition>
        <argsstring>(ncclDataType_t datatype)</argsstring>
        <name>get_nccl_datatype_size</name>
        <param>
          <type>ncclDataType_t</type>
          <declname>datatype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/nccl_comms.cpp" line="62" column="15" bodyfile="src/wholememory/nccl_comms.cpp" bodystart="62" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/cuda_macros.cpp" line="23" column="1"/>
  </compounddef>
</doxygen>
