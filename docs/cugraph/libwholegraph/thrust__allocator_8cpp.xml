<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="thrust__allocator_8cpp" kind="file" language="C++">
    <compoundname>thrust_allocator.cpp</compoundname>
    <includes refid="thrust__allocator_8hpp" local="yes">thrust_allocator.hpp</includes>
    <includes refid="error_8hpp" local="yes">error.hpp</includes>
    <includes refid="integer__utils_8hpp" local="yes">wholememory/integer_utils.hpp</includes>
    <incdepgraph>
      <node id="13">
        <label>raft/util/integer_utils.hpp</label>
      </node>
      <node id="11">
        <label>raft/core/error.hpp</label>
      </node>
      <node id="7">
        <label>stdint.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>wholememory/integer_utils.hpp</label>
        <link refid="integer__utils_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="2">
        <label>thrust_allocator.hpp</label>
        <link refid="thrust__allocator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>wholememory/env_func_ptrs.h</label>
        <link refid="env__func__ptrs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>error.hpp</label>
        <link refid="error_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/wholememory_ops/thrust_allocator.cpp</label>
        <link refid="thrust__allocator_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="6">
        <label>wholememory/tensor_description.h</label>
        <link refid="tensor__description_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacewholememory__ops">wholememory_ops</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="thrust__allocator_8hpp" kindref="compound">thrust_allocator.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="error_8hpp" kindref="compound">error.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="integer__utils_8hpp" kindref="compound">wholememory/integer_utils.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacewholememory__ops" kindref="compound">wholememory_ops</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a990d9d8fd10d0a1367d6a11f15fced0c" kindref="member">wm_thrust_allocator::~wm_thrust_allocator</ref>()<sp/>{<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a386bf8a6f43d6dd02d7900fa6015a013" kindref="member">deallocate_all</ref>();<sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a027398ad44435981b77d3c22d4b0ee32" kindref="member">wm_thrust_allocator::value_type</ref>*<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1ac314ba4dd1d32c6dcd7fdb3a9929fc15" kindref="member">wm_thrust_allocator::allocate</ref>(std::ptrdiff_t<sp/>mem_size)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ptrdiff_t<sp/>kThrustAlignSize<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>mem_size<sp/>=<sp/>std::max&lt;std::ptrdiff_t&gt;(kThrustAlignSize,<sp/>mem_size);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>mem_size<sp/>=<sp/><ref refid="namespacewholememory_1ab0592db84bab762b9a6368d410b282d7" kindref="member">wholememory::div_rounding_up_unsafe</ref>(mem_size,<sp/>kThrustAlignSize)<sp/>*<sp/>kThrustAlignSize;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>memory_context<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a0b6e0e8ab4e5b3cb544e0d3573cf2314" kindref="member">create_memory_context_fn</ref>(&amp;memory_context,<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a629dbbb1e2d14cdd92f92992918dcaae" kindref="member">global_context</ref>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref><sp/>tensor_description;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1a98ad7a286797c238fa7974a32ac0c58a" kindref="member">wholememory_initialize_tensor_desc</ref>(&amp;tensor_description);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>tensor_description.<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>tensor_description.<ref refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" kindref="member">dtype</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cad544b558c31c88cf2977614e34ace0d5" kindref="member">WHOLEMEMORY_DT_INT64</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>tensor_description.<ref refid="structwholememory__tensor__description__t_1a2a1f59a8ba93575af4017de3d33d2925" kindref="member">sizes</ref>[0]<sp/>=<sp/>mem_size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>ptr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a027398ad44435981b77d3c22d4b0ee32" kindref="member">value_type</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a3763bef0afda3ebb0bcce4e0dad8467f" kindref="member">malloc_fn</ref>(</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;tensor_description,<sp/><ref refid="env__func__ptrs_8h_1a220cfc9919630023b2df6131237a8cffa90bc04801a32deee762185250c704760" kindref="member">WHOLEMEMORY_MA_DEVICE</ref>,<sp/>memory_context,<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a629dbbb1e2d14cdd92f92992918dcaae" kindref="member">global_context</ref>));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a890bc5f54b4ad072cb6e6351838d41ba" kindref="member">mem_ptr_to_context_map</ref>.emplace(ptr,<sp/>memory_context);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1aff16fd4109b14d99ee21f07b096dd33a" kindref="member">wm_thrust_allocator::deallocate</ref>(value_type*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*mem_size*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a890bc5f54b4ad072cb6e6351838d41ba" kindref="member">mem_ptr_to_context_map</ref>.find(p);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(it<sp/>!=<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a890bc5f54b4ad072cb6e6351838d41ba" kindref="member">mem_ptr_to_context_map</ref>.end());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a3cc1ce59aa1264d3ec227ff7c29a02b8" kindref="member">free_fn</ref>(it-&gt;second,<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a629dbbb1e2d14cdd92f92992918dcaae" kindref="member">global_context</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a85c5125a684e4134e33eaa1fd760d327" kindref="member">destroy_memory_context_fn</ref>(it-&gt;second,<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a629dbbb1e2d14cdd92f92992918dcaae" kindref="member">global_context</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a890bc5f54b4ad072cb6e6351838d41ba" kindref="member">mem_ptr_to_context_map</ref>.erase(p);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a386bf8a6f43d6dd02d7900fa6015a013" kindref="member">wm_thrust_allocator::deallocate_all</ref>()</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a890bc5f54b4ad072cb6e6351838d41ba" kindref="member">mem_ptr_to_context_map</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a890bc5f54b4ad072cb6e6351838d41ba" kindref="member">mem_ptr_to_context_map</ref>.begin();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a3cc1ce59aa1264d3ec227ff7c29a02b8" kindref="member">free_fn</ref>(it-&gt;second,<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a629dbbb1e2d14cdd92f92992918dcaae" kindref="member">global_context</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a85c5125a684e4134e33eaa1fd760d327" kindref="member">destroy_memory_context_fn</ref>(it-&gt;second,<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>-&gt;<ref refid="structwholememory__env__func__t_1a9aa656350e5280b16966ab0ddec27f9d" kindref="member">temporary_fns</ref>.<ref refid="structwholememory__temp__memory__func__t_1a629dbbb1e2d14cdd92f92992918dcaae" kindref="member">global_context</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a890bc5f54b4ad072cb6e6351838d41ba" kindref="member">mem_ptr_to_context_map</ref>.erase(it-&gt;first);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>wholememory_ops</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/wholememory_ops/thrust_allocator.cpp"/>
  </compounddef>
</doxygen>
