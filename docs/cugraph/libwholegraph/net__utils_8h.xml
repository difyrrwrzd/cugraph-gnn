<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="net__utils_8h" kind="file" language="C++">
    <compoundname>net_utils.h</compoundname>
    <includes local="no">netinet/in.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">string</includes>
    <includedby refid="net__utils_8cpp" local="yes">src/net_utils.cpp</includedby>
    <includedby refid="parallel__utils_8cpp" local="yes">src/parallel_utils.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>netinet/in.h</label>
      </node>
      <node id="1">
        <label>src/net_utils.h</label>
        <link refid="net__utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="3">
        <label>sys/socket.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/net_utils.h</label>
        <link refid="net__utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/parallel_utils.cpp</label>
        <link refid="parallel__utils_8cpp"/>
      </node>
      <node id="2">
        <label>src/net_utils.cpp</label>
        <link refid="net__utils_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="net__utils_8h_1a794fe9bb8268ca02b29f1216011d183f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CreateServerListenFd</definition>
        <argsstring>(int port)</argsstring>
        <name>CreateServerListenFd</name>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.h" line="23" column="5" bodyfile="src/net_utils.cpp" bodystart="45" bodyend="63" declfile="src/net_utils.h" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8h_1a6fa2636518115e54604515933fd097c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ServerListen</definition>
        <argsstring>(int listen_fd, int backlog=10)</argsstring>
        <name>ServerListen</name>
        <param>
          <type>int</type>
          <declname>listen_fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>backlog</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.h" line="25" column="6" bodyfile="src/net_utils.cpp" bodystart="65" bodyend="68" declfile="src/net_utils.h" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8h_1a27e1c8a629c1e127e2ff8569901feed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ServerAccept</definition>
        <argsstring>(int listen_fd, sockaddr_in *client_addr, socklen_t *client_addr_len)</argsstring>
        <name>ServerAccept</name>
        <param>
          <type>int</type>
          <declname>listen_fd</declname>
        </param>
        <param>
          <type>sockaddr_in *</type>
          <declname>client_addr</declname>
        </param>
        <param>
          <type>socklen_t *</type>
          <declname>client_addr_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.h" line="27" column="5" bodyfile="src/net_utils.cpp" bodystart="70" bodyend="74" declfile="src/net_utils.h" declline="27" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8h_1a18d2b9566bc502b2d58b4d914aa0633f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CreateClientFd</definition>
        <argsstring>(const std::string &amp;server_name, int server_port)</argsstring>
        <name>CreateClientFd</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>server_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>server_port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.h" line="29" column="5" bodyfile="src/net_utils.cpp" bodystart="76" bodyend="103" declfile="src/net_utils.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8h_1af0fa6b7d4c1a9154ff355a8591204bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SingleSend</definition>
        <argsstring>(int sock_fd, const void *send_data, size_t send_size)</argsstring>
        <name>SingleSend</name>
        <param>
          <type>int</type>
          <declname>sock_fd</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.h" line="31" column="6" bodyfile="src/net_utils.cpp" bodystart="105" bodyend="112" declfile="src/net_utils.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="net__utils_8h_1a0ccf467583c413aa687ec2bff9247258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SingleRecv</definition>
        <argsstring>(int sock_fd, void *recv_data, size_t recv_size)</argsstring>
        <name>SingleRecv</name>
        <param>
          <type>int</type>
          <declname>sock_fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>recv_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net_utils.h" line="33" column="6" bodyfile="src/net_utils.cpp" bodystart="114" bodyend="121" declfile="src/net_utils.h" declline="33" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net__utils_8h_1a794fe9bb8268ca02b29f1216011d183f" kindref="member">CreateServerListenFd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net__utils_8h_1a6fa2636518115e54604515933fd097c3" kindref="member">ServerListen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>listen_fd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>backlog<sp/>=<sp/>10);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net__utils_8h_1a27e1c8a629c1e127e2ff8569901feed5" kindref="member">ServerAccept</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>listen_fd,<sp/>sockaddr_in*<sp/>client_addr,<sp/>socklen_t*<sp/>client_addr_len);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net__utils_8h_1a18d2b9566bc502b2d58b4d914aa0633f" kindref="member">CreateClientFd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>server_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>server_port);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net__utils_8h_1af0fa6b7d4c1a9154ff355a8591204bf8" kindref="member">SingleSend</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock_fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>send_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>send_size);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net__utils_8h_1a0ccf467583c413aa687ec2bff9247258" kindref="member">SingleRecv</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock_fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>recv_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>recv_size);</highlight></codeline>
    </programlisting>
    <location file="src/net_utils.h"/>
  </compounddef>
</doxygen>
