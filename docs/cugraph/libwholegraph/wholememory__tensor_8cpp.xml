<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="wholememory__tensor_8cpp" kind="file" language="C++">
    <compoundname>wholememory_tensor.cpp</compoundname>
    <includes refid="wholememory__tensor_8h" local="yes">wholememory/wholememory_tensor.h</includes>
    <includes local="no">atomic</includes>
    <includes local="no">cstdlib</includes>
    <includes refid="logger_8hpp" local="yes">logger.hpp</includes>
    <incdepgraph>
      <node id="11">
        <label>atomic</label>
      </node>
      <node id="18">
        <label>raft/core/error.hpp</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="17">
        <label>cassert</label>
      </node>
      <node id="6">
        <label>wholememory/wholememory.h</label>
        <link refid="wholememory_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="14">
        <label>cstdarg</label>
      </node>
      <node id="10">
        <label>stddef.h</label>
      </node>
      <node id="13">
        <label>logger.hpp</label>
        <link refid="logger_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>error.hpp</label>
        <link refid="error_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>unistd.h</label>
      </node>
      <node id="1">
        <label>src/wholememory/wholememory_tensor.cpp</label>
        <link refid="wholememory__tensor_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>wholememory/wholememory_tensor.h</label>
        <link refid="wholememory__tensor_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cstdlib</label>
      </node>
      <node id="15">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>wholememory/global_reference.h</label>
        <link refid="global__reference_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>wholememory/tensor_description.h</label>
        <link refid="tensor__description_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structwholememory__tensor__" prot="public">wholememory_tensor_</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a6136249a6b9bbf8ead4466e5632be518" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void inc_tensor_count</definition>
        <argsstring>()</argsstring>
        <name>inc_tensor_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="29" column="13" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1ae9833395d8f3a2689b339c83bb95b49a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dec_tensor_count</definition>
        <argsstring>()</argsstring>
        <name>dec_tensor_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="30" column="13" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1ac650758ee887413ee32d9ee182fdbc57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>static int64_t get_tensor_count</definition>
        <argsstring>()</argsstring>
        <name>get_tensor_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="31" column="16" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a66284801c376eb593b502a5818d5b12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t get_wholememory_tensor_count</definition>
        <argsstring>()</argsstring>
        <name>get_wholememory_tensor_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="49" column="9" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1ab8dc17b9a99cbe33e1d3f1b49ad5258b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_create_tensor</definition>
        <argsstring>(wholememory_tensor_t *p_wholememory_tensor, wholememory_tensor_description_t *tensor_description, wholememory_comm_t comm, wholememory_memory_type_t memory_type, wholememory_memory_location_t memory_location)</argsstring>
        <name>wholememory_create_tensor</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>wholememory_tensor</declname>
          <defname>p_wholememory_tensor</defname>
        </param>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>tensor_description</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a072bd5462591f49775a4a183e34b800d" kindref="member">wholememory_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a58cc0d50d4f407e416d73b7a806aff50" kindref="member">wholememory_memory_type_t</ref></type>
          <declname>memory_type</declname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1aaab2c1ef14fcbfffce91ce5856c5d9fe" kindref="member">wholememory_memory_location_t</ref></type>
          <declname>memory_location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: returned WholeMemory Tensor handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: description of the WholeMemory Tensor, should be 1-D or 2-D continuous tensor without offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Communicator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_type</parametername>
</parameternamelist>
<parameterdescription>
<para>: Memory Type of the underlying WholeMemory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_location</parametername>
</parameternamelist>
<parameterdescription>
<para>: Memory Location of the underlying WholeMemory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="51" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="51" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a6358b3b4a8b37c3172814e3a1c9a4d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_destroy_tensor</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_destroy_tensor</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="107" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="107" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a5b39fea1eb1b697400553ec49e26f758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_make_tensor_from_pointer</definition>
        <argsstring>(wholememory_tensor_t *p_wholememory_tensor, void *storage_ptr, wholememory_tensor_description_t *tensor_description)</argsstring>
        <name>wholememory_make_tensor_from_pointer</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>wholememory_tensor</declname>
          <defname>p_wholememory_tensor</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>storage_ptr</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>tensor_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make WholeMemory Tensor from local memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: returned WholeMemory Tensor handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to underlying storage memory. Note: storage pointer may be not same as data pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: description of the WholeMemory Tensor, should be 1-D or 2-D </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="121" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="121" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a5a6a117a6a1cd80f8f010ebb70f855e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_make_tensor_from_handle</definition>
        <argsstring>(wholememory_tensor_t *p_wholememory_tensor, wholememory_handle_t wholememory_handle, wholememory_tensor_description_t *tensor_description)</argsstring>
        <name>wholememory_make_tensor_from_handle</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>wholememory_tensor</declname>
          <defname>p_wholememory_tensor</defname>
        </param>
        <param>
          <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
          <declname>wholememory_handle</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>tensor_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make WholeMemory Tensor from local memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: returned WholeMemory Tensor handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wholememory_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: description of the WholeMemory Tensor, should be 1-D or 2-D </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="167" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="167" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a8fd657162127ed32802f94e1b2ed348e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory_tensor_has_handle</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_has_handle</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if has WholeMemory Handle, WholeMemory Tensor created by wholememory_make_tensor has no Handle <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: if has WholeMemory Handle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="201" column="6" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a098f2402daf29568bfb6678ef0a7eb5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a01ef3ce8ec989cb313a386a942e08e12" kindref="member">wholememory_handle_t</ref></type>
        <definition>wholememory_handle_t wholememory_tensor_get_memory_handle</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_memory_handle</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get WholeMemory handle from WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: WholeMemory handle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="206" column="22" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="206" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1ae345b249eb4bac62cf8232e3d856f510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
        <definition>wholememory_tensor_description_t* wholememory_tensor_get_tensor_description</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_tensor_description</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get tensor description from WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: pointer to the underlying <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="212" column="34" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="212" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a8de28a7ba7471883ba38b8ca33ed5001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_tensor_get_global_reference</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor, wholememory_gref_t *wholememory_gref)</argsstring>
        <name>wholememory_tensor_get_global_reference</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__gref__t" kindref="compound">wholememory_gref_t</ref> *</type>
          <declname>wholememory_gref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get global reference from WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wholememory_gref</parametername>
</parameternamelist>
<parameterdescription>
<para>: global reference </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="218" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="218" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1abe9ddf0d6119f5eba3680de07166c681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_tensor_map_local_tensor</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor, wholememory_tensor_t *local_tensor)</argsstring>
        <name>wholememory_tensor_map_local_tensor</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>local_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map local tensor of WholeMemory Tensor. Only support 1D and 2D tensor with WholeMemory Handle. For 1D tensor, storage_offset should be 0 For 2D tensor, storage_offset + size[1] should &lt;= stride[0]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: returned local tensor, need to be destroyed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="233" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="233" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a3f5f9937591864246e0673b0a0cf8db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* wholememory_tensor_get_data_pointer</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_data_pointer</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get data pointer from WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Pointer to first data for CONTINUOUS WholeMemory or not WholeMemory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="278" column="6" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="278" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a1fa16f060cc12d88ce8b495f62c3f310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wholememory_tensor_get_entry_per_partition</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_entry_per_partition</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get entry count per rank of a WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: entry count per rank </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="300" column="8" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="300" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a624f570b87c5dced505fd26ffcc0b55d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref></type>
        <definition>wholememory_error_code_t wholememory_tensor_get_subtensor</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor, int64_t *starts, int64_t *ends, wholememory_tensor_t *p_sub_wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_subtensor</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>starts</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>ends</declname>
        </param>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref> *</type>
          <declname>sub_wholememory_tensor</declname>
          <defname>p_sub_wholememory_tensor</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get sub tensor of a WholeMemory Tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>starts</parametername>
</parameternamelist>
<parameterdescription>
<para>: starts of each dim, length should be the dim of wholememory_tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ends</parametername>
</parameternamelist>
<parameterdescription>
<para>: ends of each dim, length should be the dim of wholememory_tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to returned sub tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: wholememory_error_code_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="332" column="26" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="332" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="wholememory__tensor_8cpp_1a02313ba65cd384d3c91d5190f94ec992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
        <definition>wholememory_tensor_t wholememory_tensor_get_root</definition>
        <argsstring>(wholememory_tensor_t wholememory_tensor)</argsstring>
        <name>wholememory_tensor_get_root</name>
        <param>
          <type><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref></type>
          <declname>wholememory_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get root tensor of a WholeMemory Tensor, root means it is not a sub tensor of any WholeMemory Tensor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholememory_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>: WholeMemory Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: the root of current WholeMemory tensor, maybe same as wholememory_tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wholememory/wholememory_tensor.cpp" line="386" column="22" bodyfile="src/wholememory/wholememory_tensor.cpp" bodystart="386" bodyend="389"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wholememory__tensor_8h" kindref="compound">wholememory/wholememory_tensor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8hpp" kindref="compound">logger.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WM_TENSOR_COUNT_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::atomic&lt;int64_t&gt;<sp/>wm_tensor_count;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc_tensor_count()<sp/>{<sp/>wm_tensor_count.fetch_add(1);<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dec_tensor_count()<sp/>{<sp/>wm_tensor_count.fetch_add(-1);<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>get_tensor_count()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wm_tensor_count.load();<sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc_tensor_count()<sp/>{}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dec_tensor_count()<sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>get_tensor_count()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">wholememory_tensor_<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwholememory__handle__" kindref="compound">wholememory_handle_t</ref><sp/>wholememory_handle;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>storage_ptr;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref><sp/>tensor_description;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>root_tensor;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_wholememory;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>own_handle;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">int64_t<sp/><ref refid="wholememory__tensor_8cpp_1a66284801c376eb593b502a5818d5b12e" kindref="member">get_wholememory_tensor_count</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_tensor_count();<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8cpp_1ab8dc17b9a99cbe33e1d3f1b49ad5258b" kindref="member">wholememory_create_tensor</ref>(</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>p_wholememory_tensor,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>tensor_description,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__comm__" kindref="compound">wholememory_comm_t</ref><sp/>comm,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="wholememory_8h_1a58cc0d50d4f407e416d73b7a806aff50" kindref="member">wholememory_memory_type_t</ref><sp/>memory_type,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="wholememory_8h_1aaab2c1ef14fcbfffce91ce5856c5d9fe" kindref="member">wholememory_memory_location_t</ref><sp/>memory_location)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_wholememory_tensor<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;p_wholememory_tensor<sp/>is<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description<sp/>is<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref><sp/>&lt;=<sp/>0<sp/>||<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref><sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description-&gt;dim=%d&quot;</highlight><highlight class="normal">,<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a4ce5c16c13bcc1bb742b3527c818ab65" kindref="member">storage_offset</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description-&gt;storage_offset=%ld&quot;</highlight><highlight class="normal">,<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a4ce5c16c13bcc1bb742b3527c818ab65" kindref="member">storage_offset</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a6a4a4d548e44c32a10e96f78c450f3e8" kindref="member">strides</ref>[dim<sp/>-<sp/>1]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description-&gt;strides[dim<sp/>-<sp/>1]&quot;</highlight><highlight class="normal">,<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a6a4a4d548e44c32a10e96f78c450f3e8" kindref="member">strides</ref>[dim<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" kindref="member">dtype</ref><sp/>&lt;=<sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca660302ea0e9c9b953cd20e96f170d78f" kindref="member">WHOLEMEMORY_DT_UNKNOWN</ref><sp/>||</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" kindref="member">dtype</ref><sp/>&gt;=<sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca6198ec382f0e25f11668ac8ba9456125" kindref="member">WHOLEMEMORY_DT_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description<sp/>is<sp/>unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elt_count<sp/><sp/><sp/>=<sp/><ref refid="tensor__description_8h_1a42c858c711aea6b50a494bb57a542568" kindref="member">wholememory_get_memory_element_count_from_tensor</ref>(tensor_description);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elt_size<sp/><sp/><sp/><sp/>=<sp/><ref refid="tensor__description_8h_1a1283f01dec368463825a17645e13169e" kindref="member">wholememory_dtype_get_element_size</ref>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" kindref="member">dtype</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>malloc_size<sp/>=<sp/>elt_count<sp/>*<sp/>elt_size;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>granularity<sp/>=<sp/>elt_size<sp/>*<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a6a4a4d548e44c32a10e96f78c450f3e8" kindref="member">strides</ref>[0];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>wholememory_tensor<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">wholememory_tensor_*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wholememory_tensor_)));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;tensor_description<sp/>=<sp/>*tensor_description;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;own_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;is_wholememory<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;root_tensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_tensor;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>*p_wholememory_tensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_tensor;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret_code<sp/>=<sp/><ref refid="wholememory_8h_1a0cee72a10bd01876c3858160bfbc21be" kindref="member">wholememory_malloc</ref>(&amp;wholememory_tensor-&gt;wholememory_handle,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc_size,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_type,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_location,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>granularity);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>inc_tensor_count();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret_code<sp/>!=<sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2af2acb13945f12e60c989bc7e7d433fba" kindref="member">WHOLEMEMORY_SUCCESS</ref>)<sp/>{<sp/>free(wholememory_tensor);<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret_code;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8cpp_1a6358b3b4a8b37c3172814e3a1c9a4d0d" kindref="member">wholememory_destroy_tensor</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wholememory_tensor-&gt;own_handle)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wholememory_tensor-&gt;is_wholememory)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wholememory_8h_1a5502d912a6793c7600a87a241798cf43" kindref="member">WHOLEMEMORY_RETURN_ON_FAIL</ref>(<ref refid="wholememory_8h_1adbfde0ef9e47f01898165a11e54be310" kindref="member">wholememory_free</ref>(wholememory_tensor-&gt;wholememory_handle));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(wholememory_tensor-&gt;storage_ptr);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>dec_tensor_count();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>free(wholememory_tensor);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2af2acb13945f12e60c989bc7e7d433fba" kindref="member">WHOLEMEMORY_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8cpp_1a5b39fea1eb1b697400553ec49e26f758" kindref="member">wholememory_make_tensor_from_pointer</ref>(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>p_wholememory_tensor,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>storage_ptr,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>tensor_description)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(storage_ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>wholememory_tensor<sp/>=</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">wholememory_tensor_*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wholememory_tensor_)));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;storage_ptr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>storage_ptr;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;tensor_description<sp/>=<sp/>*tensor_description;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;own_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;is_wholememory<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;root_tensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_tensor;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>*p_wholememory_tensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_tensor;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_tensor_count();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2af2acb13945f12e60c989bc7e7d433fba" kindref="member">WHOLEMEMORY_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_wholememory_tensor<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>tensor_description<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description-&gt;dim=%d&quot;</highlight><highlight class="normal">,<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a6a4a4d548e44c32a10e96f78c450f3e8" kindref="member">strides</ref>[dim<sp/>-<sp/>1]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description-&gt;strides[dim<sp/>-<sp/>1]&quot;</highlight><highlight class="normal">,<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a6a4a4d548e44c32a10e96f78c450f3e8" kindref="member">strides</ref>[dim<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" kindref="member">dtype</ref><sp/>&lt;=<sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca660302ea0e9c9b953cd20e96f170d78f" kindref="member">WHOLEMEMORY_DT_UNKNOWN</ref><sp/>||</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" kindref="member">dtype</ref><sp/>&gt;=<sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca6198ec382f0e25f11668ac8ba9456125" kindref="member">WHOLEMEMORY_DT_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description<sp/>is<sp/>unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>wholememory_tensor<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">wholememory_tensor_*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wholememory_tensor_)));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;storage_ptr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>storage_ptr;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;tensor_description<sp/>=<sp/>*tensor_description;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;own_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;is_wholememory<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;root_tensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_tensor;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>*p_wholememory_tensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_tensor;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>inc_tensor_count();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2af2acb13945f12e60c989bc7e7d433fba" kindref="member">WHOLEMEMORY_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8cpp_1a5a6a117a6a1cd80f8f010ebb70f855e5" kindref="member">wholememory_make_tensor_from_handle</ref>(</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>p_wholememory_tensor,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__handle__" kindref="compound">wholememory_handle_t</ref><sp/>wholememory_handle,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>tensor_description)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wholememory_handle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>p_wholememory_tensor<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tensor_description<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref><sp/>&lt;=<sp/>0<sp/>||<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref><sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description-&gt;dim=%d&quot;</highlight><highlight class="normal">,<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a6a4a4d548e44c32a10e96f78c450f3e8" kindref="member">strides</ref>[dim<sp/>-<sp/>1]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description-&gt;strides[dim<sp/>-<sp/>1]&quot;</highlight><highlight class="normal">,<sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a6a4a4d548e44c32a10e96f78c450f3e8" kindref="member">strides</ref>[dim<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" kindref="member">dtype</ref><sp/>&lt;=<sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca660302ea0e9c9b953cd20e96f170d78f" kindref="member">WHOLEMEMORY_DT_UNKNOWN</ref><sp/>||</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tensor_description-&gt;<ref refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" kindref="member">dtype</ref><sp/>&gt;=<sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca6198ec382f0e25f11668ac8ba9456125" kindref="member">WHOLEMEMORY_DT_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8hpp_1a34c74df9f1821c923aad87bc826c78d6" kindref="member">WHOLEMEMORY_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;tensor_description<sp/>is<sp/>unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>wholememory_tensor<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">wholememory_tensor_*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wholememory_tensor_)));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;wholememory_handle<sp/>=<sp/>wholememory_handle;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;tensor_description<sp/>=<sp/>*tensor_description;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;own_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;is_wholememory<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>wholememory_tensor-&gt;root_tensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_tensor;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>*p_wholememory_tensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_tensor;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>inc_tensor_count();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2af2acb13945f12e60c989bc7e7d433fba" kindref="member">WHOLEMEMORY_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="wholememory__tensor_8cpp_1a8fd657162127ed32802f94e1b2ed348e" kindref="member">wholememory_tensor_has_handle</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wholememory_tensor-&gt;is_wholememory;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><ref refid="structwholememory__handle__" kindref="compound">wholememory_handle_t</ref><sp/><ref refid="wholememory__tensor_8cpp_1a098f2402daf29568bfb6678ef0a7eb5f" kindref="member">wholememory_tensor_get_memory_handle</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wholememory_tensor-&gt;is_wholememory)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wholememory_tensor-&gt;wholememory_handle;<sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/><ref refid="wholememory__tensor_8cpp_1ae345b249eb4bac62cf8232e3d856f510" kindref="member">wholememory_tensor_get_tensor_description</ref>(</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;wholememory_tensor-&gt;tensor_description;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8cpp_1a8de28a7ba7471883ba38b8ca33ed5001" kindref="member">wholememory_tensor_get_global_reference</ref>(</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor,<sp/><ref refid="structwholememory__gref__t" kindref="compound">wholememory_gref_t</ref>*<sp/>wholememory_gref)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wholememory_gref<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>wholememory_tensor<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wholememory_tensor-&gt;is_wholememory)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a689f1bb462495115850e4421e264a14a" kindref="member">wholememory_get_global_reference</ref>(wholememory_gref,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;wholememory_handle);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>*wholememory_gref<sp/>=</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="global__reference_8h_1a40c21fb55adbaf930c8bb24c2639d006" kindref="member">wholememory_create_continuous_global_reference</ref>(wholememory_tensor-&gt;storage_ptr);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2af2acb13945f12e60c989bc7e7d433fba" kindref="member">WHOLEMEMORY_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8cpp_1abe9ddf0d6119f5eba3680de07166c681" kindref="member">wholememory_tensor_map_local_tensor</ref>(</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor,<sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>local_tensor)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>wholememory_tensor<sp/>should<sp/>NOT<sp/>skip<sp/>entry<sp/>from<sp/>front,<sp/>but<sp/>can<sp/>skip<sp/>from<sp/>tail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(local_tensor<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>wholememory_tensor<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wholememory_tensor-&gt;is_wholememory)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a485ecd2b76892b86eaeaa28163e4a5c7" kindref="member">WHOLEMEMORY_INVALID_VALUE</ref>;<sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>wm_desc<sp/>=<sp/><ref refid="wholememory__tensor_8cpp_1ae345b249eb4bac62cf8232e3d856f510" kindref="member">wholememory_tensor_get_tensor_description</ref>(wholememory_tensor);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wm_desc-&gt;dim<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>wm_desc-&gt;dim<sp/>!=<sp/>2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a485ecd2b76892b86eaeaa28163e4a5c7" kindref="member">WHOLEMEMORY_INVALID_VALUE</ref>;<sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wm_desc-&gt;dim<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>wm_desc-&gt;storage_offset<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a485ecd2b76892b86eaeaa28163e4a5c7" kindref="member">WHOLEMEMORY_INVALID_VALUE</ref>;<sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wm_desc-&gt;dim<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>wm_desc-&gt;storage_offset<sp/>+<sp/>wm_desc-&gt;sizes[1]<sp/>&gt;<sp/>wm_desc-&gt;strides[0])<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a485ecd2b76892b86eaeaa28163e4a5c7" kindref="member">WHOLEMEMORY_INVALID_VALUE</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__comm__" kindref="compound">wholememory_comm_t</ref><sp/>wm_comm;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="communicator_8hpp_1a0be0ed3102aab1d72782301d75cf570b" kindref="member">world_rank</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>local_ptr;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>local_size,<sp/>local_offset;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>handle<sp/>=<sp/><ref refid="wholememory__tensor_8cpp_1a098f2402daf29568bfb6678ef0a7eb5f" kindref="member">wholememory_tensor_get_memory_handle</ref>(wholememory_tensor);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="wholememory_8h_1a5502d912a6793c7600a87a241798cf43" kindref="member">WHOLEMEMORY_RETURN_ON_FAIL</ref>(<ref refid="wholememory_8h_1a399699aa55ec434ea8fe89d2b7bf6832" kindref="member">wholememory_get_communicator</ref>(&amp;wm_comm,<sp/>handle));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><ref refid="wholememory_8h_1a5502d912a6793c7600a87a241798cf43" kindref="member">WHOLEMEMORY_RETURN_ON_FAIL</ref>(<ref refid="wholememory_8h_1a53c06d095720e32fd22c2de3cb78952a" kindref="member">wholememory_communicator_get_rank</ref>(&amp;<ref refid="communicator_8hpp_1a0be0ed3102aab1d72782301d75cf570b" kindref="member">world_rank</ref>,<sp/>wm_comm));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_handle_memory_size<sp/>=<sp/><ref refid="wholememory_8h_1a03e67a7e6ee0c56163867d8574c5a3a8" kindref="member">wholememory_get_total_size</ref>(handle);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="wholememory_8h_1a5502d912a6793c7600a87a241798cf43" kindref="member">WHOLEMEMORY_RETURN_ON_FAIL</ref>(</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="wholememory_8h_1ab7b1ac02e48fd518d5ab9846f888c459" kindref="member">wholememory_get_local_memory</ref>(&amp;local_ptr,<sp/>&amp;local_size,<sp/>&amp;local_offset,<sp/>handle));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>element_size<sp/>=<sp/><ref refid="tensor__description_8h_1a1283f01dec368463825a17645e13169e" kindref="member">wholememory_dtype_get_element_size</ref>(wm_desc-&gt;dtype);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gran_size<sp/><sp/><sp/><sp/>=<sp/>wm_desc-&gt;dim<sp/>==<sp/>1<sp/>?<sp/>element_size<sp/>:<sp/>element_size<sp/>*<sp/>wm_desc-&gt;strides[0];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_per_rank;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="wholememory_8h_1a5502d912a6793c7600a87a241798cf43" kindref="member">WHOLEMEMORY_RETURN_ON_FAIL</ref>(<ref refid="wholememory_8h_1a9e5aba2c332624e97cacc8950350547f" kindref="member">wholememory_get_partition_plan</ref>(&amp;size_per_rank,<sp/>handle));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(size_per_rank<sp/>%<sp/>gran_size<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>entry_per_rank<sp/>=<sp/>size_per_rank<sp/>/<sp/>gran_size;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>int64_t<sp/>local_start<sp/><sp/><sp/>=<sp/>std::min&lt;int64_t&gt;(entry_per_rank<sp/>*<sp/><ref refid="communicator_8hpp_1a0be0ed3102aab1d72782301d75cf570b" kindref="member">world_rank</ref>,<sp/>wm_desc-&gt;sizes[0]);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>int64_t<sp/>local_end<sp/><sp/><sp/><sp/><sp/>=<sp/>std::min&lt;int64_t&gt;(entry_per_rank<sp/>*<sp/>(<ref refid="communicator_8hpp_1a0be0ed3102aab1d72782301d75cf570b" kindref="member">world_rank</ref><sp/>+<sp/>1),<sp/>wm_desc-&gt;sizes[0]);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(local_size<sp/>%<sp/>gran_size<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a695f0de6a56652e7c04f91aa28e7d1ce" kindref="member">WHOLEMEMORY_LOGIC_ERROR</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref><sp/>local_desc<sp/>=<sp/>*wm_desc;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>local_desc.sizes[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>local_size<sp/>/<sp/>gran_size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>local_desc.<ref refid="structwholememory__tensor__description__t_1a2a1f59a8ba93575af4017de3d33d2925" kindref="member">sizes</ref>[0]<sp/>=<sp/>(local_end<sp/>-<sp/>local_start);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="wholememory_8h_1a5502d912a6793c7600a87a241798cf43" kindref="member">WHOLEMEMORY_RETURN_ON_FAIL</ref>(</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="wholememory__tensor_8cpp_1a5b39fea1eb1b697400553ec49e26f758" kindref="member">wholememory_make_tensor_from_pointer</ref>(local_tensor,<sp/>local_ptr,<sp/>&amp;local_desc));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2af2acb13945f12e60c989bc7e7d433fba" kindref="member">WHOLEMEMORY_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="wholememory__tensor_8cpp_1a3f5f9937591864246e0673b0a0cf8db2" kindref="member">wholememory_tensor_get_data_pointer</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wholememory_tensor-&gt;is_wholememory<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wholememory_8h_1a502d8b806342b9a8b50fde1eeeb9321f" kindref="member">wholememory_get_memory_type</ref>(wholememory_tensor-&gt;wholememory_handle)<sp/>!=</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wholememory_8h_1a58cc0d50d4f407e416d73b7a806aff50a4c6ff55ce83b298a2945868ed19431c9" kindref="member">WHOLEMEMORY_MT_CONTINUOUS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wholememory_tensor-&gt;is_wholememory)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>data_ptr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wholememory_tensor-&gt;storage_ptr);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="wholememory_8h_1aae935625f126a48d3e0a2ef5f424738d" kindref="member">wholememory_get_global_pointer</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;data_ptr),</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;wholememory_handle)<sp/>!=</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2af2acb13945f12e60c989bc7e7d433fba" kindref="member">WHOLEMEMORY_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_ptr<sp/>+</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tensor__description_8h_1a1283f01dec368463825a17645e13169e" kindref="member">wholememory_dtype_get_element_size</ref>(wholememory_tensor-&gt;tensor_description.dtype)<sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;tensor_description.storage_offset;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="wholememory__tensor_8cpp_1a1fa16f060cc12d88ce8b495f62c3f310" kindref="member">wholememory_tensor_get_entry_per_partition</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>root_tensor<sp/>=<sp/><ref refid="wholememory__tensor_8cpp_1a02313ba65cd384d3c91d5190f94ec992" kindref="member">wholememory_tensor_get_root</ref>(wholememory_tensor);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>(root_tensor-&gt;tensor_description.dim<sp/>==<sp/>1<sp/>||<sp/>root_tensor-&gt;tensor_description.dim<sp/>==<sp/>2));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wholememory_tensor-&gt;is_wholememory)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_per_rank;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="wholememory_8h_1a9e5aba2c332624e97cacc8950350547f" kindref="member">wholememory_get_partition_plan</ref>(&amp;size_per_rank,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wholememory__tensor_8cpp_1a098f2402daf29568bfb6678ef0a7eb5f" kindref="member">wholememory_tensor_get_memory_handle</ref>(root_tensor));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>embedding_stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>element_size<sp/>=</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tensor__description_8h_1a1283f01dec368463825a17645e13169e" kindref="member">wholememory_dtype_get_element_size</ref>(wholememory_tensor-&gt;tensor_description.dtype);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root_tensor-&gt;tensor_description.dim<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>embedding_stride<sp/>=<sp/>root_tensor-&gt;tensor_description.strides[0];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(size_per_rank<sp/>%<sp/>(embedding_stride<sp/>*<sp/>element_size)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>det_entry_per_rank;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="communicator_8hpp_1ab8411355a7d80016be6edcce3437b978" kindref="member">world_size</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwholememory__comm__" kindref="compound">wholememory_comm_t</ref><sp/>comm;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="wholememory_8h_1a5502d912a6793c7600a87a241798cf43" kindref="member">WHOLEMEMORY_RETURN_ON_FAIL</ref>(<ref refid="wholememory_8h_1a399699aa55ec434ea8fe89d2b7bf6832" kindref="member">wholememory_get_communicator</ref>(</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;comm,<sp/><ref refid="wholememory__tensor_8cpp_1a098f2402daf29568bfb6678ef0a7eb5f" kindref="member">wholememory_tensor_get_memory_handle</ref>(wholememory_tensor)));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="wholememory_8h_1a5502d912a6793c7600a87a241798cf43" kindref="member">WHOLEMEMORY_RETURN_ON_FAIL</ref>(<ref refid="wholememory_8h_1aa1aad91132568fe162864d821a47b5cc" kindref="member">wholememory_communicator_get_size</ref>(&amp;<ref refid="communicator_8hpp_1ab8411355a7d80016be6edcce3437b978" kindref="member">world_size</ref>,<sp/>comm));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="wholememory_8h_1a5502d912a6793c7600a87a241798cf43" kindref="member">WHOLEMEMORY_RETURN_ON_FAIL</ref>(<ref refid="wholememory_8h_1a5cae2d487f15ab98766f7b23a4ef8d1d" kindref="member">wholememory_determine_entry_partition_plan</ref>(</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;det_entry_per_rank,<sp/>root_tensor-&gt;tensor_description.sizes[0],<sp/><ref refid="communicator_8hpp_1ab8411355a7d80016be6edcce3437b978" kindref="member">world_size</ref>));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="error_8hpp_1a7a4ea726195a00d76b63f8ad3ce56d47" kindref="member">WHOLEMEMORY_CHECK_NOTHROW</ref>(det_entry_per_rank<sp/>==</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_per_rank<sp/>/<sp/>(embedding_stride<sp/>*<sp/>element_size));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>det_entry_per_rank;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>root_tensor-&gt;tensor_description.sizes[0];</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2" kindref="member">wholememory_error_code_t</ref><sp/><ref refid="wholememory__tensor_8cpp_1a624f570b87c5dced505fd26ffcc0b55d" kindref="member">wholememory_tensor_get_subtensor</ref>(</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>int64_t*<sp/>starts,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>int64_t*<sp/>ends,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref>*<sp/>p_sub_wholememory_tensor)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_sub_wholememory_tensor<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>wholememory_tensor<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>starts<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ends<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wholememory_tensor-&gt;tensor_description.dim<sp/>&gt;<sp/>2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a2b4b897ab5a9ba65a0cac0c6e168176c" kindref="member">WHOLEMEMORY_NOT_IMPLEMENTED</ref>;<sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wholememory_tensor-&gt;tensor_description.dim;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>int64_t<sp/>offsets[2]<sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets[0]<sp/>=<sp/>wholememory_tensor-&gt;tensor_description.storage_offset;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets[0]<sp/>=<sp/>wholememory_tensor-&gt;tensor_description.storage_offset<sp/>/</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;tensor_description.strides[0];</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets[1]<sp/>=<sp/>wholememory_tensor-&gt;tensor_description.storage_offset<sp/>%</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;tensor_description.strides[0];</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>int64_t<sp/>new_size[2]<sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>int64_t<sp/>new_offset<sp/><sp/>=<sp/>wholememory_tensor-&gt;tensor_description.storage_offset;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>starts_i<sp/>=<sp/>starts[i];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>ends_i<sp/><sp/><sp/>=<sp/>ends[i];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(starts[i]<sp/>==<sp/>-1)<sp/>starts_i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends[i]<sp/>==<sp/>-1)<sp/>ends_i<sp/>=<sp/>wholememory_tensor-&gt;tensor_description.sizes[i];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends_i<sp/>&lt;=<sp/>starts_i)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(starts_i<sp/>&gt;=<sp/>wholememory_tensor-&gt;tensor_description.sizes[i])</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends_i<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2a990f7a173a52060ada366cc817eb6da8" kindref="member">WHOLEMEMORY_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>new_offset<sp/>+=<sp/>wholememory_tensor-&gt;tensor_description.strides[i]<sp/>*<sp/>starts_i;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>new_size[i]<sp/>=<sp/>ends_i<sp/>-<sp/>starts_i;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>sub_wholememory_tensor<sp/>=</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">wholememory_tensor_*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wholememory_tensor_)));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>*sub_wholememory_tensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>*wholememory_tensor;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>sub_wholememory_tensor-&gt;own_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>sub_wholememory_tensor-&gt;tensor_description.storage_offset<sp/>=<sp/>new_offset;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>sub_wholememory_tensor-&gt;tensor_description.dim<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>sub_wholememory_tensor-&gt;tensor_description.dtype<sp/>=</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_wholememory_tensor-&gt;tensor_description.dtype;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_wholememory_tensor-&gt;tensor_description.sizes[i]<sp/>=<sp/>new_size[i];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_wholememory_tensor-&gt;tensor_description.strides[i]<sp/>=</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wholememory_tensor-&gt;tensor_description.strides[i];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>*p_sub_wholememory_tensor<sp/>=<sp/>sub_wholememory_tensor;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>inc_tensor_count();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="wholememory_8h_1a2ee1891c60edb29e6e88ee67c5f161a2af2acb13945f12e60c989bc7e7d433fba" kindref="member">WHOLEMEMORY_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/><ref refid="wholememory__tensor_8cpp_1a02313ba65cd384d3c91d5190f94ec992" kindref="member">wholememory_tensor_get_root</ref>(<ref refid="wholememory__tensor_8h_1a27285cc111a63f4203830dcdef17e1d9" kindref="member">wholememory_tensor_t</ref><sp/>wholememory_tensor)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wholememory_tensor-&gt;root_tensor;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/wholememory/wholememory_tensor.cpp"/>
  </compounddef>
</doxygen>
