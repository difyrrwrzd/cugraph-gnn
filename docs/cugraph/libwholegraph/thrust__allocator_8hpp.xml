<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="thrust__allocator_8hpp" kind="file" language="C++">
    <compoundname>thrust_allocator.hpp</compoundname>
    <includes local="no">map</includes>
    <includes refid="env__func__ptrs_8h" local="no">wholememory/env_func_ptrs.h</includes>
    <includedby refid="embedding_8cpp" local="yes">src/wholememory/embedding.cpp</includedby>
    <includedby refid="exchange__embeddings__nccl__func_8h" local="no">src/wholememory_ops/functions/exchange_embeddings_nccl_func.h</includedby>
    <includedby refid="exchange__ids__nccl__func_8h" local="no">src/wholememory_ops/functions/exchange_ids_nccl_func.h</includedby>
    <includedby refid="sort__indices__func_8h" local="no">src/wholememory_ops/functions/sort_indices_func.h</includedby>
    <includedby refid="thrust__allocator_8cpp" local="yes">src/wholememory_ops/thrust_allocator.cpp</includedby>
    <incdepgraph>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>map</label>
      </node>
      <node id="1">
        <label>src/wholememory_ops/thrust_allocator.hpp</label>
        <link refid="thrust__allocator_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>wholememory/env_func_ptrs.h</label>
        <link refid="env__func__ptrs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="5">
        <label>wholememory/tensor_description.h</label>
        <link refid="tensor__description_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/wholememory_ops/thrust_allocator.hpp</label>
        <link refid="thrust__allocator_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/wholememory/embedding.cpp</label>
        <link refid="embedding_8cpp"/>
      </node>
      <node id="5">
        <label>src/wholememory_ops/functions/sort_indices_func.h</label>
        <link refid="sort__indices__func_8h"/>
      </node>
      <node id="6">
        <label>src/wholememory_ops/thrust_allocator.cpp</label>
        <link refid="thrust__allocator_8cpp"/>
      </node>
      <node id="3">
        <label>src/wholememory_ops/functions/exchange_embeddings_nccl_func.h</label>
        <link refid="exchange__embeddings__nccl__func_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/wholememory_ops/functions/exchange_ids_nccl_func.h</label>
        <link refid="exchange__ids__nccl__func_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classwholememory__ops_1_1wm__thrust__allocator" prot="public">wholememory_ops::wm_thrust_allocator</innerclass>
    <innernamespace refid="namespacewholememory__ops">wholememory_ops</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="env__func__ptrs_8h" kindref="compound">wholememory/env_func_ptrs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacewholememory__ops" kindref="compound">wholememory_ops</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classwholememory__ops_1_1wm__thrust__allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classwholememory__ops_1_1wm__thrust__allocator" kindref="compound">wm_thrust_allocator</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="26" refid="classwholememory__ops_1_1wm__thrust__allocator_1a027398ad44435981b77d3c22d4b0ee32" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a027398ad44435981b77d3c22d4b0ee32" kindref="member">value_type</ref><sp/>=<sp/>char;</highlight></codeline>
<codeline lineno="27" refid="classwholememory__ops_1_1wm__thrust__allocator_1a49bb8f40216411f9ee1e46eda1b79e42" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a49bb8f40216411f9ee1e46eda1b79e42" kindref="member">wm_thrust_allocator</ref>(<ref refid="structwholememory__env__func__t" kindref="compound">wholememory_env_func_t</ref>*<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>)<sp/>:<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>(<ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="28" refid="classwholememory__ops_1_1wm__thrust__allocator_1a86115ea42a901f055894e3a1e6eb76ef" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a86115ea42a901f055894e3a1e6eb76ef" kindref="member">wm_thrust_allocator</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a990d9d8fd10d0a1367d6a11f15fced0c" kindref="member">~wm_thrust_allocator</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a027398ad44435981b77d3c22d4b0ee32" kindref="member">value_type</ref>*<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1ac314ba4dd1d32c6dcd7fdb3a9929fc15" kindref="member">allocate</ref>(std::ptrdiff_t<sp/>mem_size);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1aff16fd4109b14d99ee21f07b096dd33a" kindref="member">deallocate</ref>(<ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a027398ad44435981b77d3c22d4b0ee32" kindref="member">value_type</ref>*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mem_size);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a386bf8a6f43d6dd02d7900fa6015a013" kindref="member">deallocate_all</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__env__func__t" kindref="compound">wholememory_env_func_t</ref>*<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a4256cb33e46ca42f0e6c1e38b7ef8c3e" kindref="member">fns</ref>;</highlight></codeline>
<codeline lineno="36" refid="classwholememory__ops_1_1wm__thrust__allocator_1a890bc5f54b4ad072cb6e6351838d41ba" refkind="member"><highlight class="normal"><sp/><sp/>std::map&lt;value_type*,<sp/>void*&gt;<sp/><ref refid="classwholememory__ops_1_1wm__thrust__allocator_1a890bc5f54b4ad072cb6e6351838d41ba" kindref="member">mem_ptr_to_context_map</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>wholememory_ops</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/wholememory_ops/thrust_allocator.hpp"/>
  </compounddef>
</doxygen>
