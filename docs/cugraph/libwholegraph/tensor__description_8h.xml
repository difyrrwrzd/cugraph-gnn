<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="tensor__description_8h" kind="file" language="C++">
    <compoundname>tensor_description.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdlib.h</includes>
    <includedby refid="env__func__ptrs_8h" local="no">include/wholememory/env_func_ptrs.h</includedby>
    <includedby refid="wholememory__tensor_8h" local="no">include/wholememory/wholememory_tensor.h</includedby>
    <includedby refid="append__unique__impl_8h" local="no">src/graph_ops/append_unique_impl.h</includedby>
    <includedby refid="csr__add__self__loop__impl_8h" local="no">src/graph_ops/csr_add_self_loop_impl.h</includedby>
    <includedby refid="unweighted__sample__without__replacement__impl_8h" local="no">src/wholegraph_ops/unweighted_sample_without_replacement_impl.h</includedby>
    <includedby refid="weighted__sample__without__replacement__impl_8h" local="no">src/wholegraph_ops/weighted_sample_without_replacement_impl.h</includedby>
    <includedby refid="communicator_8cpp" local="no">src/wholememory/communicator.cpp</includedby>
    <includedby refid="communicator_8hpp" local="no">src/wholememory/communicator.hpp</includedby>
    <includedby refid="tensor__description_8cpp" local="no">src/wholememory/tensor_description.cpp</includedby>
    <includedby refid="bucket__ids__func_8h" local="no">src/wholememory_ops/functions/bucket_ids_func.h</includedby>
    <includedby refid="exchange__embeddings__nccl__func_8h" local="no">src/wholememory_ops/functions/exchange_embeddings_nccl_func.h</includedby>
    <includedby refid="exchange__ids__nccl__func_8h" local="no">src/wholememory_ops/functions/exchange_ids_nccl_func.h</includedby>
    <includedby refid="gather__cached__func_8h" local="no">src/wholememory_ops/functions/gather_cached_func.h</includedby>
    <includedby refid="gather__scatter__func_8h" local="no">src/wholememory_ops/functions/gather_scatter_func.h</includedby>
    <includedby refid="map__indices__func_8h" local="no">src/wholememory_ops/functions/map_indices_func.h</includedby>
    <includedby refid="sort__indices__func_8h" local="no">src/wholememory_ops/functions/sort_indices_func.h</includedby>
    <includedby refid="output__memory__handle_8hpp" local="no">src/wholememory_ops/output_memory_handle.hpp</includedby>
    <includedby refid="register_8hpp" local="no">src/wholememory_ops/register.hpp</includedby>
    <includedby refid="temp__memory__handle_8hpp" local="no">src/wholememory_ops/temp_memory_handle.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>include/wholememory/tensor_description.h</label>
        <link refid="tensor__description_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="48">
        <label>src/wholememory_ops/functions/gather_scatter_func.h</label>
        <link refid="gather__scatter__func_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/wholememory/embedding_optimizer.hpp</label>
        <link refid="embedding__optimizer_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>src/wholememory_ops/functions/bucket_ids_func.h</label>
        <link refid="bucket__ids__func_8h"/>
      </node>
      <node id="20">
        <label>src/graph_ops/append_unique_impl.h</label>
        <link refid="append__unique__impl_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>src/wholememory_ops/scatter_op.cpp</label>
        <link refid="scatter__op_8cpp"/>
      </node>
      <node id="13">
        <label>src/graph_ops/csr_add_self_loop.cpp</label>
        <link refid="csr__add__self__loop_8cpp"/>
      </node>
      <node id="11">
        <label>include/wholememory/graph_op.h</label>
        <link refid="graph__op_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/wholememory/embedding.hpp</label>
        <link refid="embedding_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>src/wholememory/communicator.hpp</label>
        <link refid="communicator_8hpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/wholememory/embedding_optimizer.cpp</label>
        <link refid="embedding__optimizer_8cpp"/>
      </node>
      <node id="25">
        <label>src/wholememory_ops/output_memory_handle.hpp</label>
        <link refid="output__memory__handle_8hpp"/>
      </node>
      <node id="36">
        <label>src/graph_ops/csr_add_self_loop_impl.h</label>
        <link refid="csr__add__self__loop__impl_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/wholememory/wholememory_op.h</label>
        <link refid="wholememory__op_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>src/wholememory_ops/functions/gather_cached_func.h</label>
        <link refid="gather__cached__func_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>src/wholememory_ops/thrust_allocator.hpp</label>
        <link refid="thrust__allocator_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/wholememory_ops/gather_op.cpp</label>
        <link refid="gather__op_8cpp"/>
      </node>
      <node id="2">
        <label>include/wholememory/env_func_ptrs.h</label>
        <link refid="env__func__ptrs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>src/wholememory_ops/functions/map_indices_func.h</label>
        <link refid="map__indices__func_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/wholememory/embedding.cpp</label>
        <link refid="embedding_8cpp"/>
      </node>
      <node id="42">
        <label>src/wholememory/memory_handle.cpp</label>
        <link refid="memory__handle_8cpp"/>
      </node>
      <node id="24">
        <label>src/wholememory/env_func_ptrs.cpp</label>
        <link refid="env__func__ptrs_8cpp"/>
      </node>
      <node id="33">
        <label>src/wholememory/wholememory_tensor.cpp</label>
        <link refid="wholememory__tensor_8cpp"/>
      </node>
      <node id="34">
        <label>src/wholememory_ops/functions/embedding_optimizer_func.h</label>
        <link refid="embedding__optimizer__func_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/wholememory/embedding_cache.cpp</label>
        <link refid="embedding__cache_8cpp"/>
      </node>
      <node id="45">
        <label>src/wholememory/tensor_description.cpp</label>
        <link refid="tensor__description_8cpp"/>
      </node>
      <node id="29">
        <label>src/wholememory_ops/functions/sort_indices_func.h</label>
        <link refid="sort__indices__func_8h"/>
      </node>
      <node id="31">
        <label>src/wholememory_ops/thrust_allocator.cpp</label>
        <link refid="thrust__allocator_8cpp"/>
      </node>
      <node id="22">
        <label>src/wholegraph_ops/weighted_sample_without_replacement_impl.h</label>
        <link refid="weighted__sample__without__replacement__impl_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>src/wholememory_ops/temp_memory_handle.hpp</label>
        <link refid="temp__memory__handle_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/graph_ops/append_unique.cpp</label>
        <link refid="append__unique_8cpp"/>
      </node>
      <node id="15">
        <label>src/wholegraph_ops/unweighted_sample_without_replacement.cpp</label>
        <link refid="unweighted__sample__without__replacement_8cpp"/>
      </node>
      <node id="39">
        <label>src/nvshmem_plugins/nvshmem_wholememory_bootstrap.cpp</label>
        <link refid="nvshmem__wholememory__bootstrap_8cpp"/>
      </node>
      <node id="3">
        <label>include/wholememory/embedding.h</label>
        <link refid="embedding_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>include/wholememory/wholememory_tensor.h</label>
        <link refid="wholememory__tensor_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/wholememory/wholegraph_op.h</label>
        <link refid="wholegraph__op_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>src/wholememory/memory_handle.hpp</label>
        <link refid="memory__handle_8hpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>src/wholememory/env_func_ptrs.hpp</label>
        <link refid="env__func__ptrs_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/wholememory_ops/functions/embedding_cache_func.h</label>
        <link refid="embedding__cache__func_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>src/wholegraph_ops/unweighted_sample_without_replacement_impl.h</label>
        <link refid="unweighted__sample__without__replacement__impl_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/wholememory/embedding_cache.hpp</label>
        <link refid="embedding__cache_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>src/wholememory_ops/register.hpp</label>
        <link refid="register_8hpp"/>
      </node>
      <node id="41">
        <label>src/wholememory/initialize.cpp</label>
        <link refid="initialize_8cpp"/>
      </node>
      <node id="1">
        <label>include/wholememory/tensor_description.h</label>
        <link refid="tensor__description_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>src/wholememory/wholememory.cpp</label>
        <link refid="wholememory_8cpp"/>
      </node>
      <node id="16">
        <label>src/wholegraph_ops/weighted_sample_without_replacement.cpp</label>
        <link refid="weighted__sample__without__replacement_8cpp"/>
      </node>
      <node id="27">
        <label>src/wholememory_ops/functions/exchange_embeddings_nccl_func.h</label>
        <link refid="exchange__embeddings__nccl__func_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>src/wholememory/file_io.cpp</label>
        <link refid="file__io_8cpp"/>
      </node>
      <node id="37">
        <label>src/wholememory/communicator.cpp</label>
        <link refid="communicator_8cpp"/>
      </node>
      <node id="28">
        <label>src/wholememory_ops/functions/exchange_ids_nccl_func.h</label>
        <link refid="exchange__ids__nccl__func_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structwholememory__array__description__t" prot="public">wholememory_array_description_t</innerclass>
    <innerclass refid="structwholememory__matrix__description__t" prot="public">wholememory_matrix_description_t</innerclass>
    <innerclass refid="structwholememory__tensor__description__t" prot="public">wholememory_tensor_description_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="tensor__description_8h_1aab2708854fc964fe383d730c8979f8fa" prot="public" static="no">
        <name>WHOLEMEMORY_MAX_TENSOR_DIM</name>
        <initializer>(8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="86" column="9" bodyfile="include/wholememory/tensor_description.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" prot="public" static="no" strong="no">
        <type></type>
        <name>wholememory_dtype_t</name>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca660302ea0e9c9b953cd20e96f170d78f" prot="public">
          <name>WHOLEMEMORY_DT_UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unknown type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca8fc99da34693be9e062833242c27d6ec" prot="public">
          <name>WHOLEMEMORY_DT_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit float type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca21c33803cd2286859e642bfcc76e0c53" prot="public">
          <name>WHOLEMEMORY_DT_HALF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit half float type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca690ba24decf00c023dba03826a296193" prot="public">
          <name>WHOLEMEMORY_DT_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit double type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca099d083a74b36954ffa53074d982c64b" prot="public">
          <name>WHOLEMEMORY_DT_BF16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit bfloat type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cae4485215773ac9d733555c7119002e52" prot="public">
          <name>WHOLEMEMORY_DT_INT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit signed integer type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cad544b558c31c88cf2977614e34ace0d5" prot="public">
          <name>WHOLEMEMORY_DT_INT64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit signed integer type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cae63ed5b24aa79279081568835a6ed649" prot="public">
          <name>WHOLEMEMORY_DT_INT16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit signed integer type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5caab26b36067528d88560b9ec98cf4c2cf" prot="public">
          <name>WHOLEMEMORY_DT_INT8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit signed integer type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca6198ec382f0e25f11668ac8ba9456125" prot="public">
          <name>WHOLEMEMORY_DT_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>total count if types </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>defines WholeMemory data type for tensors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="29" column="1" bodyfile="include/wholememory/tensor_description.h" bodystart="29" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tensor__description_8h_1a1283f01dec368463825a17645e13169e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wholememory_dtype_get_element_size</definition>
        <argsstring>(wholememory_dtype_t dtype)</argsstring>
        <name>wholememory_dtype_get_element_size</name>
        <param>
          <type><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref></type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get element size of wholememory_dtype_t <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>: wholememory_dtype_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: element size of dtype, -1 on invalid dtype. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="47" column="8" bodyfile="src/wholememory/tensor_description.cpp" bodystart="22" bodyend="36" declfile="include/wholememory/tensor_description.h" declline="47" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1ac8f6885877895e0d08ee49ac1cbeccbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory_dtype_is_floating_number</definition>
        <argsstring>(wholememory_dtype_t dtype)</argsstring>
        <name>wholememory_dtype_is_floating_number</name>
        <param>
          <type><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref></type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if dtype is floating number <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>: wholememory_dtype_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: True if dtype is WHOLEMEMORY_DT_FLOAT, WHOLEMEMORY_DT_HALF, WHOLEMEMORY_DT_DOUBLE or WHOLEMEMORY_DT_BF16. False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="55" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="38" bodyend="44" declfile="include/wholememory/tensor_description.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a95d71635154e5aac8a984f1782615ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory_dtype_is_integer_number</definition>
        <argsstring>(wholememory_dtype_t dtype)</argsstring>
        <name>wholememory_dtype_is_integer_number</name>
        <param>
          <type><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref></type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if dtype is integer number <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>: wholememory_dtype_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: True if dtype is WHOLEMEMORY_DT_INT, WHOLEMEMORY_DT_INT64, WHOLEMEMORY_DT_INT16 or WHOLEMEMORY_DT_INT8, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="63" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="46" bodyend="52" declfile="include/wholememory/tensor_description.h" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a9f379e63f1116573712c47a9fded9867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref></type>
        <definition>wholememory_array_description_t wholememory_create_array_desc</definition>
        <argsstring>(int64_t size, int64_t storage_offset, wholememory_dtype_t dtype)</argsstring>
        <name>wholememory_create_array_desc</name>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>storage_offset</declname>
        </param>
        <param>
          <type><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref></type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create <ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref> object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: array size in number of elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: storage offset in number of elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>: data type of array elements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>created <ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="108" column="33" bodyfile="src/wholememory/tensor_description.cpp" bodystart="54" bodyend="63" declfile="include/wholememory/tensor_description.h" declline="108" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1ac22ee763259c4865d5ec16a2ec34af62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref></type>
        <definition>wholememory_matrix_description_t wholememory_create_matrix_desc</definition>
        <argsstring>(int64_t sizes[2], int64_t stride, int64_t storage_offset, wholememory_dtype_t dtype)</argsstring>
        <name>wholememory_create_matrix_desc</name>
        <param>
          <type>int64_t</type>
          <declname>sizes</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>int64_t</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>storage_offset</declname>
        </param>
        <param>
          <type><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref></type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create <ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref> object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: matrix sizes array, counted in number of elements, sizes[1] changes fastest. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>: stride of first dimension(slower changed dimension), stride is counted in number of elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: storage offset in number of elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>: data type of matrix elements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>created <ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="121" column="34" bodyfile="src/wholememory/tensor_description.cpp" bodystart="65" bodyend="77" declfile="include/wholememory/tensor_description.h" declline="121" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a98ad7a286797c238fa7974a32ac0c58a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory_initialize_tensor_desc</definition>
        <argsstring>(wholememory_tensor_description_t *p_tensor_description)</argsstring>
        <name>wholememory_initialize_tensor_desc</name>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>p_tensor_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>, set sizes and strides to all ones, and set storage_offset to 0, set dtype to WHOLEMEMORY_DT_UNKNOWN, set dim to 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="131" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="79" bodyend="88" declfile="include/wholememory/tensor_description.h" declline="131" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a1349e4d9b4d917597068b02f177e1aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory_copy_array_desc_to_matrix</definition>
        <argsstring>(wholememory_matrix_description_t *p_matrix_description, wholememory_array_description_t *p_array_description)</argsstring>
        <name>wholememory_copy_array_desc_to_matrix</name>
        <param>
          <type><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref> *</type>
          <declname>p_matrix_description</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref> *</type>
          <declname>p_array_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy array description to tensor description <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_matrix_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_array_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="138" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="90" bodyend="98" declfile="include/wholememory/tensor_description.h" declline="138" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a0018f4528d34d836e42630f6e8f088e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory_copy_array_desc_to_tensor</definition>
        <argsstring>(wholememory_tensor_description_t *p_tensor_description, wholememory_array_description_t *p_array_description)</argsstring>
        <name>wholememory_copy_array_desc_to_tensor</name>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>p_tensor_description</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref> *</type>
          <declname>p_array_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy array description to tensor description <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_array_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="146" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="100" bodyend="109" declfile="include/wholememory/tensor_description.h" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1af2eef6741c9e7e40c4ea740f512f23dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wholememory_copy_matrix_desc_to_tensor</definition>
        <argsstring>(wholememory_tensor_description_t *p_tensor_description, wholememory_matrix_description_t *p_matrix_description)</argsstring>
        <name>wholememory_copy_matrix_desc_to_tensor</name>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>p_tensor_description</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref> *</type>
          <declname>p_matrix_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy matrix description to tensor description <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_matrix_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="154" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="111" bodyend="122" declfile="include/wholememory/tensor_description.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a4bd945e95a4bec4bc89251ed8827587f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory_convert_tensor_desc_to_array</definition>
        <argsstring>(wholememory_array_description_t *p_array_description, wholememory_tensor_description_t *p_tensor_description)</argsstring>
        <name>wholememory_convert_tensor_desc_to_array</name>
        <param>
          <type><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref> *</type>
          <declname>p_array_description</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>p_tensor_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert tensor description to array description <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_array_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Return true if convertible else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="162" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="124" bodyend="137" declfile="include/wholememory/tensor_description.h" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a4a1462d960e5272e54b6b349c0a9103d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory_convert_tensor_desc_to_matrix</definition>
        <argsstring>(wholememory_matrix_description_t *p_matrix_description, wholememory_tensor_description_t *p_tensor_description)</argsstring>
        <name>wholememory_convert_tensor_desc_to_matrix</name>
        <param>
          <type><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref> *</type>
          <declname>p_matrix_description</declname>
        </param>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>p_tensor_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert tensor description to matrix description <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_matrix_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Return true if convertible else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="172" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="139" bodyend="159" declfile="include/wholememory/tensor_description.h" declline="172" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a7ccb1c37ed3f815d4c97b480367e172f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t wholememory_get_memory_element_count_from_array</definition>
        <argsstring>(wholememory_array_description_t *p_array_description)</argsstring>
        <name>wholememory_get_memory_element_count_from_array</name>
        <param>
          <type><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref> *</type>
          <declname>p_array_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total element count from array description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_array_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Return element count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="181" column="9" bodyfile="src/wholememory/tensor_description.cpp" bodystart="161" bodyend="165" declfile="include/wholememory/tensor_description.h" declline="181" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a2f6022544969a1a512b92eac78a4d540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t wholememory_get_memory_size_from_array</definition>
        <argsstring>(wholememory_array_description_t *p_array_description)</argsstring>
        <name>wholememory_get_memory_size_from_array</name>
        <param>
          <type><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref> *</type>
          <declname>p_array_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total memory size from array description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_array_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Return memory size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="189" column="9" bodyfile="src/wholememory/tensor_description.cpp" bodystart="167" bodyend="171" declfile="include/wholememory/tensor_description.h" declline="189" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a472f4deff7fb87d90a5b0ad1a87208f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t wholememory_get_memory_element_count_from_matrix</definition>
        <argsstring>(wholememory_matrix_description_t *p_matrix_description)</argsstring>
        <name>wholememory_get_memory_element_count_from_matrix</name>
        <param>
          <type><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref> *</type>
          <declname>p_matrix_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total element count from matrix description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_matrix_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Return element count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="197" column="9" bodyfile="src/wholememory/tensor_description.cpp" bodystart="173" bodyend="177" declfile="include/wholememory/tensor_description.h" declline="197" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1ae8dad70c4b0ab44af5c14daeaaf3c598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t wholememory_get_memory_size_from_matrix</definition>
        <argsstring>(wholememory_matrix_description_t *p_matrix_description)</argsstring>
        <name>wholememory_get_memory_size_from_matrix</name>
        <param>
          <type><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref> *</type>
          <declname>p_matrix_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total memory size from matrix description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_matrix_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Return memory size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="205" column="9" bodyfile="src/wholememory/tensor_description.cpp" bodystart="179" bodyend="184" declfile="include/wholememory/tensor_description.h" declline="205" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a42c858c711aea6b50a494bb57a542568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t wholememory_get_memory_element_count_from_tensor</definition>
        <argsstring>(wholememory_tensor_description_t *p_tensor_description)</argsstring>
        <name>wholememory_get_memory_element_count_from_tensor</name>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>p_tensor_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total element count from tensor description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Return element count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="213" column="9" bodyfile="src/wholememory/tensor_description.cpp" bodystart="186" bodyend="193" declfile="include/wholememory/tensor_description.h" declline="213" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a1f9ecef913f2ca09c01cf5d0e87911aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t wholememory_get_memory_size_from_tensor</definition>
        <argsstring>(wholememory_tensor_description_t *p_tensor_description)</argsstring>
        <name>wholememory_get_memory_size_from_tensor</name>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>p_tensor_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total memory size from tensor description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Return memory size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="221" column="9" bodyfile="src/wholememory/tensor_description.cpp" bodystart="195" bodyend="200" declfile="include/wholememory/tensor_description.h" declline="221" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1ab48ae67f5f180a6ad0def499d37e1ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory_squeeze_tensor</definition>
        <argsstring>(wholememory_tensor_description_t *p_tensor_description, int dim)</argsstring>
        <name>wholememory_squeeze_tensor</name>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>p_tensor_description</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Squeeze tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>: which dim to squeeze </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: true if success else false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="230" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="202" bodyend="217" declfile="include/wholememory/tensor_description.h" declline="230" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensor__description_8h_1a8b696b100434b99de28e98f8fdc05e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wholememory_unsqueeze_tensor</definition>
        <argsstring>(wholememory_tensor_description_t *p_tensor_description, int dim)</argsstring>
        <name>wholememory_unsqueeze_tensor</name>
        <param>
          <type><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> *</type>
          <declname>p_tensor_description</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unsqueeze tensor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_tensor_description</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to <ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>: unsqueeze at which dim </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: true if success else false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wholememory/tensor_description.h" line="238" column="6" bodyfile="src/wholememory/tensor_description.cpp" bodystart="219" bodyend="233" declfile="include/wholememory/tensor_description.h" declline="238" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2023,<sp/>NVIDIA<sp/>CORPORATION.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref><sp/>{</highlight></codeline>
<codeline lineno="30" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca660302ea0e9c9b953cd20e96f170d78f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca660302ea0e9c9b953cd20e96f170d78f" kindref="member">WHOLEMEMORY_DT_UNKNOWN</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="31" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca8fc99da34693be9e062833242c27d6ec" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca8fc99da34693be9e062833242c27d6ec" kindref="member">WHOLEMEMORY_DT_FLOAT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca21c33803cd2286859e642bfcc76e0c53" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca21c33803cd2286859e642bfcc76e0c53" kindref="member">WHOLEMEMORY_DT_HALF</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca690ba24decf00c023dba03826a296193" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca690ba24decf00c023dba03826a296193" kindref="member">WHOLEMEMORY_DT_DOUBLE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca099d083a74b36954ffa53074d982c64b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca099d083a74b36954ffa53074d982c64b" kindref="member">WHOLEMEMORY_DT_BF16</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cae4485215773ac9d733555c7119002e52" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cae4485215773ac9d733555c7119002e52" kindref="member">WHOLEMEMORY_DT_INT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cad544b558c31c88cf2977614e34ace0d5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cad544b558c31c88cf2977614e34ace0d5" kindref="member">WHOLEMEMORY_DT_INT64</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cae63ed5b24aa79279081568835a6ed649" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5cae63ed5b24aa79279081568835a6ed649" kindref="member">WHOLEMEMORY_DT_INT16</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5caab26b36067528d88560b9ec98cf4c2cf" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5caab26b36067528d88560b9ec98cf4c2cf" kindref="member">WHOLEMEMORY_DT_INT8</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39" refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca6198ec382f0e25f11668ac8ba9456125" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5ca6198ec382f0e25f11668ac8ba9456125" kindref="member">WHOLEMEMORY_DT_COUNT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1a1283f01dec368463825a17645e13169e" kindref="member">wholememory_dtype_get_element_size</ref>(<ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref><sp/>dtype);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1ac8f6885877895e0d08ee49ac1cbeccbb" kindref="member">wholememory_dtype_is_floating_number</ref>(<ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref><sp/>dtype);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1a95d71635154e5aac8a984f1782615ab9" kindref="member">wholememory_dtype_is_integer_number</ref>(<ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref><sp/>dtype);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structwholememory__array__description__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref><sp/>{</highlight></codeline>
<codeline lineno="70" refid="structwholememory__array__description__t_1ac26fe42874c1872624b9b6a22e92d2e6" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structwholememory__array__description__t_1ac26fe42874c1872624b9b6a22e92d2e6" kindref="member">size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71" refid="structwholememory__array__description__t_1aaf502ee49faaaca165a8873333b82885" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structwholememory__array__description__t_1aaf502ee49faaaca165a8873333b82885" kindref="member">storage_offset</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="structwholememory__array__description__t_1ad19746269739fe6260e67c0ca1d36fba" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref><sp/><ref refid="structwholememory__array__description__t_1ad19746269739fe6260e67c0ca1d36fba" kindref="member">dtype</ref>;<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal">};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structwholememory__matrix__description__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref><sp/>{</highlight></codeline>
<codeline lineno="80" refid="structwholememory__matrix__description__t_1aa8a2dfca035dd6e3da2b0673adf29b78" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structwholememory__matrix__description__t_1aa8a2dfca035dd6e3da2b0673adf29b78" kindref="member">sizes</ref>[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81" refid="structwholememory__matrix__description__t_1ac712682b76f77a2c971b2b3d7f2f3d23" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structwholememory__matrix__description__t_1ac712682b76f77a2c971b2b3d7f2f3d23" kindref="member">stride</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="structwholememory__matrix__description__t_1a5afb47b05303091a3172beff18dc1835" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structwholememory__matrix__description__t_1a5afb47b05303091a3172beff18dc1835" kindref="member">storage_offset</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83" refid="structwholememory__matrix__description__t_1a4f250764d95940dc84ba6eaa33fe955f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref><sp/><ref refid="structwholememory__matrix__description__t_1a4f250764d95940dc84ba6eaa33fe955f" kindref="member">dtype</ref>;<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="tensor__description_8h_1aab2708854fc964fe383d730c8979f8fa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WHOLEMEMORY_MAX_TENSOR_DIM<sp/>(8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structwholememory__tensor__description__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref><sp/>{</highlight></codeline>
<codeline lineno="93" refid="structwholememory__tensor__description__t_1a2a1f59a8ba93575af4017de3d33d2925" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structwholememory__tensor__description__t_1a2a1f59a8ba93575af4017de3d33d2925" kindref="member">sizes</ref>[<ref refid="tensor__description_8h_1aab2708854fc964fe383d730c8979f8fa" kindref="member">WHOLEMEMORY_MAX_TENSOR_DIM</ref>];<sp/></highlight></codeline>
<codeline lineno="95" refid="structwholememory__tensor__description__t_1a6a4a4d548e44c32a10e96f78c450f3e8" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structwholememory__tensor__description__t_1a6a4a4d548e44c32a10e96f78c450f3e8" kindref="member">strides</ref>[<ref refid="tensor__description_8h_1aab2708854fc964fe383d730c8979f8fa" kindref="member">WHOLEMEMORY_MAX_TENSOR_DIM</ref>];<sp/></highlight></codeline>
<codeline lineno="96" refid="structwholememory__tensor__description__t_1a4ce5c16c13bcc1bb742b3527c818ab65" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structwholememory__tensor__description__t_1a4ce5c16c13bcc1bb742b3527c818ab65" kindref="member">storage_offset</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97" refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structwholememory__tensor__description__t_1ab0e1806fee1375ca3abee7a35e28254b" kindref="member">dim</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98" refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref><sp/><ref refid="structwholememory__tensor__description__t_1a06a28a646d435a02f96b761e6d5869f7" kindref="member">dtype</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal">};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref><sp/><ref refid="tensor__description_8h_1a9f379e63f1116573712c47a9fded9867" kindref="member">wholememory_create_array_desc</ref>(int64_t<sp/>size,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>storage_offset,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref><sp/>dtype);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref><sp/><ref refid="tensor__description_8h_1ac22ee763259c4865d5ec16a2ec34af62" kindref="member">wholememory_create_matrix_desc</ref>(int64_t<sp/>sizes[2],</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>stride,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>storage_offset,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tensor__description_8h_1aae60c79607c2908cefb0b93e06729e5c" kindref="member">wholememory_dtype_t</ref><sp/>dtype);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1a98ad7a286797c238fa7974a32ac0c58a" kindref="member">wholememory_initialize_tensor_desc</ref>(<ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>p_tensor_description);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1a1349e4d9b4d917597068b02f177e1aa7" kindref="member">wholememory_copy_array_desc_to_matrix</ref>(<ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>*<sp/>p_matrix_description,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>*<sp/>p_array_description);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1a0018f4528d34d836e42630f6e8f088e4" kindref="member">wholememory_copy_array_desc_to_tensor</ref>(<ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>p_tensor_description,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>*<sp/>p_array_description);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1af2eef6741c9e7e40c4ea740f512f23dc" kindref="member">wholememory_copy_matrix_desc_to_tensor</ref>(<ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>p_tensor_description,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>*<sp/>p_matrix_description);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1a4bd945e95a4bec4bc89251ed8827587f" kindref="member">wholememory_convert_tensor_desc_to_array</ref>(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>*<sp/>p_array_description,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>p_tensor_description);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1a4a1462d960e5272e54b6b349c0a9103d" kindref="member">wholememory_convert_tensor_desc_to_matrix</ref>(</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>*<sp/>p_matrix_description,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>p_tensor_description);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">int64_t<sp/><ref refid="tensor__description_8h_1a7ccb1c37ed3f815d4c97b480367e172f" kindref="member">wholememory_get_memory_element_count_from_array</ref>(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>*<sp/>p_array_description);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">int64_t<sp/><ref refid="tensor__description_8h_1a2f6022544969a1a512b92eac78a4d540" kindref="member">wholememory_get_memory_size_from_array</ref>(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__array__description__t" kindref="compound">wholememory_array_description_t</ref>*<sp/>p_array_description);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">int64_t<sp/><ref refid="tensor__description_8h_1a472f4deff7fb87d90a5b0ad1a87208f8" kindref="member">wholememory_get_memory_element_count_from_matrix</ref>(</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>*<sp/>p_matrix_description);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">int64_t<sp/><ref refid="tensor__description_8h_1ae8dad70c4b0ab44af5c14daeaaf3c598" kindref="member">wholememory_get_memory_size_from_matrix</ref>(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__matrix__description__t" kindref="compound">wholememory_matrix_description_t</ref>*<sp/>p_matrix_description);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">int64_t<sp/><ref refid="tensor__description_8h_1a42c858c711aea6b50a494bb57a542568" kindref="member">wholememory_get_memory_element_count_from_tensor</ref>(</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>p_tensor_description);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">int64_t<sp/><ref refid="tensor__description_8h_1a1f9ecef913f2ca09c01cf5d0e87911aa" kindref="member">wholememory_get_memory_size_from_tensor</ref>(</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>p_tensor_description);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1ab48ae67f5f180a6ad0def499d37e1ee4" kindref="member">wholememory_squeeze_tensor</ref>(<ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>p_tensor_description,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="tensor__description_8h_1a8b696b100434b99de28e98f8fdc05e89" kindref="member">wholememory_unsqueeze_tensor</ref>(<ref refid="structwholememory__tensor__description__t" kindref="compound">wholememory_tensor_description_t</ref>*<sp/>p_tensor_description,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/wholememory/tensor_description.h"/>
  </compounddef>
</doxygen>
