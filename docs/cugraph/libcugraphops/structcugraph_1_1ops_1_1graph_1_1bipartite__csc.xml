<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc" kind="struct" language="C++" prot="public">
    <compoundname>cugraph::ops::graph::bipartite_csc</compoundname>
    <includes refid="format_8hpp" local="no">format.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename EdgeIdxT</type>
      </param>
      <param>
        <type>typename NodeIdxT</type>
        <defval>EdgeIdxT</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ae08f66e085b93d57e64fb57637505f0c" prot="public" static="no">
        <type>NodeIdxT</type>
        <definition>using cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::nidx_t =  NodeIdxT</definition>
        <argsstring></argsstring>
        <name>nidx_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="65" column="3" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1aba8c907334fcb93f46a5f261049b0b7a" prot="public" static="no">
        <type>EdgeIdxT</type>
        <definition>using cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::eidx_t =  EdgeIdxT</definition>
        <argsstring></argsstring>
        <name>eidx_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="66" column="3" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a72802c96495d28f575c5c0c6bae4c725" prot="public" static="no" mutable="no">
        <type>EdgeIdxT *</type>
        <definition>EdgeIdxT* cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::offsets</definition>
        <argsstring></argsstring>
        <name>offsets</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>monotonically increasing array with each location pointing to the start offset of the neighborhood of that node in the <computeroutput>indices</computeroutput> array. Together with <computeroutput>indices</computeroutput>, this forms the CSC (in-graph) representation of a graph. It is of length <computeroutput>n_dst_nodes + 1</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="77" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a566c378a014616f5c4c180283b2dceca" prot="public" static="no" mutable="no">
        <type>NodeIdxT *</type>
        <definition>NodeIdxT* cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::indices</definition>
        <argsstring></argsstring>
        <name>indices</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>contains neighbor indices of every destination node belonging to this object. Together with <computeroutput>offsets</computeroutput>, this forms the CSC (in-graph) representation of a graph. It is of length <computeroutput>n_indices</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="83" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a0b5c775eeba9cb7c81f3f6a0022a0755" prot="public" static="no" mutable="no">
        <type>EdgeIdxT *</type>
        <definition>EdgeIdxT* cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::rev_offsets</definition>
        <argsstring></argsstring>
        <name>rev_offsets</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>monotonically increasing array with each location pointing to the start offset of the neighborhood of that node in the <computeroutput>rev_indices</computeroutput> array. Together with <computeroutput>rev_indices</computeroutput>, this forms the CSR (out-graph) representation of a graph which corresponds to the &quot;reversed&quot; representation of the CSC. It is of length <computeroutput>n_src_nodes + 1</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="92" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a0de3988f82147ee86664d55a9580bbb6" prot="public" static="no" mutable="no">
        <type>NodeIdxT *</type>
        <definition>NodeIdxT* cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::rev_indices</definition>
        <argsstring></argsstring>
        <name>rev_indices</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>contains neighbor indices of every source node belonging to this object. Together with <computeroutput>rev_offsets</computeroutput>, this forms the CSR (out-graph) representation of a graph which corresponds to the &quot;reversed&quot; representation of the CSC. It is of length <computeroutput>n_indices</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="100" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1acae4cc7b09bf5f00abdcc93c5d1f17f7" prot="public" static="no" mutable="no">
        <type>EdgeIdxT *</type>
        <definition>EdgeIdxT* cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::map_csc_to_coo</definition>
        <argsstring></argsstring>
        <name>map_csc_to_coo</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>optional map from indexes into <computeroutput>indices</computeroutput> (i.e. the CSC representation) to the indexes of a potentially underlying COO representation or edge embedding table in general. This can be used to avoid having to reorder edge features when we sort edges while creating CSC, or apply other transformations on the graph structure. Its length is <computeroutput>n_indices</computeroutput>.</para>
<para><simplesect kind="note"><para>This pointer is optional for many operations. If not given, it is assumed that edge features are ordered the same way as <computeroutput>indices</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>If provided, we assume that this is a perfect partition of the indexes in [0, n_indices - 1]. Operations using edge features only as input can usually work with any index, but operations writing to the edge features or gradients on edge features assume this to be a partition unless specified. Otherwise, be aware that this could lead to data races! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="118" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a8088d54f9d63214d6873fcf71f2fe7ce" prot="public" static="no" mutable="no">
        <type>EdgeIdxT *</type>
        <definition>EdgeIdxT* cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::map_rev_to_coo</definition>
        <argsstring></argsstring>
        <name>map_rev_to_coo</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>optional map from indexes into <computeroutput>indices</computeroutput> (i.e. the CSC representation) to the indexes of a potentially underlying COO representation or edge embedding table in general. This can be used to avoid having to reorder edge features when we sort edges while creating CSC, or apply other transformations on the graph structure. Its length is <computeroutput>n_indices</computeroutput>.</para>
<para><simplesect kind="note"><para>This is only optional if the reversed graph (i.e. the csc representation) is not used or not used with any input over edge features (including intermediate outputs which are just written for the backward pass). </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>map_csc_to_coo</computeroutput> is not given, this corresponds to the map between indexes into <computeroutput>rev_indices</computeroutput> to the corresponding positions of <computeroutput>indices</computeroutput> or into edge embedding tables in general. </para>
</simplesect>
<simplesect kind="note"><para>We recommend creating this map automatically using <computeroutput><ref refid="namespacecugraph_1_1ops_1_1graph_1acbb497fa3b55db432fb32d7ef61b4a57" kindref="member">graph::get_reverse_graph</ref></computeroutput> to gurantuee consistency. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="135" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ac24ef40142a0d5ef101899187dffabb2" prot="public" static="no" mutable="no">
        <type>NodeIdxT</type>
        <definition>NodeIdxT cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::n_src_nodes</definition>
        <argsstring></argsstring>
        <name>n_src_nodes</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>number of source nodes belonging to this graph </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="138" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a84ada7fee8adcb98cb500bf11ea43172" prot="public" static="no" mutable="no">
        <type>NodeIdxT</type>
        <definition>NodeIdxT cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::n_dst_nodes</definition>
        <argsstring></argsstring>
        <name>n_dst_nodes</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>number of destination nodes belonging to this graph </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="140" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ad037efd8755b5244a6126b8de7baaf00" prot="public" static="no" mutable="no">
        <type>EdgeIdxT</type>
        <definition>EdgeIdxT cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::n_indices</definition>
        <argsstring></argsstring>
        <name>n_indices</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>total number of edges in this graph (length of <computeroutput>indices</computeroutput> array) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="142" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a93e10c6ca65dd78760797982f55e237a" prot="public" static="no" mutable="no">
        <type>EdgeIdxT</type>
        <definition>EdgeIdxT cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::dst_max_in_degree</definition>
        <argsstring></argsstring>
        <name>dst_max_in_degree</name>
        <initializer>{-1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>maximum in-degree of all destination nodes in this graph <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="144" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ab69e75e810e6c8a973858bbe33e7ecda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::bipartite_csc</definition>
        <argsstring>()=default</argsstring>
        <name>bipartite_csc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="68" column="3"/>
      </memberdef>
      <memberdef kind="function" id="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a895c19fed988281437d6b5f96fbab8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;::~bipartite_csc</definition>
        <argsstring>()=default</argsstring>
        <name>~bipartite_csc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="69" column="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>simple CSC representation of a bipartite graph. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EdgeIdxT</parametername>
</parameternamelist>
<parameterdescription>
<para>edge index type (signed type, see <computeroutput>INVALID_ID</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NodeIdxT</parametername>
</parameternamelist>
<parameterdescription>
<para>node index type (signed type, see <computeroutput>INVALID_ID</computeroutput>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>By default, we expect an adjacency matrix representing the in-graph in the CSC format: the index into <computeroutput>csc_offsets</computeroutput> represents the node ID of a destination node and the values of <computeroutput>csc_indices</computeroutput> are the node IDs of source nodes. </para>
</simplesect>
<simplesect kind="note"><para>For valid IDs, see <computeroutput>INVALID_ID</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>This object does NOT own any of the underlying pointers and thus their lifetime management is left to the calling code. </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, NodeIdxT &gt;</label>
        <link refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc"/>
      </node>
    </collaborationgraph>
    <location file="include/cugraph-ops/graph/format.hpp" line="64" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="64" bodyend="145"/>
    <listofallmembers>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ab69e75e810e6c8a973858bbe33e7ecda" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>bipartite_csc</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a93e10c6ca65dd78760797982f55e237a" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>dst_max_in_degree</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1aba8c907334fcb93f46a5f261049b0b7a" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>eidx_t</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a566c378a014616f5c4c180283b2dceca" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>indices</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1acae4cc7b09bf5f00abdcc93c5d1f17f7" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>map_csc_to_coo</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a8088d54f9d63214d6873fcf71f2fe7ce" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>map_rev_to_coo</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a84ada7fee8adcb98cb500bf11ea43172" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>n_dst_nodes</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ad037efd8755b5244a6126b8de7baaf00" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>n_indices</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ac24ef40142a0d5ef101899187dffabb2" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>n_src_nodes</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ae08f66e085b93d57e64fb57637505f0c" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>nidx_t</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a72802c96495d28f575c5c0c6bae4c725" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>offsets</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a0de3988f82147ee86664d55a9580bbb6" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>rev_indices</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a0b5c775eeba9cb7c81f3f6a0022a0755" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>rev_offsets</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a895c19fed988281437d6b5f96fbab8cc" prot="public" virt="virtual"><scope>cugraph::ops::graph::bipartite_csc</scope><name>~bipartite_csc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
