<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacecugraph_1_1ops" kind="namespace" language="C++">
    <compoundname>cugraph::ops</compoundname>
    <innerclass refid="structcugraph_1_1ops_1_1activation__params" prot="public">cugraph::ops::activation_params</innerclass>
    <innerclass refid="structcugraph_1_1ops_1_1mha__params" prot="public">cugraph::ops::mha_params</innerclass>
    <innerclass refid="structcugraph_1_1ops_1_1tp__info" prot="public">cugraph::ops::tp_info</innerclass>
    <innerclass refid="structcugraph_1_1ops_1_1tp__data__sizes" prot="public">cugraph::ops::tp_data_sizes</innerclass>
    <innerclass refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" prot="public">cugraph::ops::clebsch_gordan_tensor</innerclass>
    <innernamespace refid="namespacecugraph_1_1ops_1_1cuda">cugraph::ops::cuda</innernamespace>
    <innernamespace refid="namespacecugraph_1_1ops_1_1dimenet">cugraph::ops::dimenet</innernamespace>
    <innernamespace refid="namespacecugraph_1_1ops_1_1graph">cugraph::ops::graph</innernamespace>
    <innernamespace refid="namespacecugraph_1_1ops_1_1utils">cugraph::ops::utils</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a884cc2f474e40067a15943049a103dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *node_feat, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass of a simple aggregation fused with the concatenation of additional node features (agg_concat) using node features in a node-to-node reduction (n2n) operating on a graph. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>given dimensions must be non-0.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_concat)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="43" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af1582374d3548c989cdb13e4b6f72b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *node_feat, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="50" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a17205b0740a91b8569f72cd87d1f4be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *node_feat, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="58" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a00d9cff0db523f76e34ae3d9e1d2fc30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *node_feat, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="65" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8ca7f3767faac95d0afce30a557d4a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *node_feat, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="73" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a35b8121235cfe32e76a1104cf0055b7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *node_feat, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="80" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="80" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1acff3aaa1bb6f93d757d0af7d16abac58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *node_feat, const float *concat_feat, size_t dim_node, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass of a simple aggregation fused with the concatenation of additional node features (agg_concat) using node features in a node-to-node reduction (n2n) operating on a graph. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>given dimensions must be non-0.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_concat)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the node features to concatenate after aggregation. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_concat</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_concat</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the additional concatenated features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="114" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3ce1c5fffd3e55dc78f9ea33c9f65901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *node_feat, const float *concat_feat, size_t dim_node, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="123" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="123" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8a39982c77cb7cd1cd9125d848c13bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *node_feat, const __half *concat_feat, size_t dim_node, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="133" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="133" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae75be277c77305f89ebb9982b9e14845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *node_feat, const __half *concat_feat, size_t dim_node, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="142" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="142" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abad64f7140c1c78348abdfb5dabcb0b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *concat_feat, size_t dim_node, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="152" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="152" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a957b3c41bbdd2c10fc1b5c76b04b8d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *concat_feat, size_t dim_node, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="161" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="161" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a21b975ae8536b4bc5af9642f6fdca451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, const float *dout, const int32_t *out_pos, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass of a simple aggregation fused with the concatenation of additional node features (agg_concat) using node features in a node-to-node reduction (n2n) operating on a graph. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Dimensions passed must be the same as in forward, regardless of whether the gradient for a given feature is actually required or not.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_concat)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="196" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a6940c2573c38908fc844f086a61e404f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, const float *dout, const int64_t *out_pos, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="203" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="203" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae269ea853659bdc4d1c23695e1eb460a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(__half *d_node_feat, const __half *dout, const int32_t *out_pos, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="211" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="211" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab1e74696d26e027044a900b9bd67b919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(__half *d_node_feat, const __half *dout, const int64_t *out_pos, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="218" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="218" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ace66a5ea1c50f5e204453e1a911b0cbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="226" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="226" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a43f4709a8ea577c7d2dfe1dd656d7e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="233" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="233" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a67a5d20d9ea541a5be2666bfa4abb5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_concat_feat, const float *dout, const int32_t *out_pos, size_t dim_node, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass of a simple aggregation fused with the concatenation of additional node features (agg_concat) using node features in a node-to-node reduction (n2n) operating on a graph. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Dimensions passed must be the same as in forward, regardless of whether the gradient for a given feature is actually required or not.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_concat_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of concatenated node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_concat</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_concat)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_concat</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the additional concatenated features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="270" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="270" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4acdc5a9f620655a564ad23cb9becada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_concat_feat, const float *dout, const int64_t *out_pos, size_t dim_node, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="279" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="279" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a12e5cf7d6456887ce7212bfd45fd6f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_concat_feat, const __half *dout, const int32_t *out_pos, size_t dim_node, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="289" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="289" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac8095e434ee740dec62e17301cc4d836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_concat_feat, const __half *dout, const int64_t *out_pos, size_t dim_node, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="298" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="298" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac90e56aa85d9412f7c75abd1c0f2fbba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_concat_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_node, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="308" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="308" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a480593f020a595e948efa4a074d21ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_concat_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_node, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="317" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="317" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a65adff2bf0473d71a8f657006666dbee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *edge_feat, const float *concat_feat, size_t dim_edge, size_t dim_concat, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass of a simple aggregation fused with the concatenation of additional node features (agg_concat) using edge features in an edge-to-node reduction (e2n) operating on a graph. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>given dimensions must be non-0. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. The number of rows is <computeroutput>graph.n_indices</computeroutput>. Below we&apos;ll refer to the number of rows simply as <computeroutput>n_edges</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_edge + dim_concat)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge features. [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the node features to concatenate after aggregation. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_concat</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_concat</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the additional concatenated features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="358" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="358" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac9529aabbb755e01992bca57164f203d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *edge_feat, const float *concat_feat, size_t dim_edge, size_t dim_concat, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="367" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="367" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a9be54c5be7a60680fe6cbdaec2cf8495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *edge_feat, const __half *concat_feat, size_t dim_edge, size_t dim_concat, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="377" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="377" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abd4bd40f192d28701b14401d70ab7d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *edge_feat, const __half *concat_feat, size_t dim_edge, size_t dim_concat, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="386" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="386" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae5b838da71bba633d8367890193044e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *concat_feat, size_t dim_edge, size_t dim_concat, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="396" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="396" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abcbcf1ba583739b44e639d5da686e863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *concat_feat, size_t dim_edge, size_t dim_concat, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="405" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="405" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa8e59675563f40eea5181009a5d1f00e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *edge_feat, const float *concat_feat, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="415" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="415" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4f371e10ea0d3e88a58bd994e4c60bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *edge_feat, const float *concat_feat, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="424" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="424" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a48676c914b39b6908056acad7ae84ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *edge_feat, const __half *concat_feat, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="434" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="434" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af41e20c3ba8b176f7189b2a89ef1b6ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *edge_feat, const __half *concat_feat, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="443" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="443" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac9e748df8a094bd92a13f7e406a11761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *concat_feat, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="453" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="453" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad4624814f56829e40fce3439c3082842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *concat_feat, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="462" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="462" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0bd25c65aa4d20cb6078e722aa6b5768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(float *d_edge_feat, float *d_concat_feat, const float *dout, const int32_t *out_pos, size_t dim_edge, size_t dim_concat, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass of a simple aggregation fused with the concatenation of additional node features (agg_concat) using edge features in an edge-to-node reduction (e2n) operating on a graph. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Dimensions passed must be the same as in forward, regardless of whether the gradient for a given feature is actually required or not. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>d_edge_feat</computeroutput> is arbitrary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input edge features [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_concat_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of concatenated node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_concat</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_edge + dim_concat)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_concat</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the additional concatenated features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="505" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="505" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3b6244f1c2040a2efd974e0175fbd645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(float *d_edge_feat, float *d_concat_feat, const float *dout, const int64_t *out_pos, size_t dim_edge, size_t dim_concat, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="514" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="514" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3f8b8822db13c40c7aba5cd0165c3690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(__half *d_edge_feat, __half *d_concat_feat, const __half *dout, const int32_t *out_pos, size_t dim_edge, size_t dim_concat, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="524" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="524" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab6ab8067f7b40dc50200d6b5153bbf24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(__half *d_edge_feat, __half *d_concat_feat, const __half *dout, const int64_t *out_pos, size_t dim_edge, size_t dim_concat, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="533" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="533" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad97957174184c271fb460d5b8ea7d9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_edge_feat, __nv_bfloat16 *d_concat_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_edge, size_t dim_concat, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="543" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="543" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a54c0d8e09c0e4d9c006da1d037d505b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_edge_feat, __nv_bfloat16 *d_concat_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_edge, size_t dim_concat, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="552" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="552" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a25f75f86f30a802624bf3a48373aee24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(float *d_edge_feat, float *d_concat_feat, const float *dout, const int32_t *out_pos, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="562" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="562" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa9b84c152fb84fe840acee12dea1a66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(float *d_edge_feat, float *d_concat_feat, const float *dout, const int64_t *out_pos, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="571" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="571" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af842c64e86568cdf8af1cfb4277b1854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(__half *d_edge_feat, __half *d_concat_feat, const __half *dout, const int32_t *out_pos, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="581" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="581" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a1fab9a16e094be543f52019058ee34e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(__half *d_edge_feat, __half *d_concat_feat, const __half *dout, const int64_t *out_pos, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="590" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="590" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2b7eafbda5fac1c8c446311b95f52bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_edge_feat, __nv_bfloat16 *d_concat_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="600" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="600" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab6daff44beab41c7b85689c58acd1dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_edge_feat, __nv_bfloat16 *d_concat_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="609" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="609" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af33c4ca8dd16052ec18f85162bb70b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *node_feat, const float *edge_feat, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass of a simple aggregation fused with the concatenation of additional node features (agg_concat) using edge features and node features in an edge-to-node reduction (e2n) and a node-to-node reduction (n2n) operating on a graph. The results of both individual aggregations are simply concatenated. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>given dimensions must be non-0. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> may be arbitrary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge + dim_node)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge)</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge features. [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="651" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="651" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abb680061168fcf662f8e0d47b5a51e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *node_feat, const float *edge_feat, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="660" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="660" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1adb8a69f5003f58ce304167e65bc7de11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *node_feat, const __half *edge_feat, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="670" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="670" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1acad240116793836a83a6ec37c4d7b473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *node_feat, const __half *edge_feat, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="679" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="679" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aceb2a9c40733c778ee3cbb7541354893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="689" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="689" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae3d7295e39f37093c4a4bfa942f70929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="698" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="698" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a911db51a8b0f1fbaf64b40b8883cfdbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *node_feat, const float *edge_feat, const float *concat_feat, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass of a simple aggregation fused with the concatenation of additional node features (agg_concat) using edge features and node features in an edge-to-node reduction (e2n) and a node-to-node reduction (n2n) operating on a graph. The results of both individual aggregations are simply concatenated. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>given dimensions must be non-0. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> may be arbitrary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge + dim_concat)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge)</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge features. [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the node features to concatenate after aggregation. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_concat</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_concat</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the additional concatenated features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="743" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="743" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0cedca3d5c5adbe37e0f39c79c618512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *node_feat, const float *edge_feat, const float *concat_feat, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="754" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="754" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1afbf5165dee539143fab12b5e5f0796d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *node_feat, const __half *edge_feat, const __half *concat_feat, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="766" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="766" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aef02761ccff4d63478210668965b86a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *node_feat, const __half *edge_feat, const __half *concat_feat, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="777" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="777" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2a5df0650154fdeae2830cd1693139b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *concat_feat, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="789" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="789" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aaa50f71acbba422d186b5edf5ec835a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *concat_feat, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="800" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="800" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1acb41bdacaffd01991d01e2821167dd18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_feat, const float *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass of a simple aggregation fused with the concatenation of the &quot;self&quot; node features (agg_concat) using edge features and node features in an edge-to-node reduction (e2n) and a node-to-node reduction (n2n) operating on a graph. The results of both individual aggregations are simply concatenated. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Dimensions passed must be the same as in forward, regardless of whether the gradient for a given feature is actually required or not. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>d_edge_feat</computeroutput> may be arbitrary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input edge features [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge + dim_concat)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge)</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="847" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="847" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a31b9ccde21b1a1b7d42218763011cde8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_feat, const float *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="856" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="856" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a160126ab6073af4a6585f87e37d2b6cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_edge_feat, const __half *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="866" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="866" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a9c76913a6e490e4f2257237381253317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_edge_feat, const __half *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="875" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="875" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a91f58db42e350cc4fdc4ff5d1ddb07c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="885" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="885" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad88740f9eba8428c643c14860a471c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="894" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="894" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a509e17e5619a8f7061e7ce2d27bff00c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_feat, float *d_concat_feat, const float *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass of a simple aggregation fused with the concatenation of the &quot;self&quot; node features (agg_concat) using edge features and node features in an edge-to-node reduction (e2n) and a node-to-node reduction (n2n) operating on a graph. The results of both individual aggregations are simply concatenated. The &quot;self&quot; node features are concatenated at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Dimensions passed must be the same as in forward, regardless of whether the gradient for a given feature is actually required or not. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>d_edge_feat</computeroutput> may be arbitrary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input edge features [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_concat_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of concatenated node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_concat</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge + dim_concat)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge)</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_concat</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the additional concatenated features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="943" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="943" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a261c6321538ae5e68b177370ec513cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_feat, float *d_concat_feat, const float *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="954" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="954" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2e452addee550e9a08e9f9c7cd295bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_edge_feat, __half *d_concat_feat, const __half *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="966" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="966" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8afb5c94e19fa2dbcac3e8dc991d4560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_edge_feat, __half *d_concat_feat, const __half *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="977" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="977" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0fc60d9c01f76c62e688a61c2f0763bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_edge_feat, __nv_bfloat16 *d_concat_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="989" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="989" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a27c3e0d7dded6daf739b8992a649566b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_n2n_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_edge_feat, __nv_bfloat16 *d_concat_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_n2n_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat.hpp" line="1000" column="6" declfile="include/cugraph-ops/operators/agg_concat.hpp" declline="1000" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a61788957efb1360e2f2dbfabc70a0309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_weighted_n2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, float *degree, const float *node_feat, const float *edge_weight, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_weighted_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for full-graph aggregation using node features while concatenting with the orignal node features, the actual aggregation is done weighting each neighbor according to its edge weight for each output node (agg_concat_weighted). The reduction operators on a graph in a node-to-node fashion (n2n). For op == kMean, this means that the aggregation corresponds to a weighted average. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_node)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>the in-degree of each node, i.e. the sum of incoming edge weights. [on device] [dim = &apos;graph.n_dst_nodes x 1<computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" kindref="member">AggOpT::kMean</ref>, may be</computeroutput>nullptr` otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge weights [on device] [dim = <computeroutput>graph.n_edges x 1</computeroutput>] Note that those should we indexed similarly as indices, i.e. the edge corresponding to <computeroutput>indices[off]</computeroutput> should have the weight <computeroutput>edge_weight[off]</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat_weighted.hpp" line="50" column="6" declfile="include/cugraph-ops/operators/agg_concat_weighted.hpp" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3caf4fc63f7ac85aa90a25f918b2cca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_weighted_n2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, float *degree, const float *node_feat, const float *edge_weight, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_weighted_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat_weighted.hpp" line="59" column="6" declfile="include/cugraph-ops/operators/agg_concat_weighted.hpp" declline="59" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a39bb087e18017b6323ceb101791e0470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_weighted_n2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, float *degree, const float *node_feat, const float *concat_feat, const float *edge_weight, size_t dim_node, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_weighted_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for full-graph aggregation using node features while concatenting with the orignal node features, the actual aggregation is done weighting each neighbor according to its edge weight for each output node (agg_concat_weighted). The reduction operators on a graph in a node-to-node fashion (n2n). For op == kMean, this means that the aggregation corresponds to a weighted average. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><computeroutput>concat_feat</computeroutput> must not overlap with <computeroutput>node_feat</computeroutput> except if <computeroutput>concat_feat == node_feat</computeroutput> and <computeroutput>dim_concat == dim_node</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_node)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>the in-degree of each node, i.e. the sum of incoming edge weights. [on device] [dim = &apos;graph.n_dst_nodes x 1<computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" kindref="member">AggOpT::kMean</ref>, may be</computeroutput>nullptr` otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the node features to concatenate after aggregation. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_concat</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge weights [on device] [dim = <computeroutput>graph.n_edges x 1</computeroutput>] Note that those should we indexed similarly as indices, i.e. the edge corresponding to <computeroutput>indices[off]</computeroutput> should have the weight <computeroutput>edge_weight[off]</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_concat</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the additional concatenated features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat_weighted.hpp" line="107" column="6" declfile="include/cugraph-ops/operators/agg_concat_weighted.hpp" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a72bb6b757c04daca6efd58eb63676a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_weighted_n2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, float *degree, const float *node_feat, const float *concat_feat, const float *edge_weight, size_t dim_node, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_weighted_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>concat_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat_weighted.hpp" line="118" column="6" declfile="include/cugraph-ops/operators/agg_concat_weighted.hpp" declline="118" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1afd82e574592051f596193f527d0c0a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_weighted_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_weight, const float *dout, const float *out, const int32_t *out_pos, const float *edge_weight, const float *degree, const float *node_feat, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_weighted_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for full-graph aggregation using node features while concatenting with the orignal node features, the actual aggregation is done weighting each neighbor according to its edge weight for each output node (agg_concat_weighted). The reduction operates on a graph in a node-to-node fashion (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_edge_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of edge weights [on device] [dim = <computeroutput>graph.n_edges x 1</computeroutput>] If no gradient required, may be <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" kindref="member">AggOpT::kMean</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge weights [on device] [dim = <computeroutput>graph.n_edges x 1</computeroutput>] Note that those should we indexed similarly as indices, i.e. the edge corresponding to <computeroutput>indices[off]</computeroutput> should have the weight <computeroutput>edge_weight[off]</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>the in-degree of each node, i.e. the sum of incoming edge weights. [on device] [dim = &apos;graph.n_dst_nodes x 1<computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" kindref="member">AggOpT::kMean</ref>, may be</computeroutput>nullptr` otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat_weighted.hpp" line="168" column="6" declfile="include/cugraph-ops/operators/agg_concat_weighted.hpp" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad4e58ac79267a926e35f72015c9c338f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_weighted_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_weight, const float *dout, const float *out, const int64_t *out_pos, const float *edge_weight, const float *degree, const float *node_feat, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_weighted_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat_weighted.hpp" line="180" column="6" declfile="include/cugraph-ops/operators/agg_concat_weighted.hpp" declline="180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae4b8471102385ab1f5d64367f425cb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_weighted_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_concat_feat, float *d_edge_weight, const float *dout, const float *out, const int32_t *out_pos, const float *edge_weight, const float *degree, const float *node_feat, size_t dim_node, size_t dim_concat, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_weighted_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for full-graph aggregation using node features while concatenting with the orignal node features, the actual aggregation is done weighting each neighbor according to its edge weight for each output node (agg_concat_weighted). The reduction operates on a graph in a node-to-node fashion (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_concat_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of concatenated node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_concat</computeroutput>]. Pass <computeroutput>nullptr</computeroutput> if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_edge_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of edge weights [on device] [dim = <computeroutput>graph.n_edges x 1</computeroutput>] If no gradient required, may be <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" kindref="member">AggOpT::kMean</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge weights [on device] [dim = <computeroutput>graph.n_edges x 1</computeroutput>] Note that those should we indexed similarly as indices, i.e. the edge corresponding to <computeroutput>indices[off]</computeroutput> should have the weight <computeroutput>edge_weight[off]</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>the in-degree of each node, i.e. the sum of incoming edge weights. [on device] [dim = &apos;graph.n_dst_nodes x 1<computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" kindref="member">AggOpT::kMean</ref>, may be</computeroutput>nullptr` otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_concat</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the additional concatenated features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat_weighted.hpp" line="234" column="6" declfile="include/cugraph-ops/operators/agg_concat_weighted.hpp" declline="234" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac608e3b7b2e15ab79dea9609c91e4b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_concat_weighted_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_concat_feat, float *d_edge_weight, const float *dout, const float *out, const int64_t *out_pos, const float *edge_weight, const float *degree, const float *node_feat, size_t dim_node, size_t dim_concat, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_concat_weighted_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_concat_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_concat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_concat_weighted.hpp" line="248" column="6" declfile="include/cugraph-ops/operators/agg_concat_weighted.hpp" declline="248" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab1f9a89886d680b745d00d29459eb606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_dmpnn_e2e_fwd</definition>
        <argsstring>(float *out_edge_feat, const float *in_edge_feat, size_t dim_edge, const csc_s32_t &amp;graph, const int32_t *rev_edge_ids, bool concat_own, const cuda::stream &amp;stream)</argsstring>
        <name>agg_dmpnn_e2e_fwd</name>
        <param>
          <type>float *</type>
          <declname>out_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>rev_edge_ids</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for D-MPNN-like full graph aggregation (agg_dmpnn_csc) using edge features in an edge-to-edge reduction scheme (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For these operations, if the graph uses edge indices (<computeroutput>graph.map_csc_to_coo != nullptr</computeroutput>), then these indices must be a partition / permutation of the edge IDs.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output edge features [on device] output dimension <computeroutput>out_dim</computeroutput> is <computeroutput>dim_edge * 2</computeroutput> if <computeroutput>concat_own</computeroutput>, otherwise <computeroutput>dim_edge</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge features. [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph. It must be undirected: for every edge, there is a reverse edge present in the structure, too. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rev_edge_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>position indices for each edge of the corresponding reverse edge, i.e. its corresponding position in graph.indices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_own</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, concatenate an edge&apos;s input features to the aggregated output features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_dmpnn.hpp" line="45" column="6" declfile="include/cugraph-ops/operators/agg_dmpnn.hpp" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3f30564a753bcde753a78c2862d7ca2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_dmpnn_e2e_fwd</definition>
        <argsstring>(float *out_edge_feat, const float *in_edge_feat, size_t dim_edge, const csc_s64_t &amp;graph, const int64_t *rev_edge_ids, bool concat_own, const cuda::stream &amp;stream)</argsstring>
        <name>agg_dmpnn_e2e_fwd</name>
        <param>
          <type>float *</type>
          <declname>out_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>rev_edge_ids</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_dmpnn.hpp" line="52" column="6" declfile="include/cugraph-ops/operators/agg_dmpnn.hpp" declline="52" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2424c7844bd528763c9d0ea3b79a03a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_dmpnn_e2e_bwd</definition>
        <argsstring>(float *d_in_edge_feat, const float *d_out_edge_feat, size_t dim_edge, const csc_s32_t &amp;graph, const int32_t *rev_edge_ids, bool concat_own, const cuda::stream &amp;stream)</argsstring>
        <name>agg_dmpnn_e2e_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_in_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>d_out_edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>rev_edge_ids</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for D-MPNN-like full graph aggregation (agg_dmpnn_csc) using edge features in an edge-to-edge reduction scheme (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For these operations, if the graph uses edge indices (<computeroutput>graph.map_csc_to_coo != nullptr</computeroutput>), then these indices must be a partition / permutation of the edge IDs.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_in_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients on input edge features [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">d_out_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input gradients on output edge features. [on device] [dim = <computeroutput>graph.n_indices x out_dim</computeroutput>]. For <computeroutput>out_dim</computeroutput>, see parameter <computeroutput>out_edge_feat</computeroutput> of the forward pass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input CSR full graph. It must be undirected: for every edge, there is a reverse edge present in the structure, too. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rev_edge_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>position indices for each edge of the corresponding reverse edge, i.e. its corresponding position in graph.indices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_own</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, concatenate an edge&apos;s input features to the aggregated output features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_dmpnn.hpp" line="88" column="6" declfile="include/cugraph-ops/operators/agg_dmpnn.hpp" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8f65c727ca44e3d157975c93047b7a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_dmpnn_e2e_bwd</definition>
        <argsstring>(float *d_in_edge_feat, const float *d_out_edge_feat, size_t dim_edge, const csc_s64_t &amp;graph, const int64_t *rev_edge_ids, bool concat_own, const cuda::stream &amp;stream)</argsstring>
        <name>agg_dmpnn_e2e_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_in_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>d_out_edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>rev_edge_ids</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_dmpnn.hpp" line="95" column="6" declfile="include/cugraph-ops/operators/agg_dmpnn.hpp" declline="95" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a6b11dc555640061361206263b125e7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_pre_fwd</definition>
        <argsstring>(float *out, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s32_t &amp;graph, bool concat_own, bool norm_by_out_degree, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_pre_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1aa3a886b21a8c798116e1a6250502eefe" kindref="member">csc_hg_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a heterogenous aggregation (RGCN-like) potentially using a basis decomposition (agg_hg_basis) operating on a graph in a node-to-node reduction (n2n) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is based on basis decomposition and assumes that output node features are concatenated by basis matrix features, i.e. the basis matrix multiplication is performed before aggregation. In particular, we define <computeroutput>dim</computeroutput> and <computeroutput>out_dim</computeroutput> as follows: if (weights_comb != nullptr &amp;&amp; !concat_own) dim = n_bases x out_dim if (weights_comb != nullptr &amp;&amp; concat_own) dim = (n_bases + 1) x out_dim if (weights_comb == nullptr &amp;&amp; !concat_own) dim = graph.n_edge_types x out_dim if (weights_comb == nullptr &amp;&amp; concat_own) dim = (graph.n_edge_types + 1) x out_dim</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x out_dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the input embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights_comb</parametername>
</parameternamelist>
<parameterdescription>
<para>the edge type combination weights. [on device] [dim = <computeroutput>graph.n_edge_types x n_bases</computeroutput>]. This may be <computeroutput>nullptr</computeroutput> if the combination will be included in basis matrix multiplication. In this case, <computeroutput>n_bases</computeroutput> is ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the embeddings. See above how it is defined w.r.t. <computeroutput>out_dim</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n_bases</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bases used. Ignored if <computeroutput>weights_comb == nullptr</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_own</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, we assume that node features were concatenated to the input embeddings after all basis features. In this case, these features are aggregated into the output features with a weight of <computeroutput>1</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_out_degree</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, output is normed by in-degree of the output node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="57" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad82156fb3f8d9e222f0eb152ff06dd90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_pre_fwd</definition>
        <argsstring>(float *out, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s64_t &amp;graph, bool concat_own, bool norm_by_out_degree, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_pre_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2b505a8be046f5c5cf052aadc9dd6123" kindref="member">csc_hg_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="66" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="66" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af848de9b9682ebfab189a78775bda711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_pre_bwd</definition>
        <argsstring>(float *din, float *dw, const float *dout, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s32_t &amp;graph, bool concat_own, bool norm_by_out_degree, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_pre_bwd</name>
        <param>
          <type>float *</type>
          <declname>din</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1aa3a886b21a8c798116e1a6250502eefe" kindref="member">csc_hg_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a heterogenous aggregation (RGCN-like) potentially using a basis decomposition (agg_hg_basis) operating on graph in a node-to-node reduction (n2n) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is based on basis decomposition and assumes that input node features are concatenated by basis matrix features, i.e. the basis matrix multiplication is performed before aggregation in forward. <computeroutput>out_dim</computeroutput>/<computeroutput>dim</computeroutput> is defined as in forward, see the forward docs.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">din</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients on input features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>]. This may be <computeroutput>nullptr</computeroutput> if gradients on input nodes should be ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dw</parametername>
</parameternamelist>
<parameterdescription>
<para>the output weight gradients. [on device] [dim = <computeroutput>graph.n_edge_types x n_bases</computeroutput>]. This may be <computeroutput>nullptr</computeroutput> if the weights were not used in forward pass, or gradients on weights should be ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input gradients of output features. [on device] [dim = <computeroutput>graph.n_dst_nodes x out_dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the input embeddings used in forward. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights_comb</parametername>
</parameternamelist>
<parameterdescription>
<para>the edge type combination weights. [on device] [dim = <computeroutput>graph.n_edge_types x n_bases</computeroutput>]. This may be <computeroutput>nullptr</computeroutput>, in which case <computeroutput>n_bases</computeroutput> is ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the embeddings. See <computeroutput>forward</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n_bases</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bases used. Ignored if <computeroutput>weights_comb == nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_own</parametername>
</parameternamelist>
<parameterdescription>
<para>See <computeroutput>concat_own</computeroutput> in forward. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_out_degree</parametername>
</parameternamelist>
<parameterdescription>
<para>See <computeroutput>norm_by_out_degree</computeroutput> in forward. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="113" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a68145df4af7d5e1139f6874cfd05bbc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_pre_bwd</definition>
        <argsstring>(float *din, float *dw, const float *dout, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s64_t &amp;graph, bool concat_own, bool norm_by_out_degree, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_pre_bwd</name>
        <param>
          <type>float *</type>
          <declname>din</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2b505a8be046f5c5cf052aadc9dd6123" kindref="member">csc_hg_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="124" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="124" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a71dd6fde81c9212b223bda883c49ff6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_pre_big_vertex_fwd</definition>
        <argsstring>(float *out, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s32_t &amp;graph, bool concat_own, bool norm_by_out_degree, int64_t *workspace, int64_t &amp;workspace_size, AggHgImplementationT implementation, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_pre_big_vertex_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1aa3a886b21a8c798116e1a6250502eefe" kindref="member">csc_hg_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>workspace</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>workspace_size</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a805e240044e5ec781d3d5102586df910" kindref="member">AggHgImplementationT</ref></type>
          <declname>implementation</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for aggregation layer (RGCN-like) using the big vertex implementation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is based on basis decomposition and assumes that input node features are concatenated by basis matrix features, i.e. the basis matrix multiplication is performed before aggregation. In particular, we define <computeroutput>dim</computeroutput> and <computeroutput>out_dim</computeroutput> as follows: if (weights_comb != nullptr &amp;&amp; !concat_own) dim = n_bases x out_dim if (weights_comb != nullptr &amp;&amp; concat_own) dim = (n_bases + 1) x out_dim if (weights_comb == nullptr &amp;&amp; !concat_own) dim = graph.n_edge_types x out_dim if (weights_comb == nullptr &amp;&amp; concat_own) dim = (graph.n_edge_types + 1) x out_dim</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x out_dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the input embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights_comb</parametername>
</parameternamelist>
<parameterdescription>
<para>the edge type combination weights. [on device] [dim = <computeroutput>graph.n_edge_types x n_bases</computeroutput>]. This may be <computeroutput>nullptr</computeroutput> if the combination will be included in basis matrix multiplication. In this case, <computeroutput>n_bases</computeroutput> is ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the embeddings. See above how it is defined w.r.t. <computeroutput>out_dim</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n_bases</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bases used. Ignored if <computeroutput>weights_comb == nullptr</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_own</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, we assume that node features were concatenated to the input embeddings after all basis features. In this case, these features are aggregated into the output features with a weight of <computeroutput>1</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_out_degree</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, output is normed by in-degree of the output node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>scratch buffer. [on device] [len = <computeroutput>workspace_size</computeroutput>] Pass a <computeroutput>nullptr</computeroutput> in order to get to know its size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">workspace_size</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace size in bytes. If <computeroutput>workspace</computeroutput> is a <computeroutput>nullptr</computeroutput>, then this will be computed and the caller is expected to allocate the workspace buffer of this size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">implementation</parametername>
</parameternamelist>
<parameterdescription>
<para>select implementation type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="182" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="182" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8e1f1530e85b931d7ef5986aa689e803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_pre_big_vertex_fwd</definition>
        <argsstring>(float *out, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s64_t &amp;graph, bool concat_own, bool norm_by_out_degree, int64_t *workspace, int64_t &amp;workspace_size, AggHgImplementationT implementation, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_pre_big_vertex_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2b505a8be046f5c5cf052aadc9dd6123" kindref="member">csc_hg_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>workspace</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>workspace_size</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a805e240044e5ec781d3d5102586df910" kindref="member">AggHgImplementationT</ref></type>
          <declname>implementation</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="194" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="194" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af83f06aa263d1d9dc7db56515368007c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_post_fwd</definition>
        <argsstring>(float *out, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s32_t &amp;graph, bool concat_own, bool norm_by_out_degree, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_post_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1aa3a886b21a8c798116e1a6250502eefe" kindref="member">csc_hg_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a heterogenous aggregation (RGCN-like) potentially using a basis decomposition (agg_hg_basis) operating on a graph in a node-to-node reduction (n2n) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is based on basis decomposition and assumes that output node features are concatenated by basis matrix features, i.e. the basis matrix multiplication is performed after aggregation. We will refer to the output dimension as <computeroutput>out_dim</computeroutput>, and it is defined as follows: if (weights_comb != nullptr &amp;&amp; !concat_own) out_dim = n_bases x dim if (weights_comb != nullptr &amp;&amp; concat_own) out_dim = (n_bases + 1) x dim if (weights_comb == nullptr &amp;&amp; !concat_own) out_dim = graph.n_edge_types x dim if (weights_comb == nullptr &amp;&amp; concat_own) out_dim = (graph.n_edge_types + 1) x dim</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x out_dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the input embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights_comb</parametername>
</parameternamelist>
<parameterdescription>
<para>the edge type combination weights. [on device] [dim = <computeroutput>graph.n_edge_types x n_bases</computeroutput>]. This may be <computeroutput>nullptr</computeroutput>, in which case <computeroutput>n_bases</computeroutput> is ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the input embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n_bases</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bases used. Ignored if <computeroutput>weights_comb == nullptr</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_own</parametername>
</parameternamelist>
<parameterdescription>
<para>If set, the output node&apos;s features are concatenated to the output such that the output dimension is larger by <computeroutput>dim</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_out_degree</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, output is normed by in-degree of the output node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="244" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="244" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0b753e8efc33762a9fbbf4c0231e5717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_post_fwd</definition>
        <argsstring>(float *out, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s64_t &amp;graph, bool concat_own, bool norm_by_out_degree, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_post_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2b505a8be046f5c5cf052aadc9dd6123" kindref="member">csc_hg_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="253" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="253" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a84309be82a4f8772b6b368bbdeed40d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_post_bwd</definition>
        <argsstring>(float *din, float *dw, const float *dout, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s32_t &amp;graph, bool concat_own, bool norm_by_out_degree, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_post_bwd</name>
        <param>
          <type>float *</type>
          <declname>din</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1aa3a886b21a8c798116e1a6250502eefe" kindref="member">csc_hg_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a heterogenous aggregation (RGCN-like) potentially using a basis decomposition (agg_hg_basis) operating on a graph in a node-to-node reduction (n2n) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is based on basis decomposition and assumes that output node features are concatenated by basis matrix features, i.e. the basis matrix multiplication is performed after aggregation in forward. <computeroutput>out_dim</computeroutput> is defined as in forward, see the forward docs.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">din</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients on input features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>]. This may be <computeroutput>nullptr</computeroutput> if gradients on input nodes should be ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dw</parametername>
</parameternamelist>
<parameterdescription>
<para>the output weight gradients. [on device] [dim = <computeroutput>graph.n_edge_types x n_bases</computeroutput>]. This may be <computeroutput>nullptr</computeroutput> if the weights were not used in forward pass, or gradients on weights should be ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input gradients of output features [on device] [dim = <computeroutput>graph.n_dst_nodes x out_dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the input embeddings from forward. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights_comb</parametername>
</parameternamelist>
<parameterdescription>
<para>the edge type combination weights. [on device] [dim = <computeroutput>graph.n_edge_types x n_bases</computeroutput>]. This may be <computeroutput>nullptr</computeroutput>, in which case <computeroutput>n_bases</computeroutput> is ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the input embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n_bases</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bases used. Ignored if <computeroutput>weights_comb == nullptr</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">concat_own</parametername>
</parameternamelist>
<parameterdescription>
<para>See <computeroutput>concat_own</computeroutput> in forward. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_out_degree</parametername>
</parameternamelist>
<parameterdescription>
<para>See <computeroutput>norm_by_out_degree</computeroutput> in forward. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="301" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="301" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a00f0b9b6b88eebf8ca659dba224f74ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_hg_basis_n2n_post_bwd</definition>
        <argsstring>(float *din, float *dw, const float *dout, const float *in, const float *weights_comb, size_t dim, int n_bases, const csc_hg_s64_t &amp;graph, bool concat_own, bool norm_by_out_degree, const cuda::stream &amp;stream)</argsstring>
        <name>agg_hg_basis_n2n_post_bwd</name>
        <param>
          <type>float *</type>
          <declname>din</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weights_comb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bases</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2b505a8be046f5c5cf052aadc9dd6123" kindref="member">csc_hg_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concat_own</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_out_degree</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_hg_basis.hpp" line="312" column="6" declfile="include/cugraph-ops/operators/agg_hg_basis.hpp" declline="312" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae9ba301c59e95ca49cc67455dc06b01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *node_feat, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a vanilla aggregation (agg_simple) operating on a graph in a node-to-node reduction (n2n) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>given dimensions must be non-0.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="41" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3de0f4cf315d176f02e92680dbbc20d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *node_feat, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="48" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a1ed434eb1ad486959c39665854417d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *node_feat, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="56" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a11ce9816f187f31d59babee8ce4bc396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *node_feat, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="63" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa4dc7c164019393489cc3e21b15d7a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *node_feat, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="71" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af26d4a2bb383d99b4d04b82b990cf964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *node_feat, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="78" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a24653a66c6cf98a970f41e71ea432da7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *node_feat, size_t dim_node, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="86" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a813ccacbc1711718185bed9a5499c503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *node_feat, size_t dim_node, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="93" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a81298e5aa97c31f37ff8d0299c4e312f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *node_feat, size_t dim_node, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="101" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a70e8d6560014ff9a323ae5112f86dfcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *node_feat, size_t dim_node, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="108" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="108" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0511902dd157dda9d7f5c6d2f149639f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *node_feat, size_t dim_node, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="116" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0ddea79c048c1f94f4c1c25684351c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *node_feat, size_t dim_node, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="123" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="123" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a103e12f95123bcb31dfbe0a92941bf0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, const float *dout, const int32_t *out_pos, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a vanilla aggregation (agg_simple) operating on a graph in a node-to-node reduction (n2n) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Dimensions passed must be the same as in forward, regardless of whether the gradient for a given feature is actually required or not.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input node features [on device] [dim = <computeroutput>.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="153" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="153" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a5b42374c1dc88e9b2d9b52041d351c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, const float *dout, const int64_t *out_pos, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="160" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a760205e6a87bcc5092b551f6ee6b509a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(__half *d_node_feat, const __half *dout, const int32_t *out_pos, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="168" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4d71d8e05455720d9a78ebef1dcc87f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(__half *d_node_feat, const __half *dout, const int64_t *out_pos, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="175" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="175" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a7de37a6a47a2da3eb1575885b0de8b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="183" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="183" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aee3599dee453908d861a590c94f5d5a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="190" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="190" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a9c5078db8cd7ca0c8a7c20382894e265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, const float *dout, const int32_t *out_pos, size_t dim_node, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="198" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab27043379ec91d731ad4b93a95f7b1ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, const float *dout, const int64_t *out_pos, size_t dim_node, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="205" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="205" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad4f9dc5de5bbd13f513dda3b9514dad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(__half *d_node_feat, const __half *dout, const int32_t *out_pos, size_t dim_node, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="213" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="213" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae139c1a4db9926d7571f6d05167c4da3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(__half *d_node_feat, const __half *dout, const int64_t *out_pos, size_t dim_node, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="220" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="220" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac221f75dc17a8e9809b24347bc002d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_node, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="228" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="228" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aee485fec278405cd9ffc5ba36df9d654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_node, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="235" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="235" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a62af81b413e48a29f989b7b8cc946273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *edge_feat, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a simple aggregation (agg_simple) using edge features in an edge-to-node reduction (e2n) operating on a graph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>given dimensions must be non-0. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> may arbitrary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge features. [on device] [dim = <computeroutput>.n_edges x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="269" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="269" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac1e690a8e423c2bdbb17b1daae299cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *edge_feat, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="276" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="276" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad9efd8f41c285ff19a0e02cb13982042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *edge_feat, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="284" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="284" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8190e8e82ccff87e582b2bd6eb2a77c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *edge_feat, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="291" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="291" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa3131ceae1ee28b358c845134ea6386a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *edge_feat, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="299" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="299" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aed489f495afa38bfa86274c619d40179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *edge_feat, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="306" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="306" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abdb3c04f2f414ee4b3f7a4194535730a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *edge_feat, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="314" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="314" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2065ae6ec1ba389c25546d090b5a142a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *edge_feat, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="321" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="321" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a712370f929d065e86322a00ab1489468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *edge_feat, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="329" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="329" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2193d6505ec67ac8cd3a092fc1e657ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *edge_feat, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="336" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="336" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1adfc2ed0b4daaad6741890bda6b9acd03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *edge_feat, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="344" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="344" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a481d5eb9459edcdab6392e53f3e6ded9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *edge_feat, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="351" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="351" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a14a32b40c62dc52218a409f84111e400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(float *d_edge_feat, const float *dout, const int32_t *out_pos, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a simple aggregation (agg_simple) using edge features in an edge-to-node reduction (e2n) operating on a graph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Dimensions passed must be the same as in forward, regardless of whether the gradient for a given feature is actually required or not. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>d_edge_feat</computeroutput> may arbitrary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input edge features [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="386" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="386" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a80e0941134899ab1a821f33e444e71d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(float *d_edge_feat, const float *dout, const int64_t *out_pos, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="393" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="393" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae0c9f48a6846bc3e476ee69a7a4ef2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(__half *d_edge_feat, const __half *dout, const int32_t *out_pos, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="401" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="401" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac8fc6f5b679643d11bfd570a09833809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(__half *d_edge_feat, const __half *dout, const int64_t *out_pos, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="408" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="408" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a68f5f51ce822c93ef10850bcfe4c0094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="416" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="416" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ade3b1625a10b5ad59a1577f950580eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="423" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="423" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a201e79776be2462be0cb8fb25e08c1a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(float *d_edge_feat, const float *dout, const int32_t *out_pos, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="431" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="431" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa309064f38b708dbee241ccf6017d00c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(float *d_edge_feat, const float *dout, const int64_t *out_pos, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="438" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="438" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a5425d978c38a6b9e7e835a18e9c3733b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(__half *d_edge_feat, const __half *dout, const int32_t *out_pos, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="446" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="446" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae8be9ceb11a7cafa05f42da3ab446842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(__half *d_edge_feat, const __half *dout, const int64_t *out_pos, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="453" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="453" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae278d92899265168cc7beae7b8651247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="461" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="461" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2b4c2f2292e97d88e718111844b333c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="468" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="468" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab0c967d69510e6bbd65ccb096f01f84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *node_feat, const float *edge_feat, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a simple aggregation (agg_simple) using edge features and node features in an edge-to-node reduction (e2n) and a node-to-node reduction (n2n) operating on a graph. The results of both individual aggregations are simply concatenated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>given dimensions must be non-0. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> may arbitrary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge)</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge features. [on device] [dim = <computeroutput>.n_edges x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="506" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="506" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a62f30ace0b1e94b4c024f24f3ba1689c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *node_feat, const float *edge_feat, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="515" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="515" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aff8a64570fc01f06b75655dfd62acce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *node_feat, const __half *edge_feat, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="525" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="525" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3f357a080bf75c12739ab0720e2cbf7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *node_feat, const __half *edge_feat, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="534" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="534" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2ded13407fea5d7704419e030995f16b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="544" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="544" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a082c7433de2224d218677e410c96b249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="553" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="553" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab2c6b140be6c6603276da3ec064dd129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, const float *node_feat, const float *edge_feat, size_t dim_node, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="563" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="563" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a27dc2089d8bfe12030911f994f20ecf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, const float *node_feat, const float *edge_feat, size_t dim_node, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="572" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="572" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4ad038665955c0dd0b617ce6655ef1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(__half *out, int32_t *out_pos, const __half *node_feat, const __half *edge_feat, size_t dim_node, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="582" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="582" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa26418cc4c7ea3dffb51bb9a746de594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(__half *out, int64_t *out_pos, const __half *node_feat, const __half *edge_feat, size_t dim_node, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="591" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="591" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4c1ed7c11af246bc0a0f3fca8d1a4f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int32_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, size_t dim_node, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="601" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="601" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a03e9bbb913c7b3fa2e6affd03f71b8dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, int64_t *out_pos, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, size_t dim_node, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="610" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="610" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a57b0b19e30e1e67e8ac3a1aa3c449d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_feat, const float *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a simple aggregation (agg_simple) using edge features and node features in an edge-to-node reduction (e2n) and a node-to-node reduction (n2n) operating on a graph. The results of both individual aggregations are simply concatenated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Dimensions passed must be the same as in forward, regardless of whether the gradient for a given feature is actually required or not. </para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>d_edge_feat</computeroutput> may arbitrary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input edge features [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge)</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x (dim_node + dim_edge)</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the edge features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="651" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="651" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a61ad1522a1273ccbf54bc7537b162fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_feat, const float *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="660" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="660" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac21112e45753e289c6e4b25eeab22979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_edge_feat, const __half *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="670" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="670" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a965ca2069e0a317f09e5cd91645534e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_edge_feat, const __half *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="679" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="679" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a7a0596c5e85d258c37b34a04567c578b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="689" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="689" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae0213e31489ff7644e103d5afa128b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="698" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="698" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4831f44709bb9ca4af17673a9087f63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_feat, const float *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="708" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="708" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a52fd1d0df821d3c7e2e704a098292e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_feat, const float *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="717" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="717" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a84e31f0fdd010bd69d8420befd48c4db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_edge_feat, const __half *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="727" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="727" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab0d3a37a461128b7adad9b02953f5f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(__half *d_node_feat, __half *d_edge_feat, const __half *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="736" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="736" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a6d22262edfdc1b17651319d8cd25f28c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int32_t *out_pos, size_t dim_node, size_t dim_edge, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="746" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="746" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a42bb80121c6bac269da18eff5ee0a434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_simple_n2n_e2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_node_feat, __nv_bfloat16 *d_edge_feat, const __nv_bfloat16 *dout, const int64_t *out_pos, size_t dim_node, size_t dim_edge, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_simple_n2n_e2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_simple.hpp" line="755" column="6" declfile="include/cugraph-ops/operators/agg_simple.hpp" declline="755" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa4aec2f56e48d91b65dda3402d43f326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_weighted_n2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, float *degree, const float *node_feat, const float *edge_weight, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_weighted_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a weighted aggregation (agg_weighted) using node features in an node-to-node reduction (n2n) operating on a graph where each neighbor is weighted according to its edge weight. For op == kMean, the mean corresponds to the weighted average per dimension given the set of neighbors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output aggregated embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>the in-degree of each node, i.e. the sum of incoming edge weights. [on device] [dim = &apos;graph.n_dst_nodes x 1<computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" kindref="member">AggOpT::kMean</ref>, may be</computeroutput>nullptr` otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge weights [on device] [dim = <computeroutput>graph.n_edges x 1</computeroutput>] Note that those should we indexed similarly as indices, i.e. the edge corresponding to <computeroutput>indices[off]</computeroutput> should have the weight <computeroutput>edge_weight[off]</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_weighted.hpp" line="49" column="6" declfile="include/cugraph-ops/operators/agg_weighted.hpp" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab7730b0fd655ed9dcc0e54455d909501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_weighted_n2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, float *degree, const float *node_feat, const float *edge_weight, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_weighted_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_weighted.hpp" line="58" column="6" declfile="include/cugraph-ops/operators/agg_weighted.hpp" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac3ae928e509b844169268f3a30a5ca63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_weighted_n2n_fwd</definition>
        <argsstring>(float *out, int32_t *out_pos, float *degree, const float *node_feat, const float *edge_weight, size_t dim_node, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_weighted_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_weighted.hpp" line="68" column="6" declfile="include/cugraph-ops/operators/agg_weighted.hpp" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab5d928b1ac43337c18f565fd34f8306d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_weighted_n2n_fwd</definition>
        <argsstring>(float *out, int64_t *out_pos, float *degree, const float *node_feat, const float *edge_weight, size_t dim_node, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_weighted_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_weighted.hpp" line="77" column="6" declfile="include/cugraph-ops/operators/agg_weighted.hpp" declline="77" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a045d459410ead54c086ae3285c2c61f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_weighted_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_weight, const float *dout, const float *out, const int32_t *out_pos, const float *edge_weight, const float *degree, const float *node_feat, size_t dim_node, const csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_weighted_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a weighted aggregation (agg_weighted) operating on a graph in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of input node features [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d_edge_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradients of edge weights [on device] [dim = <computeroutput>graph.n_edges x 1</computeroutput>] If gradient not required, may be <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dout</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node feature gradients. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" kindref="member">AggOpT::kMean</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of min/max values [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" kindref="member">AggOpT::kMin</ref> and <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" kindref="member">AggOpT::kMax</ref>, may be <computeroutput>nullptr</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge weights [on device] [dim = <computeroutput>graph.n_edges x 1</computeroutput>] Note that those should we indexed similarly as indices, i.e. the edge corresponding to <computeroutput>indices[off]</computeroutput> should have the weight <computeroutput>edge_weight[off]</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>the in-degree of each node, i.e. the sum of incoming edge weights. [on device] [dim = &apos;graph.n_dst_nodes x 1<computeroutput>] Only required for <ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" kindref="member">AggOpT::kMean</ref>, may be</computeroutput>nullptr` otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node features. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensionality of the node features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>aggregation operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_weighted.hpp" line="123" column="6" declfile="include/cugraph-ops/operators/agg_weighted.hpp" declline="123" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab8281537c7ecbc74ced683815d7aacbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_weighted_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_weight, const float *dout, const float *out, const int64_t *out_pos, const float *edge_weight, const float *degree, const float *node_feat, size_t dim_node, const csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_weighted_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_weighted.hpp" line="135" column="6" declfile="include/cugraph-ops/operators/agg_weighted.hpp" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8b285bff66daf32211832a0b55e90711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_weighted_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_weight, const float *dout, const float *out, const int32_t *out_pos, const float *edge_weight, const float *degree, const float *node_feat, size_t dim_node, const bipartite_csc_s32_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_weighted_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_weighted.hpp" line="148" column="6" declfile="include/cugraph-ops/operators/agg_weighted.hpp" declline="148" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0ab710487a958624384b7685c56c8c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::agg_weighted_n2n_bwd</definition>
        <argsstring>(float *d_node_feat, float *d_edge_weight, const float *dout, const float *out, const int64_t *out_pos, const float *edge_weight, const float *degree, const float *node_feat, size_t dim_node, const bipartite_csc_s64_t &amp;graph, AggOpT op, const cuda::stream &amp;stream)</argsstring>
        <name>agg_weighted_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dout</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>out_pos</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" kindref="member">AggOpT</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/agg_weighted.hpp" line="160" column="6" declfile="include/cugraph-ops/operators/agg_weighted.hpp" declline="160" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a82d63bf02665d2089ba32feb60ef87bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *node_feat, const float *attn_weights, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat) operating on a graph in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim_node / params.num_heads</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim_node + dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="51" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a645f048a20c924ce756fb6966fcd501f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *node_feat, const float *attn_weights, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="59" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a38ff9b77ab3b2ea7005fd0f6c6f2269b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(__half *out, float *sm_scores, const __half *node_feat, const __half *attn_weights, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="67" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a30811e74d7d3591a2b09bc53f147ce4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(__half *out, float *sm_scores, const __half *node_feat, const __half *attn_weights, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="75" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="75" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a9b7709d8c32defdd7ab0e6c24c92a793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, float *sm_scores, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *attn_weights, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="83" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad5c54335f01533c434901c9bf82cb4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, float *sm_scores, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *attn_weights, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="91" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="91" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aac1f8b7436e266b43ba2183b027a6e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *node_feat, const float *edge_feat, const float *attn_weights, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat) operating on a graph in a node-to-node reduction (n2n) but using edge features, too, for computing the dot product (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim_node / params.num_heads</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all edges [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat and edge features [on device] [dim = <computeroutput>dim_node + dim_node + dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the edge embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="139" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="139" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a1891d5af3b9475743e510cc3ec96b7b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *node_feat, const float *edge_feat, const float *attn_weights, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="149" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a75973dabb74d2e1a883811c989137bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, float *sm_scores, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="159" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="159" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa51c70bc3fed8149d4c6d95d162cc0f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, float *sm_scores, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="169" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae6f963083be738759b42bb97bf164c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(__half *out, float *sm_scores, const __half *node_feat, const __half *edge_feat, const __half *attn_weights, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="179" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="179" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a292e4b86ca5010013d9c051c0e9dbccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(__half *out, float *sm_scores, const __half *node_feat, const __half *edge_feat, const __half *attn_weights, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="189" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="189" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a88bf9350ac808a633d2dc83dc7ce30ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *node_feat, const float *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat) operating on a graph in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim_node / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_node_feat</computeroutput> and <computeroutput>grad_weights</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all nodes [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on all attention weights [on device] [dim = <computeroutput>dim_node + dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic feature-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * dim_node] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = graph.n_dst_nodes * dim_weight`] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim_node + dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="247" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="247" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a652259b062d74a41bae4d5c9e91579dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *node_feat, const float *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="260" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="260" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a86400e71599601e9d818e314c94b4c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__half *grad_node_feat, __half *grad_weights, __half *grad_wspace_feat, __half *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="273" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="273" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a295d3b7adcc72593547c2a6d5ac47e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__half *grad_node_feat, __half *grad_weights, __half *grad_wspace_feat, __half *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="286" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="286" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab195a2844ca2a79fc86c3f681e25087e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_node_feat, __nv_bfloat16 *grad_weights, __nv_bfloat16 *grad_wspace_feat, __nv_bfloat16 *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="299" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="299" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a188ed03d1cefed133edcc53d53725958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_node_feat, __nv_bfloat16 *grad_weights, __nv_bfloat16 *grad_wspace_feat, __nv_bfloat16 *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="312" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="312" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a55205e0baddf184b89a30df81b93b537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="325" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="325" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a270bde93499e48ff122bf7091a50988b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="338" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="338" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a968f7c819bec4010dcf2b0ea57d9239f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="351" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="351" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa9ce7806425a78e5a32be02f0cfa73cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="364" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="364" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a86650eb4233f0dad2eab1bec8bb3e69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__half *grad_node_feat, float *grad_weights, __half *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="377" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="377" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab0bfe9c59068618b1dc164b65caa4b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__half *grad_node_feat, float *grad_weights, __half *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="390" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="390" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0f10d394040d05dcb1c0f8cffe16b349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_node_feat, float *grad_weights, __nv_bfloat16 *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="403" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="403" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0dc4ef0037e8e30ab4699b1c0916a7ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_node_feat, float *grad_weights, __nv_bfloat16 *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="416" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="416" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a5f36381251429d8f55b57e2f87cb9aef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *node_feat, const float *edge_feat, const float *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat) operating on a graph in a node-to-node reduction (n2n) but using edge features, too, for computing the dot product (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim_node / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_node_feat</computeroutput>, <computeroutput>grad_edge_feat</computeroutput> and <computeroutput>grad_weights</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all nodes [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on embeddings of all edges [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on all attention weights [on device] [dim = <computeroutput>dim_node + dim_node + dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic feature-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * dim_node] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = graph.n_dst_nodes * dim_weight`] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all edges [on device] [dim = <computeroutput>n_edges x dim_edge</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim_node + dim_node + dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the edge embeddings It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="486" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="486" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab0c8058c92d43908d7221a5520b44bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *node_feat, const float *edge_feat, const float *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="502" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="502" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a13da5b72edb49dc58fc2a613dad9f27b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_node_feat, __nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_weights, __nv_bfloat16 *grad_wspace_feat, __nv_bfloat16 *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="519" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="519" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a16af7c825a0a5cf838d4cfb8baa0b81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_node_feat, __nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_weights, __nv_bfloat16 *grad_wspace_feat, __nv_bfloat16 *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="535" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="535" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1acc30feba1ad55740b6840a76b018906e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__half *grad_node_feat, __half *grad_edge_feat, __half *grad_weights, __half *grad_wspace_feat, __half *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="552" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="552" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a79a2173050984bc29a7c4ad8d8b479b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__half *grad_node_feat, __half *grad_edge_feat, __half *grad_weights, __half *grad_wspace_feat, __half *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="568" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="568" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a7b0ac0fcefd6112a45f2bd8e5c26e630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="585" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="585" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a224b6cd1c49748794158d40504864b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="601" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="601" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a110a790c382a26f902dc5635447b3ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="618" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="618" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aacf21cda605484e8575a984e42783848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="634" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="634" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a1f0bddc9ffe5a4ef4198a94887350222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_node_feat, __nv_bfloat16 *grad_edge_feat, float *grad_weights, __nv_bfloat16 *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="651" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="651" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a5c6e1b5a6201d4d1b0086c45ee207b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_node_feat, __nv_bfloat16 *grad_edge_feat, float *grad_weights, __nv_bfloat16 *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *node_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="667" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="667" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a364da97715c4ad2b14dd6c97a0693080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__half *grad_node_feat, __half *grad_edge_feat, float *grad_weights, __half *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="684" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="684" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af7329e5bbf57f18528b851bb6b312e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__half *grad_node_feat, __half *grad_edge_feat, float *grad_weights, __half *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *node_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="700" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="700" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae8e3d40f5d5e0de4af1a1c745d0cfe10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *src_feat, const float *dst_feat, const float *attn_weights, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat) operating on bipartite graphs in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim_node / params.num_heads</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim_node + dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="752" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="752" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac32b84ddbd7dc9375cfc49f66b7c58fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *src_feat, const float *dst_feat, const float *attn_weights, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="761" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="761" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae1fa686d006220fd4a0a4c4070eafba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(__half *out, float *sm_scores, const __half *src_feat, const __half *dst_feat, const __half *attn_weights, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="770" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="770" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a59e393a51373793190502425be0bb596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(__half *out, float *sm_scores, const __half *src_feat, const __half *dst_feat, const __half *attn_weights, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="779" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="779" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac9bce4b6841056fe0ff3f5a3a45b3ba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, float *sm_scores, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *attn_weights, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="788" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="788" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a6ecbbb5d524ad81eeea507c5d1036d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, float *sm_scores, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *attn_weights, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="797" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="797" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aec7859072d5fd570c75265747a852f58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *src_feat, const float *dst_feat, const float *edge_feat, const float *attn_weights, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat) operating on bipartite graphs in a node-to-node reduction (n2n) but using edge features, too, for computing the dot product (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim_node / params.num_heads</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all edges [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat and edge features [on device] [dim = <computeroutput>dim_node + dim_node + dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the edge embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="848" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="848" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abc30256b87aaf0e34fd8b4412d77ccef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *src_feat, const float *dst_feat, const float *edge_feat, const float *attn_weights, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="859" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="859" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a54b70b2c7ff354442b339fe5d2da71fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, float *sm_scores, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="870" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="870" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8097509233b7816a44b55da54953dc54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, float *sm_scores, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="881" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="881" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab9d26d0658b29151941314fd9709bb92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(__half *out, float *sm_scores, const __half *src_feat, const __half *dst_feat, const __half *edge_feat, const __half *attn_weights, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="892" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="892" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aea46f9ff092eed30e81bd74de6ea02b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_fwd</definition>
        <argsstring>(__half *out, float *sm_scores, const __half *src_feat, const __half *dst_feat, const __half *edge_feat, const __half *attn_weights, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="903" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="903" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0b056b1965addff37592152205925af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *src_feat, const float *dst_feat, const float *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat) operating on bipartite graphs in a node-to-node reduction (n2n) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim_node / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_src_feat</computeroutput>, <computeroutput>grad_dst_feat</computeroutput> and <computeroutput>grad_weights</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all source nodes [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all destination nodes [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on all attention weights [on device] [dim = <computeroutput>dim_node + dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic feature-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * dim_node] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = graph.n_dst_nodes * dim_weight`] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim_node + dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the softmax scores from the forward pass. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="966" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="966" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad5fd60e699cc4028a9535c8fc089ecc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *src_feat, const float *dst_feat, const float *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="981" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="981" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab3a3929217c417534db640c24d2653de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__half *grad_src_feat, __half *grad_dst_feat, __half *grad_weights, __half *grad_wspace_feat, __half *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="996" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="996" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae6342b2cba495ea5352ad1b17c80a88e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__half *grad_src_feat, __half *grad_dst_feat, __half *grad_weights, __half *grad_wspace_feat, __half *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1011" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1011" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0acdb83ed55783c11c20936d90fcd73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, __nv_bfloat16 *grad_weights, __nv_bfloat16 *grad_wspace_feat, __nv_bfloat16 *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1026" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1026" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8e99f05127bd7a2539a204fca181e693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, __nv_bfloat16 *grad_weights, __nv_bfloat16 *grad_wspace_feat, __nv_bfloat16 *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1041" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1041" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af6ff8dd81115480c5db15ef2c89dfbed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1056" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1056" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae6c135b4787bdd1639894f60b23d3133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1071" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1071" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2108357489c135780630f695e425668c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1086" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1086" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a436d637c9e5af86d4e38fee41181cb2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1101" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac8e2c6654fe74a9d1e6f64bb832a3109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__half *grad_src_feat, __half *grad_dst_feat, float *grad_weights, __half *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1117" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2d30560a8b252d87356c376c0a31a1b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__half *grad_src_feat, __half *grad_dst_feat, float *grad_weights, __half *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1132" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3305317e235e25b33cecb1ca328e7881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, float *grad_weights, __nv_bfloat16 *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1147" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8c3f458dcf06a76dafd80fc8cbe69fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, float *grad_weights, __nv_bfloat16 *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1162" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1162" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ada593eee95b6908aa2af004786722779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *src_feat, const float *dst_feat, const float *edge_feat, const float *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat) operating on bipartite graphs in a node-to-node reduction (n2n) but using edge features, too, for computing the dot product (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim_node / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_node_feat</computeroutput>, <computeroutput>grad_edge_feat</computeroutput> and <computeroutput>grad_weights</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all source nodes [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all destination nodes [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on embeddings of all edges [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on all attention weights [on device] [dim = <computeroutput>dim_node + dim_node + dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic feature-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * dim_node] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = graph.n_dst_nodes * dim_weight`] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all edges [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim_node + dim_node + dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the edge embeddings It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1235" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1235" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a39c660fb6c429b8b300277dc0ef72b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *src_feat, const float *dst_feat, const float *edge_feat, const float *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1253" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1253" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a1e696931432bb5fe8d27c71b8aba4322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, __nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_weights, __nv_bfloat16 *grad_wspace_feat, __nv_bfloat16 *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1272" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1272" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a32ba8da9f0241e8b3078bce2a5023270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, __nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_weights, __nv_bfloat16 *grad_wspace_feat, __nv_bfloat16 *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1290" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1290" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3e4e37ba1534ad397d6e1ff680737cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__half *grad_src_feat, __half *grad_dst_feat, __half *grad_edge_feat, __half *grad_weights, __half *grad_wspace_feat, __half *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1309" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1309" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a332971bb55dce52e25105245211ce528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__half *grad_src_feat, __half *grad_dst_feat, __half *grad_edge_feat, __half *grad_weights, __half *grad_wspace_feat, __half *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1327" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1327" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a66650b6857daaf062cf92a76da6c07c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1346" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1346" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab99f6f43f3bd68bd4d8cf65a2232ffdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1364" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1364" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ade3d5bb5c8d9acc3a511b1c5fc99f819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1383" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1383" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a84492648510efbc54abcd9e983440e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1401" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1401" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae783221644711d12b1b2910895fa514c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__half *grad_src_feat, __half *grad_dst_feat, __half *grad_edge_feat, float *grad_weights, __half *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1420" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1420" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3d07329ee6813e23c7599a6eed62fd20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__half *grad_src_feat, __half *grad_dst_feat, __half *grad_edge_feat, float *grad_weights, __half *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __half *grad_out, const __half *src_feat, const __half *dst_feat, const __half *edge_feat, const __half *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1438" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1438" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a784974cd68f4a3fe8ee6feaeb10a493e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, __nv_bfloat16 *grad_edge_feat, float *grad_weights, __nv_bfloat16 *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1457" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1457" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abb64b2d9706812d5e669ab075af81ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_n2n_efeat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, __nv_bfloat16 *grad_edge_feat, float *grad_weights, __nv_bfloat16 *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *attn_weights, const float *sm_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, int dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_n2n_efeat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat.hpp" line="1475" column="6" declfile="include/cugraph-ops/operators/mha_gat.hpp" declline="1475" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1add3e194c119237aa464c3f45427fc19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, float *act_scores, const float *node_feat, const float *attn_weights, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat_v2) with an activation only prior to the dot product operating on a graph in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">act_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output activation scores for the backward pass. [on device] [dim = <computeroutput>n_edges x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="53" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad39baff6be1287dd6ad97cb6271f2177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, float *act_scores, const float *node_feat, const float *attn_weights, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="62" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="62" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a971f821fd589598ecf6f0b1ab46a96fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, float *act_scores, const float *node_feat, const float *edge_feat, const float *attn_weights, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat_v2) with an activation only prior to the dot product operating on a graph in a node-to-node reduction (n2n) but using edge features, too, for computing the dot product (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">act_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output activation scores for the backward pass. [on device] [dim = <computeroutput>n_edges x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all edges [on device] [dim = <computeroutput>n_edges x dim</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat and edge features [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="112" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="112" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a290e1703b1e65ea68f9519e28a8c0e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, float *act_scores, const float *node_feat, const float *edge_feat, const float *attn_weights, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="122" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="122" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a849738a6cc93087a8adcd08251d3b111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *node_feat, const float *attn_weights, const float *sm_scores, const float *act_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat_v2) with an activation only prior to the dot product operating on a graph in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_node_feat</computeroutput> and <computeroutput>grad_weights</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all nodes [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on all attention weights [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic feature-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * dim] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic weight-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = graph.n_dst_nodes * dim`] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">act_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output activation scores from the forward pass. [on device] [dim = <computeroutput>n_edges x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="183" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="183" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a96b233cbcffe90e3cd2c6286ed991410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *node_feat, const float *attn_weights, const float *sm_scores, const float *act_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="197" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="197" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8aab92672f455ef97c2f537b2afa3c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *node_feat, const float *attn_weights, const float *sm_scores, const float *act_scores, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat_v2) with an activation only prior to the dot product operating on a graph in a node-to-node reduction (n2n) but using edge features, too, for computing the dot product (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_node_feat</computeroutput>, <computeroutput>grad_edge_feat</computeroutput> and <computeroutput>grad_weights</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all nodes [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on embeddings of all edges [on device] [dim = <computeroutput>n_edges x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on all attention weights [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic feature-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * dim] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic weight-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = graph.n_dst_nodes * dim`] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">act_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output activation scores from the forward pass. [on device] [dim = <computeroutput>n_edges x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="266" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="266" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae817bf9f33ec51c231f33c5587d1f019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_node_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *node_feat, const float *attn_weights, const float *sm_scores, const float *act_scores, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="281" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="281" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8cc18f556ddc72f24c538f8e92af8221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, float *act_scores, const float *src_feat, const float *dst_feat, const float *attn_weights, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat_v2) with an activation only prior to the dot product operating on bipartite graphs in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if <computeroutput>params.concat_heads = true</computeroutput> (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">act_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output activation scores for the backward pass. [on device] [dim = <computeroutput>graph.n_indices x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="334" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="334" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a431ba50c403972c67e99bc50ab19d596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, float *act_scores, const float *src_feat, const float *dst_feat, const float *attn_weights, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="344" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="344" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a7e0fcbd98f5b819e0adab5281264cec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, float *act_scores, const float *src_feat, const float *dst_feat, const float *edge_feat, const float *attn_weights, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat_v2) with an activation only prior to the dot product operating on bipartite graphs in a node-to-node reduction (n2n) but using edge features, too, for computing the dot product (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">act_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output activation scores for the backward pass. [on device] [dim = <computeroutput>graph.n_indices x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all edges [on device] [dim = <computeroutput>graph.n_indices x dim</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat and edge features [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="397" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="397" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1afc4351232231ae4ed4e3f191d0c76640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, float *act_scores, const float *src_feat, const float *dst_feat, const float *edge_feat, const float *attn_weights, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="408" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="408" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a9549b70204756cf913d0f3cba233b759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *src_feat, const float *attn_weights, const float *sm_scores, const float *act_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat_v2) with an activation only prior to the dot product operating on bipartite graphs in a node-to-node reduction (n2n) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_src_feat</computeroutput>, <computeroutput>grad_dst_feat</computeroutput> and <computeroutput>grad_weights</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all source nodes [on device] [dim = <computeroutput>graph.n_src_nodes x dim</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all destination nodes [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on all attention weights [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic feature-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * dim] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic weight-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = graph.n_dst_nodes * dim`] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">act_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output activation scores from the forward pass. [on device] [dim = <computeroutput>graph.n_indices x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="471" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="471" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a95b18962c6e04c8ce8d3ec2b1473fc22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *src_feat, const float *attn_weights, const float *sm_scores, const float *act_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="486" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="486" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3c4faabfef9ecea56374b3ba77b46f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *src_feat, const float *attn_weights, const float *sm_scores, const float *act_scores, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a &quot;GAT-like&quot; multi-head attention layer (mha_gat_v2) with an activation only prior to the dot product operating on bipartite graphs in a node-to-node reduction (n2n) but using edge features, too, for computing the dot product (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_node_feat</computeroutput>, <computeroutput>grad_node_feat</computeroutput>, <computeroutput>grad_edge_feat</computeroutput> and <computeroutput>grad_weights</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all source nodes [on device] [dim = <computeroutput>graph.n_src_nodes x dim</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on input embeddings of all destination nodes [on device] [dim = <computeroutput>graph.n_dst_nodes x dim</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on embeddings of all edges [on device] [dim = <computeroutput>graph.n_indices x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradients on all attention weights [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic feature-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * dim] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_wspace_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic weight-gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = graph.n_dst_nodes * dim`] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attn_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the weights applied to in/out feat [on device] [dim = <computeroutput>dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">act_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output activation scores from the forward pass. [on device] [dim = <computeroutput>graph.n_indices x dim</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="556" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="556" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac6d9e84083f3dc760fc5045e379009aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_gat_v2_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_src_feat, float *grad_dst_feat, float *grad_edge_feat, float *grad_weights, float *grad_wspace_feat, float *grad_wspace_weight, float *grad_sm_scores, const float *grad_out, const float *src_feat, const float *attn_weights, const float *sm_scores, const float *act_scores, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim, const cuda::stream &amp;stream)</argsstring>
        <name>mha_gat_v2_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weights</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_wspace_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>attn_weights</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>act_scores</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_gat_v2.hpp" line="572" column="6" declfile="include/cugraph-ops/operators/mha_gat_v2.hpp" declline="572" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a831fde9035ed291bf0124b42f2f75d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *key_feat, const float *query_feat, const float *value_feat, const float *score_bias, const float *score_weight, bool norm_by_dim, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_bias</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a simple multi-head attention layer (mha_simple) operating on a graph in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>The activation in <computeroutput>params</computeroutput> is ignored as of now.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>SZ x params.num_heads x graph.n_indices</computeroutput>] with <computeroutput>SZ=2</computeroutput> if <computeroutput>score_weight</computeroutput> is passed <computeroutput>nullptr</computeroutput>, <computeroutput>SZ=3</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;key&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;query&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;value&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_bias</parametername>
</parameternamelist>
<parameterdescription>
<para>bias added to the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight used to scale the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>if set, divide result of dot-product by <computeroutput>sqrt(dim_head)</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="66" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a98c6ee0036ae7da22e6f38a041d562bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *key_feat, const float *query_feat, const float *value_feat, const float *score_bias, const float *score_weight, bool norm_by_dim, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_bias</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="78" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="78" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2a923685c34a59b88a5d150d20ca326d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *key_feat, const float *query_feat, const float *value_feat, const float *edge_feat, const float *score_bias, const float *score_weight, bool norm_by_dim, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_bias</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a simple multi-head attention layer (mha_simple) operatating on a graph in a node-to-node reduction (n2n) incorporating edge features (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>The activation in <computeroutput>params</computeroutput> is ignored as of now.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>SZ x params.num_heads x graph.n_indices</computeroutput>] with <computeroutput>SZ=2</computeroutput> if <computeroutput>score_weight</computeroutput> is passed <computeroutput>nullptr</computeroutput>, <computeroutput>SZ=3</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;key&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;query&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;value&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the edge feature embeddings of all input edges [on device] [dim = <computeroutput>n_edges x dim_node</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_bias</parametername>
</parameternamelist>
<parameterdescription>
<para>bias added to the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight used to scale the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>if set, divide result of dot-product by <computeroutput>sqrt(dim_head)</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="143" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="143" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a327a92dd7c94649cb4290033607e7859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *key_feat, const float *query_feat, const float *value_feat, const float *edge_feat, const float *score_bias, const float *score_weight, bool norm_by_dim, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_bias</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="156" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="156" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a77c83811800aa7d04906e00bee92cbdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_bwd</definition>
        <argsstring>(float *grad_key_feat, float *grad_query_feat, float *grad_value_feat, float *grad_workspace, float *grad_sm_scores, float *grad_score_bias, float *grad_score_weight, const float *grad_out, const float *key_feat, const float *query_feat, const float *value_feat, const float *score_weight, const float *sm_scores, bool norm_by_dim, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_key_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_query_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_value_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_workspace</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_bias</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a simple multi-head attention layer (mha_simple) operating on a graph in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_key_feat</computeroutput>, <computeroutput>grad_query_feat</computeroutput> and <computeroutput>grad_value_feat</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed. </para>
</simplesect>
<simplesect kind="note"><para>The activation in <computeroutput>params</computeroutput> is ignored as of now.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;key&quot; embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;query&quot; embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;value&quot; embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * (2 * dim_node)] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_score_bias</parametername>
</parameternamelist>
<parameterdescription>
<para>gradient on bias added to the un-normalized softmax scores (not computed when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>gradient on weighted applied to the un-normalized softmax scores (not computed when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;key&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;query&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;value&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight used to scale the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>SZ x params.num_heads x graph.n_indices</computeroutput>] with <computeroutput>SZ=2</computeroutput> if <computeroutput>score_weight</computeroutput> is passed <computeroutput>nullptr</computeroutput>, <computeroutput>SZ=3</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>if set, divide result of dot-product by <computeroutput>sqrt(dim_head)</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="242" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="242" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab048dc7cd4cba61f44017733dd72dfd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_bwd</definition>
        <argsstring>(float *grad_key_feat, float *grad_query_feat, float *grad_value_feat, float *grad_workspace, float *grad_sm_scores, float *grad_score_bias, float *grad_score_weight, const float *grad_out, const float *key_feat, const float *query_feat, const float *value_feat, const float *score_weight, const float *sm_scores, bool norm_by_dim, const csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_key_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_query_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_value_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_workspace</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_bias</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="260" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="260" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8fa88ac1b843af45ab8a9f7abafe4504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_key_feat, float *grad_query_feat, float *grad_value_feat, float *grad_edge_feat, float *grad_workspace, float *grad_sm_scores, float *grad_score_bias, float *grad_score_weight, const float *grad_out, const float *key_feat, const float *query_feat, const float *value_feat, const float *edge_feat, const float *score_weight, const float *sm_scores, bool norm_by_dim, const csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_key_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_query_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_value_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_workspace</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_bias</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a simple multi-head attention layer (mha_simple) operatating on a graph in a node-to-node reduction (n2n) incorporating edge features. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>With an arbitrary edge feature index, the size of <computeroutput>edge_feat</computeroutput> is arbitrary. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_key_feat</computeroutput>, <computeroutput>grad_query_feat</computeroutput>, <computeroutput>grad_value_feat</computeroutput> and <computeroutput>grad_edge_feat</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed. </para>
</simplesect>
<simplesect kind="note"><para>The activation in <computeroutput>params</computeroutput> is ignored as of now.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;key&quot; embeddings. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;query&quot; embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;value&quot; embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the edge feature embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * (2 * dim_node)] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_score_bias</parametername>
</parameternamelist>
<parameterdescription>
<para>gradient on bias added to the un-normalized softmax scores (not computed when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>gradient on weighted applied to the un-normalized softmax scores (not computed when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;key&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;query&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;value&quot; embeddings of all input nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the edge feature embeddings [on device] [dim = <computeroutput>n_edges x dim_node</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight used to scale the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>SZ x params.num_heads x graph.n_indices</computeroutput>] with <computeroutput>SZ=2</computeroutput> if <computeroutput>score_weight</computeroutput> is passed <computeroutput>nullptr</computeroutput>, <computeroutput>SZ=3</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>if set, divide result of dot-product by <computeroutput>sqrt(dim_head)</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="359" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="359" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1adcb92b24d41e3dfd4b4e47671cbd0330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_key_feat, float *grad_query_feat, float *grad_value_feat, float *grad_edge_feat, float *grad_workspace, float *grad_sm_scores, float *grad_score_bias, float *grad_score_weight, const float *grad_out, const float *key_feat, const float *query_feat, const float *value_feat, const float *edge_feat, const float *score_weight, const float *sm_scores, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_key_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_query_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_value_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_workspace</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_bias</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="379" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="379" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a42aefab2bcb1b51abe057b1efe5388e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *key_feat, const float *query_feat, const float *value_feat, const float *score_bias, const float *score_weight, bool norm_by_dim, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_bias</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a simple multi-head attention layer (mha_simple) operating on bipartite graphs in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>The activation in <computeroutput>params</computeroutput> is ignored as of now.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>SZ x params.num_heads x graph.n_indices</computeroutput>] with <computeroutput>SZ=2</computeroutput> if <computeroutput>score_weight</computeroutput> is passed <computeroutput>nullptr</computeroutput>, <computeroutput>SZ=3</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;key&quot; embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;query&quot; embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;value&quot; embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_bias</parametername>
</parameternamelist>
<parameterdescription>
<para>bias added to the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight used to scale the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>if set, divide result of dot-product by <computeroutput>sqrt(dim_head)</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="444" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="444" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1afe6cd221858b21a78cb81c8760ddcb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *key_feat, const float *query_feat, const float *value_feat, const float *score_bias, const float *score_weight, bool norm_by_dim, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_bias</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="456" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="456" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a5c6da2e5a2ef24495206bd39d693e632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *key_feat, const float *query_feat, const float *value_feat, const float *edge_feat, const float *score_bias, const float *score_weight, bool norm_by_dim, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_bias</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a simple multi-head attention layer (mha_simple) operatating on bipartite graphs in a node-to-node reduction (n2n) incorporating edge features (efeat). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>The activation in <computeroutput>params</computeroutput> is ignored as of now.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after attention. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>]. For each node, the features associated with the different heads are concatenated if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and averaged otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores for the backward pass. [on device] [dim = <computeroutput>SZ x params.num_heads x graph.n_indices</computeroutput>] with <computeroutput>SZ=2</computeroutput> if <computeroutput>score_weight</computeroutput> is passed <computeroutput>nullptr</computeroutput>, <computeroutput>SZ=3</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;key&quot; embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;query&quot; embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;value&quot; embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the edge feature embeddings of all input edges [on device] [dim = <computeroutput>graph.n_indices x dim_node</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_bias</parametername>
</parameternamelist>
<parameterdescription>
<para>bias added to the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight used to scale the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>if set, divide result of dot-product by <computeroutput>sqrt(dim_head)</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="518" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="518" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aafc51308d672ad890c3cb45c910d296b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_efeat_fwd</definition>
        <argsstring>(float *out, float *sm_scores, const float *key_feat, const float *query_feat, const float *value_feat, const float *edge_feat, const float *score_bias, const float *score_weight, bool norm_by_dim, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_efeat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_bias</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="531" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="531" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2daaf43208a9cea20da0e802d522b00c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_bwd</definition>
        <argsstring>(float *grad_key_feat, float *grad_query_feat, float *grad_value_feat, float *grad_workspace, float *grad_sm_scores, float *grad_score_bias, float *grad_score_weight, const float *grad_out, const float *key_feat, const float *query_feat, const float *value_feat, const float *score_weight, const float *sm_scores, bool norm_by_dim, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_key_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_query_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_value_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_workspace</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_bias</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a simple multi-head attention layer (mha_simple) operating on bipartite graphs in a node-to-node reduction (n2n). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_key_feat</computeroutput>, <computeroutput>grad_query_feat</computeroutput> and <computeroutput>grad_value_feat</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed. </para>
</simplesect>
<simplesect kind="note"><para>The activation in <computeroutput>params</computeroutput> is ignored as of now.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;key&quot; embeddings. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;query&quot; embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;value&quot; embeddings [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * (2 * dim_node)] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_score_bias</parametername>
</parameternamelist>
<parameterdescription>
<para>gradient on bias added to the un-normalized softmax scores (not computed when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>gradient on weighted applied to the un-normalized softmax scores (not computed when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;key&quot; embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;query&quot; embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;value&quot; embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight used to scale the un-normalized softmax scores (not applied when passed as <computeroutput>nullptr</computeroutput>) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>SZ x params.num_heads x graph.n_indices</computeroutput>] with <computeroutput>SZ=2</computeroutput> if <computeroutput>score_weight</computeroutput> is passed <computeroutput>nullptr</computeroutput>, <computeroutput>SZ=3</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>if set, divide result of dot-product by <computeroutput>sqrt(dim_head)</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="615" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="615" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a01ad1833d26471a3621b2304a73cf431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_bwd</definition>
        <argsstring>(float *grad_key_feat, float *grad_query_feat, float *grad_value_feat, float *grad_workspace, float *grad_sm_scores, float *grad_score_bias, float *grad_score_weight, const float *grad_out, const float *key_feat, const float *query_feat, const float *value_feat, const float *score_weight, const float *sm_scores, bool norm_by_dim, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_key_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_query_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_value_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_workspace</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_bias</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="633" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="633" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab4fd030b10f6b808f3e0aba3fdc0d72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_key_feat, float *grad_query_feat, float *grad_value_feat, float *grad_edge_feat, float *grad_workspace, float *grad_sm_scores, float *grad_score_bias, float *grad_score_weight, const float *grad_out, const float *key_feat, const float *query_feat, const float *value_feat, const float *edge_feat, const float *score_weight, const float *sm_scores, bool norm_by_dim, const bipartite_csc_s32_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_key_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_query_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_value_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_workspace</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_bias</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a simple multi-head attention layer (mha_simple) operatating on bipartite graphs in a node-to-node reduction (n2n) incorporating edge features. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>graph.map_csc_to_coo</computeroutput> are set, then we use this as an edge index to obtain the index of an edge feature given the index of an edge. </para>
</simplesect>
<simplesect kind="note"><para>We always assume <computeroutput>dim_head = dim / params.num_heads</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>grad_key_feat</computeroutput>, <computeroutput>grad_query_feat</computeroutput>, <computeroutput>grad_value_feat</computeroutput> and <computeroutput>grad_edge_feat</computeroutput> may be set to <computeroutput>nullptr</computeroutput> if not needed. </para>
</simplesect>
<simplesect kind="note"><para>The activation in <computeroutput>params</computeroutput> is ignored as of now.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;key&quot; embeddings. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;query&quot; embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the &quot;value&quot; embeddings [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the edge feature embeddings [on device] [dim = <computeroutput>graph.n_indices x dim_node</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>workspace for deterministic gradient reduction, if passed as none, non-deterministic path is chosen [on device] [dim = `graph.n_indices * (2 * dim_node)] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">grad_sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the gradient on softmax scores. [on device] [dim = <computeroutput>2 x params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_score_bias</parametername>
</parameternamelist>
<parameterdescription>
<para>gradient on bias added to the un-normalized softmax scores (not computed when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x graph.n_indices</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>gradient on weighted applied to the un-normalized softmax scores (not computed when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the gradient on the output of the forward pass [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_out</computeroutput>] For each node, the gradients associated with the different heads are assumed to be separate if params.concat_heads = true (<computeroutput>dim_out = dim_node</computeroutput>), and shared otherwise (<computeroutput>dim_out = dim_head</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;key&quot; embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">query_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;query&quot; embeddings of all destination nodes. [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;value&quot; embeddings of all source nodes. [on device] [dim = <computeroutput>graph.n_src_nodes x dim_node</computeroutput>] For each node, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the edge feature embeddings [on device] [dim = <computeroutput>graph.n_indices x dim_node</computeroutput>] For each edge, the features associated with the different heads are expected to be concatenated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">score_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight used to scale the un-normalized softmax scores (not applied when passed as nullptr) [on device] [dim = <computeroutput>params.num_heads x n_edges</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sm_scores</parametername>
</parameternamelist>
<parameterdescription>
<para>the output softmax scores from the forward pass. [on device] [dim = <computeroutput>SZ x params.num_heads x graph.n_indices</computeroutput>] with <computeroutput>SZ=2</computeroutput> if <computeroutput>score_weight</computeroutput> is passed <computeroutput>nullptr</computeroutput>, <computeroutput>SZ=3</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">norm_by_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>if set, divide result of dot-product by <computeroutput>sqrt(dim_head)</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (<computeroutput>bipartite_csc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-head attention parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. It must be a multiple of <computeroutput>params.num_heads</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="730" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="730" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a5f40412cedf6df9193c1e50b6ca12734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::mha_simple_n2n_efeat_bwd</definition>
        <argsstring>(float *grad_key_feat, float *grad_query_feat, float *grad_value_feat, float *grad_edge_feat, float *grad_workspace, float *grad_sm_scores, float *grad_score_bias, float *grad_score_weight, const float *grad_out, const float *key_feat, const float *query_feat, const float *value_feat, const float *edge_feat, const float *score_weight, const float *sm_scores, bool norm_by_dim, const bipartite_csc_s64_t &amp;graph, const mha_params &amp;params, int dim_node, const cuda::stream &amp;stream)</argsstring>
        <name>mha_simple_n2n_efeat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_key_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_query_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_value_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_workspace</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_sm_scores</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_bias</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>key_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>value_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>score_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sm_scores</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>norm_by_dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1mha__params" kindref="compound">mha_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mha_simple.hpp" line="750" column="6" declfile="include/cugraph-ops/operators/mha_simple.hpp" declline="750" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a9a80612a0d062b5f532aae7a3e7902e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(float *out, const float *edge_feat, const float *node_feat, const csc_s32_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a concetenation of edge features features of the source nodes, and the features of the target nodes to create new edge features (update_efeat_cat) for a static graph in an edge-to-edge fashion (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>dim_edge</computeroutput> is passed as <computeroutput>0</computeroutput>, the edge embeddings are ignored for this operation. In this case, <computeroutput>edge_feat</computeroutput> must also be passed as <computeroutput>nullptr</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>node_feat</computeroutput> can&apos;t be passed as <computeroutput>nullptr</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after concatenation. [on device] [dim = <computeroutput>graph.n_indices x (dim_edge + dim_node + dim_node)</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge embeddings [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (in-graph, CSC). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input edge embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input node embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to source source embeddings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to destination source embeddings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="45" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1add01cbb2edb3f239ead7586f5ff45a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(float *out, const float *edge_feat, const float *node_feat, const csc_s64_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="54" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a863d3fda8169e2b2de8d92a408bc214e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(__half *out, const __half *edge_feat, const __half *node_feat, const csc_s32_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="64" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ae06d63aa848d9f0919cfc456df5f395c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(__half *out, const __half *edge_feat, const __half *node_feat, const csc_s64_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="73" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a74ab15eff58b24b12b4f4164693b493b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *node_feat, const csc_s32_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="83" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4babf7679bf8367e9fa6d2bc01d0f7da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *node_feat, const csc_s64_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="92" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="92" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a26ad669dd0019511ffd5748c74358fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(float *out, const float *edge_feat, const float *node_feat, const csc_s32_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a summation of edge features features of the source nodes, and the features of the target nodes to create new edge features (update_efeat_sum) for a static graph in an edge-to-edge fashion (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <computeroutput>edge_feat</computeroutput> is passed as <computeroutput>nullptr</computeroutput>, it is not considered for this operation. In any case, <computeroutput>dim_edge</computeroutput> can&apos;t be passed as <computeroutput>0</computeroutput> as it also indicates the dimension of the node features and the output. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>node_feat</computeroutput> can&apos;t be passed as <computeroutput>nullptr</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after summation. [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge embeddings [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (in-graph, CSC). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input edge embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to source source embeddings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to destination source embeddings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="128" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="128" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a6bce8f8ed722d9ca065d73e12d622bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(float *out, const float *edge_feat, const float *node_feat, const csc_s64_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="136" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a279c74995468e7fb4bfd0b3b7218bdf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(__half *out, const __half *edge_feat, const __half *node_feat, const csc_s32_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="145" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="145" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a1886d0afaf9414006fe0b9a3cf25cff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(__half *out, const __half *edge_feat, const __half *node_feat, const csc_s64_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="153" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="153" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abcc24789b2848bf6c8712f2dedb8052c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *node_feat, const csc_s32_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="162" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aff0ebc81fbe2231afb2293296c636437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *node_feat, const csc_s64_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>node_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="170" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="170" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a845a27f74d0373ebe54ddf19a4e52e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(float *grad_edge_feat, float *grad_node_feat, const float *grad_out, const csc_s32_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for the concat-op of edge features features of the source nodes, and the features of the target nodes to create new edge features (update_efeat_cat) for a static graph in an edge-to-edge fashion (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If a gradient w.r.t. a specific input embedding, e.g. <computeroutput>grad_edge_feat</computeroutput>, is not needed, the pointer can be passed as <computeroutput>nullptr</computeroutput> and the gradient computation will be skipped. Have in mind that the corresponding dimension still might be necessary, see note above and forward for details on that.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the edge embeddings [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the node embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_node</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the input gradient ofn the output embeddings after concatenation. [on device] [dim = <computeroutput>graph.n_indices x (dim_edge + dim_node + dim_node)</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (in-graph, CSC). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input edge embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_node</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input node embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to source source embeddings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to destination source embeddings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="206" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="206" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a887b0e9a08c55dfae18fb13db7a2ea03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(float *grad_edge_feat, float *grad_node_feat, const float *grad_out, const csc_s64_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="215" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="215" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3eae06e4783b31411c13d175b8c83e8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(__half *grad_edge_feat, __half *grad_node_feat, const __half *grad_out, const csc_s32_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="225" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="225" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a476cb8c0d95bfef0bfa3f663e4ef370e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(__half *grad_edge_feat, __half *grad_node_feat, const __half *grad_out, const csc_s64_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="234" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="234" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a51cb54c245c7cf1629d2fbcfcc0c9ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_node_feat, const __nv_bfloat16 *grad_out, const csc_s32_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="244" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="244" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2ab98b801a40678c5eb19ba4b1e10cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_node_feat, const __nv_bfloat16 *grad_out, const csc_s64_t &amp;graph, size_t dim_edge, size_t dim_node, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="253" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="253" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a463ae17a26844613e84216c594b38da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(float *grad_edge_feat, float *grad_node_feat, const float *grad_out, const csc_s32_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a sum-op of edge features features of the source nodes, and the features of the target nodes to create new edge features (update_efeat_sum) for a static graph in an edge-to-edge fashion (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If a gradient w.r.t. a specific input embedding, e.g. <computeroutput>grad_edge_feat</computeroutput>, is not needed, the pointer can be passed as <computeroutput>nullptr</computeroutput> and the gradient computation will be skipped. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>dim_edge</computeroutput> is expected to be the same as in the forward pass.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the edge embeddings [on device][dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_node_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the node embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the input gradient on the output embeddings after summation. [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (in-graph, CSC). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to source source embeddings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to destination source embeddings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="289" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="289" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3044fd992b5baa0af4fc4d89a148ca64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(float *grad_edge_feat, float *grad_node_feat, const float *grad_out, const csc_s64_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="297" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="297" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a84f9ded007493b8660e78f44b1039e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(__half *grad_edge_feat, __half *grad_node_feat, const __half *grad_out, const csc_s32_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="306" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="306" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a296d579d119ce46e177db44a527eaea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(__half *grad_edge_feat, __half *grad_node_feat, const __half *grad_out, const csc_s64_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="314" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="314" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a1eb6977992dcba58d236b4d4cdd152ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_node_feat, const __nv_bfloat16 *grad_out, const csc_s32_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" kindref="member">csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="323" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="323" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8059d429e5e152fb37ecae411775b63a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_node_feat, const __nv_bfloat16 *grad_out, const csc_s64_t &amp;graph, size_t dim_edge, bool use_src_feat, bool use_dst_feat, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_node_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" kindref="member">csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_src_feat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="331" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="331" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a671a4527bee34bb160e0782655888e92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(float *out, const float *edge_feat, const float *src_feat, const float *dst_feat, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a concetenation of edge features features of the source nodes, and the features of the target nodes to create new edge features (update_efeat_cat) for a bipartite graph in an edge-to-edge fashion (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If any of <computeroutput>dim_edge</computeroutput>, <computeroutput>dim_src</computeroutput>, or <computeroutput>dim_dst</computeroutput> is set to <computeroutput>0</computeroutput>, the corresponding device array is not considered for this operation. In those cases, the corresponding feature pointer, e.g. <computeroutput>edge_feat</computeroutput>, must also be passed as <computeroutput>nullptr</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after concatenation. [on device] [dim = <computeroutput>graph.n_indices x (dim_edge + dim_src + dim_dst)</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge embeddings [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input node embeddings [on device] [dim = <computeroutput>graph.n_src_nodes x dim_src</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input destination-node embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_dst</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (in-graph, CSC). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input edge embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_src</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input source node embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_dst</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input destinaton node embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="367" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="367" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a15c676b277517531d1a147be43b54fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(float *out, const float *edge_feat, const float *src_feat, const float *dst_feat, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="376" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="376" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a6362dca4916f94a2b4883afcd547f23f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(__half *out, const __half *edge_feat, const __half *src_feat, const __half *dst_feat, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="386" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="386" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac2965b425a37aa3b605fb6b2a50e4c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(__half *out, const __half *edge_feat, const __half *src_feat, const __half *dst_feat, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="395" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="395" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a6f57f07b1ffd846f93fa555c290627f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="405" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="405" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abfb769dad2b23b4ff6884a72e01a4c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="414" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="414" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aea68ec800af9a16d71f6df918b350aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(float *out, const float *edge_feat, const float *src_feat, const float *dst_feat, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the forward pass for a summation of edge features features of the source nodes, and the features of the target nodes to create new edge features (update_efeat_sum) for a bipartite graph in an edge-to-edge fashion (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If any pointers <computeroutput>edge_feat</computeroutput>, <computeroutput>src_feat</computeroutput>, or <computeroutput>dst_feat</computeroutput> is passed as <computeroutput>nullptr</computeroutput>, the corresponding features are not considered for the summmation operation.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output embeddings after summation. [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input edge embeddings [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input source-node embeddings [on device] [dim = <computeroutput>graph.n_src_nodes x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the input destination-node embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (in-graph, CSC). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input edge embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="448" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="448" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a409cc6ad389a33d5f10e37de1d377fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(float *out, const float *edge_feat, const float *src_feat, const float *dst_feat, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="455" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="455" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa08f2dd1049ff36e9dddec2fbbb0d353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(__half *out, const __half *edge_feat, const __half *src_feat, const __half *dst_feat, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="463" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="463" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4bd72ff7c57d8ea00dc6da446827051e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(__half *out, const __half *edge_feat, const __half *src_feat, const __half *dst_feat, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="470" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="470" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3c552064571c9841f593f54695a43364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="478" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="478" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ade1ab939fd867e6f24ce35b820035966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *edge_feat, const __nv_bfloat16 *src_feat, const __nv_bfloat16 *dst_feat, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>edge_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>src_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>dst_feat</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="485" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="485" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a1dd09dc457ab95dd69c36c87e2543e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(float *grad_edge_feat, float *grad_src_feat, float *grad_dst_feat, const float *grad_out, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for the concat-op of edge features features of the source nodes, and the features of the target nodes to create new edge features (update_efeat_cat) for a bipartite graph in an edge-to-edge fashion (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If any of <computeroutput>dim_edge</computeroutput>, <computeroutput>dim_src</computeroutput>, or <computeroutput>dim_dst</computeroutput> is set to <computeroutput>0</computeroutput> in the forward pass, the corresponding device array is also not considered in the backward pass. In any case, the dimensions are expected to be the same as in the forward pass. </para>
</simplesect>
<simplesect kind="note"><para>If a gradient w.r.t. a specific input embedding, e.g. <computeroutput>grad_edge_feat</computeroutput>, is not needed, the pointer can be passed as <computeroutput>nullptr</computeroutput> and the gradient computation will be skipped. Have in mind that the corresponding dimension still might be necessary, see note above and forward for details on that.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the edge embeddings [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the source-node embeddings [on device] [dim = <computeroutput>graph.n_src_nodes x dim_src</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the destionation-node embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_dst</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the input gradient ofn the output embeddings after concatenation. [on device] [dim = <computeroutput>graph.n_indices x (dim_edge + dim_src + dim_dst)</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (in-graph, CSC). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input edge embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_src</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input source node embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_dst</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input destinaton node embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="524" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="524" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ac1f933ddf5598e8a2f831513fe74cefa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(float *grad_edge_feat, float *grad_src_feat, float *grad_dst_feat, const float *grad_out, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="533" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="533" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2d4941d8fd9b7fae859f46a0f6c7bb4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(__half *grad_edge_feat, __half *grad_src_feat, __half *grad_dst_feat, const __half *grad_out, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="543" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="543" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a9b233d35c434bd7c2846b715b516e071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(__half *grad_edge_feat, __half *grad_src_feat, __half *grad_dst_feat, const __half *grad_out, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="552" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="552" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af1e8b2e6d1d7140759321203a9081fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, const __nv_bfloat16 *grad_out, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="562" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="562" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2136fd338c49ae080899e767a1f200cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_concat_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, const __nv_bfloat16 *grad_out, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, size_t dim_src, size_t dim_dst, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_concat_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="571" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="571" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aa431040eccd0d8490c81b4ccfeb8e1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(float *grad_edge_feat, float *grad_src_feat, float *grad_dst_feat, const float *grad_out, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Computes the backward pass for a sum-op of edge features features of the source nodes, and the features of the target nodes to create new edge features (update_efeat_sum) for a bipartite graph in an edge-to-edge fashion (e2e) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If a gradient w.r.t. a specific input embedding, e.g. <computeroutput>grad_edge_feat</computeroutput>, is not needed, the pointer can be passed as <computeroutput>nullptr</computeroutput> and the gradient computation will be skipped. </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>dim_edge</computeroutput> is expected to be the same as in the forward pass.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">grad_edge_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the edge embeddings [on device][dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_src_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the source-node embeddings [on device] [dim = <computeroutput>graph.n_src_nodes x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grad_dst_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gradient on the destination-node embeddings [on device] [dim = <computeroutput>graph.n_dst_nodes x dim_edge</computeroutput>] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grad_out</parametername>
</parameternamelist>
<parameterdescription>
<para>the input gradient on the output embeddings after summation. [on device] [dim = <computeroutput>graph.n_indices x dim_edge</computeroutput>]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the input graph (in-graph, CSC). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the input embeddings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>cuda stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="607" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="607" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a09d59cd7f6b7fc10cd4804892a69fc00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(float *grad_edge_feat, float *grad_src_feat, float *grad_dst_feat, const float *grad_out, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="614" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="614" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1af958900023e94aef80b36bc9d08a9de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(__half *grad_edge_feat, __half *grad_src_feat, __half *grad_dst_feat, const __half *grad_out, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="622" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="622" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a1bb0a0d82b1cc08e8b36c947aeb2d85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(__half *grad_edge_feat, __half *grad_src_feat, __half *grad_dst_feat, const __half *grad_out, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="629" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="629" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a95b6a5ae9f8035e521e05068f1baeb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, const __nv_bfloat16 *grad_out, const bipartite_csc_s32_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" kindref="member">bipartite_csc_s32_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="637" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="637" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a00cb6b9921646a04529cc4201b790fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::update_efeat_e2e_sum_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_edge_feat, __nv_bfloat16 *grad_src_feat, __nv_bfloat16 *grad_dst_feat, const __nv_bfloat16 *grad_out, const bipartite_csc_s64_t &amp;graph, size_t dim_edge, const cuda::stream &amp;stream)</argsstring>
        <name>update_efeat_e2e_sum_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_edge_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_src_feat</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_dst_feat</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" kindref="member">bipartite_csc_s64_t</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim_edge</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/update_efeat.hpp" line="644" column="6" declfile="include/cugraph-ops/operators/update_efeat.hpp" declline="644" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacecugraph_1_1ops_1a359c99b9080f0e1541a65e32d4bcb07a" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>ActivationOpT</name>
        <enumvalue id="namespacecugraph_1_1ops_1a359c99b9080f0e1541a65e32d4bcb07aaac97f0008bcf7c7fe4f2ff94160e1385" prot="public">
          <name>kLinear</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>y = x </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a359c99b9080f0e1541a65e32d4bcb07aa067892a9ea619b2c378e06000c9763af" prot="public">
          <name>kRelu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>y = relu(x) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a359c99b9080f0e1541a65e32d4bcb07aac00732693e14261bf9c2a4612a7f9bf9" prot="public">
          <name>kSigmoid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>y = 1 / (e^-x + 1) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a359c99b9080f0e1541a65e32d4bcb07aa4918cf5d849692c2bed918bb9e948630" prot="public">
          <name>kTanh</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>y = tanh(x) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a359c99b9080f0e1541a65e32d4bcb07aa5aeadc2917189f9861cd64242b259a13" prot="public">
          <name>kELU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>y = e^x - 1 if x &lt; 0 else x </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a359c99b9080f0e1541a65e32d4bcb07aad84b20d8e2277928cd3c2efeef3a302b" prot="public">
          <name>kScalar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>y = alpha * x </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a359c99b9080f0e1541a65e32d4bcb07aaab64c637d28c119be7f3caffdc99317f" prot="public">
          <name>kLeakyRelu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>y = x * alpha if x &lt; 0 else x </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Types of activations supported </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/activation.hpp" line="16" column="1" bodyfile="include/cugraph-ops/activation.hpp" bodystart="16" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecugraph_1_1ops_1a69e2ddeb6f703ead1ec8ce22dcd64aa7" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>MMAOpT</name>
        <enumvalue id="namespacecugraph_1_1ops_1a69e2ddeb6f703ead1ec8ce22dcd64aa7aefc09240f676c1f8caa6a11ccbbf88e3" prot="public">
          <name>kHighPrecision</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>use high precision tensor core MMA operation for fp32, this means using the 3x TF32 &quot;trick&quot; </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a69e2ddeb6f703ead1ec8ce22dcd64aa7aa80119a9be2fd9eab9f1329277c70c5b" prot="public">
          <name>kLowPrecision</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>use low precision tensor core MMA operation for fp32, this means using a single TF32 MMA for fp64, this is equivalent to kHighPrecision </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a69e2ddeb6f703ead1ec8ce22dcd64aa7ab87fbce17f79757deb0ac8aee64dcecf" prot="public">
          <name>kSimt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>use a simple kSimt MM implementation </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of MMA OPeration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/mma.hpp" line="22" column="1" bodyfile="include/cugraph-ops/mma.hpp" bodystart="22" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5fae" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>AggOpT</name>
        <enumvalue id="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea843532fb63972abe47dfc8dab268bd83" prot="public">
          <name>kMean</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mean across the neighbor embeddings </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa1dc5fbfa16754d1e628d66381725617" prot="public">
          <name>kSum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>sum across the neighbor embeddings </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faeaa0b1ac8aae6b1cfbbe89085c642b3b4b" prot="public">
          <name>kMax</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max across the neighbor embeddings </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1adb264a5edbea947ae39898346ddc5faea8fbc2f6c44a6d70550df79903eb57d48" prot="public">
          <name>kMin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>min across the neighbor embeddings </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of aggregation operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/common.hpp" line="21" column="1" bodyfile="include/cugraph-ops/operators/common.hpp" bodystart="21" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecugraph_1_1ops_1a805e240044e5ec781d3d5102586df910" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>AggHgImplementationT</name>
        <enumvalue id="namespacecugraph_1_1ops_1a805e240044e5ec781d3d5102586df910ab481582f6feba4b5d4b6c8972cdf58e5" prot="public">
          <name>kDefaultT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a805e240044e5ec781d3d5102586df910ad8a98e8906973eed23ef778342f78a90" prot="public">
          <name>kBigVertexImplementationT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a805e240044e5ec781d3d5102586df910a7ba089157ef53b491cf7004f55391384" prot="public">
          <name>kBigVertexLessMemoryImplementationT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/common.hpp" line="35" column="1" bodyfile="include/cugraph-ops/operators/common.hpp" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecugraph_1_1ops_1a5ab76c165143bc949ea87942fa74d60b" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>SyncT</name>
        <enumvalue id="namespacecugraph_1_1ops_1a5ab76c165143bc949ea87942fa74d60baf564c2bfece5a7928f8860f983c50098" prot="public">
          <name>kFalse</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a5ab76c165143bc949ea87942fa74d60ba66e2fa9ba4f5420341b16f9d6365f428" prot="public">
          <name>kTrue</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/common.hpp" line="50" column="1" bodyfile="include/cugraph-ops/operators/common.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>ConnectionModeT</name>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9a963e01e9e15d894b89d3bbbe074a7eea" prot="public">
          <name>kUVW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9aaabca33ea55c69151c47e79f390e0f09" prot="public">
          <name>k1VW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9a8c60bcc187b2fb315e72e99182bc2788" prot="public">
          <name>kU1W</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9ae8996c8c56af669b148a9d7f40ad84fe" prot="public">
          <name>kUVU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9a22f16bc9e35afca8dbca741623ad45a2" prot="public">
          <name>kUVV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9a79c771e295dce3d78a8af2713f7130b7" prot="public">
          <name>kUUW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9a7e45e15d5fbbc080781223dcc4785aed" prot="public">
          <name>kUUU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9a87560204a80bc2c676dc6eb37045664e" prot="public">
          <name>kUVUV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9aa1e00cee0b2531bec1eabdc155ecbbd1" prot="public">
          <name>k1V1V</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9ac4c09b0e5abfbf4a05ea7c4756126a11" prot="public">
          <name>kU1U1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9afd0af8bac2f26ec3ee4c7f23bc0f2f2f" prot="public">
          <name>kUUVV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="51" column="1" bodyfile="include/cugraph-ops/operators/fused_tp.hpp" bodystart="51" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1af8e6162958da009bf59d4f85e2297428" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc" kindref="compound">graph::bipartite_csc</ref>&lt; int32_t &gt;</type>
        <definition>using cugraph::ops::bipartite_csc_s32_t = typedef graph::bipartite_csc&lt;int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>bipartite_csc_s32_t</name>
        <briefdescription>
<para>CSC representation of bipartite graphs for 32b node and edge id&apos;s. </para>
        </briefdescription>
        <detaileddescription>
<para>Instantiations for different index types (in main namespace) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="291" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1ab6c44f495633f1c9c38db8342caff6b6" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc" kindref="compound">graph::bipartite_csc</ref>&lt; int64_t, int32_t &gt;</type>
        <definition>using cugraph::ops::bipartite_csc_s64_s32_t = typedef graph::bipartite_csc&lt;int64_t, int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>bipartite_csc_s64_s32_t</name>
        <briefdescription>
<para>CSC representation of bipartite graphs for 32b node and 64b edge id&apos;s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="295" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1af848b271e54eb7235a0ce419866e48d1" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc" kindref="compound">graph::bipartite_csc</ref>&lt; int64_t &gt;</type>
        <definition>using cugraph::ops::bipartite_csc_s64_t = typedef graph::bipartite_csc&lt;int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>bipartite_csc_s64_t</name>
        <briefdescription>
<para>CSC representation of bipartite graphs for 64b node and edge id&apos;s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="299" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1a2fd1a0edee7881f261af2ee65ac071b7" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1csc" kindref="compound">graph::csc</ref>&lt; int32_t &gt;</type>
        <definition>using cugraph::ops::csc_s32_t = typedef graph::csc&lt;int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>csc_s32_t</name>
        <briefdescription>
<para>CSC representation of static/sampled graphs for 32b node and edge id&apos;s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="304" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1a8f9514268156baf73cc4df9a318ece93" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1csc" kindref="compound">graph::csc</ref>&lt; int64_t, int32_t &gt;</type>
        <definition>using cugraph::ops::csc_s64_s32_t = typedef graph::csc&lt;int64_t, int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>csc_s64_s32_t</name>
        <briefdescription>
<para>CSC representation of static/sampled graphs for 32b node and 64b edge id&apos;s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="308" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1a84fe5722093bed49c855f03710adecab" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1csc" kindref="compound">graph::csc</ref>&lt; int64_t &gt;</type>
        <definition>using cugraph::ops::csc_s64_t = typedef graph::csc&lt;int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>csc_s64_t</name>
        <briefdescription>
<para>CSC representation of static/sampled graphs for 64b node and edge id&apos;s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="312" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1a0142efe0df35e52ff64fbe23289d7df9" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc__hg" kindref="compound">graph::bipartite_csc_hg</ref>&lt; int32_t &gt;</type>
        <definition>using cugraph::ops::bipartite_csc_hg_s32_t = typedef graph::bipartite_csc_hg&lt;int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>bipartite_csc_hg_s32_t</name>
        <briefdescription>
<para>base CSC representation of a bipartite, heterogeneous graph (32 id&apos;s) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="317" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1a02debe389219dfbacdb91224c5f1618a" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc__hg" kindref="compound">graph::bipartite_csc_hg</ref>&lt; int64_t, int32_t &gt;</type>
        <definition>using cugraph::ops::bipartite_csc_hg_s64_s32_t = typedef graph::bipartite_csc_hg&lt;int64_t, int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>bipartite_csc_hg_s64_s32_t</name>
        <briefdescription>
<para>base CSC representation of a bipartite, heterogeneous graph (64/32 id&apos;s) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="321" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1ac554394b73e089a58df1e51f52aa8b30" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc__hg" kindref="compound">graph::bipartite_csc_hg</ref>&lt; int64_t &gt;</type>
        <definition>using cugraph::ops::bipartite_csc_hg_s64_t = typedef graph::bipartite_csc_hg&lt;int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>bipartite_csc_hg_s64_t</name>
        <briefdescription>
<para>base CSC representation of a bipartite, heterogeneous graph (64b id&apos;s) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="325" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1aa3a886b21a8c798116e1a6250502eefe" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1csc__hg" kindref="compound">graph::csc_hg</ref>&lt; int32_t &gt;</type>
        <definition>using cugraph::ops::csc_hg_s32_t = typedef graph::csc_hg&lt;int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>csc_hg_s32_t</name>
        <briefdescription>
<para>base CSC representation of a static/sampled, heterogeneous graph (32 id&apos;s) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="330" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1a040572e326b1c9bd4a9df92517bfc671" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1csc__hg" kindref="compound">graph::csc_hg</ref>&lt; int64_t, int32_t &gt;</type>
        <definition>using cugraph::ops::csc_hg_s64_s32_t = typedef graph::csc_hg&lt;int64_t, int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>csc_hg_s64_s32_t</name>
        <briefdescription>
<para>base CSC representation of a static/sampled, heterogeneous graph (64/32 id&apos;s) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="334" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecugraph_1_1ops_1a2b505a8be046f5c5cf052aadc9dd6123" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1csc__hg" kindref="compound">graph::csc_hg</ref>&lt; int64_t &gt;</type>
        <definition>using cugraph::ops::csc_hg_s64_t = typedef graph::csc_hg&lt;int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>csc_hg_s64_t</name>
        <briefdescription>
<para>base CSC representation of a static/sampled, heterogeneous graph (64b id&apos;s) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="338" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="338" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a90716a3a4c1b1c2ab87afec13d9a5f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::segmented_transpose</definition>
        <argsstring>(float *tensor, const float *tensor_transpose, const int32_t *segment_info, int32_t num_segments, int64_t batch_size, int64_t stride, bool is_transposed, const cuda::stream &amp;stream)</argsstring>
        <name>segmented_transpose</name>
        <param>
          <type>float *</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>tensor_transpose</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>segment_info</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_segments</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_transposed</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="71" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a3d1e3b5f0b7bea888a494224c0270654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::segmented_transpose</definition>
        <argsstring>(__half *tensor, const __half *tensor_transpose, const int32_t *segment_info, int32_t num_segments, int64_t batch_size, int64_t stride, bool is_transposed, const cuda::stream &amp;stream)</argsstring>
        <name>segmented_transpose</name>
        <param>
          <type>__half *</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>tensor_transpose</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>segment_info</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_segments</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_transposed</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="79" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a2d935a752dbe1a345508c9ae0c74cda6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::segmented_transpose</definition>
        <argsstring>(__nv_bfloat16 *tensor, const __nv_bfloat16 *tensor_transpose, const int32_t *segment_info, int32_t num_segments, int64_t batch_size, int64_t stride, bool is_transposed, const cuda::stream &amp;stream)</argsstring>
        <name>segmented_transpose</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>tensor_transpose</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>segment_info</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_segments</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_transposed</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="87" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a14d1340b3b5f02d44b55d706148cd5de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_fwd</definition>
        <argsstring>(float *out, const float *in_a, const float *in_b, const float *weight, const float *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="96" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="96" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a9ce77a0accdeb89f74a571c66128a957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_fwd</definition>
        <argsstring>(__half *out, const __half *in_a, const __half *in_b, const __half *weight, const __half *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="105" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="105" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a24180320b851189aed8d17e154d0d04d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *in_a, const __nv_bfloat16 *in_b, const __nv_bfloat16 *weight, const __nv_bfloat16 *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="114" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a6a649c8996ab04a622034f2eb3a48164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_fwd</definition>
        <argsstring>(__half *out, const float *in_a, const __half *in_b, const __half *weight, const __half *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="123" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="123" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a214094ca504f4392c07c93380dad9e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const float *in_a, const __nv_bfloat16 *in_b, const __nv_bfloat16 *weight, const __nv_bfloat16 *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="132" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a29c1b9b2f8d3c0f71640131d850138ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_fwd</definition>
        <argsstring>(__half *out, const __half *in_a, const float *in_b, const __half *weight, const __half *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="141" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="141" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a27beeccd43be97a206f2703b7ec088b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *out, const __nv_bfloat16 *in_a, const float *in_b, const __nv_bfloat16 *weight, const __nv_bfloat16 *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="150" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="150" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a5e51a25a8fb6d72b0253b48208c94a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd</definition>
        <argsstring>(float *grad_in_a, float *grad_in_b, float *grad_weight, float *grad_bias, const float *grad_out, const float *in_a, const float *in_b, const float *weight, const float *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_bias</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="160" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a30cf50e0075c43e75434f7c9477995c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd</definition>
        <argsstring>(__half *grad_in_a, __half *grad_in_b, __half *grad_weight, __half *grad_bias, const __half *grad_out, const __half *in_a, const __half *in_b, const __half *weight, const __half *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_bias</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="175" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="175" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ad777965996d8c441695c1863f96832ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_in_a, __nv_bfloat16 *grad_in_b, __nv_bfloat16 *grad_weight, __nv_bfloat16 *grad_bias, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *in_a, const __nv_bfloat16 *in_b, const __nv_bfloat16 *weight, const __nv_bfloat16 *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_bias</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="190" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="190" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abb76f20e7ef2d69a3410e97762f135d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd</definition>
        <argsstring>(float *grad_in_a, __half *grad_in_b, __half *grad_weight, __half *grad_bias, const __half *grad_out, const float *in_a, const __half *in_b, const __half *weight, const __half *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_bias</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="205" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="205" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a099bc83f429a593a98baf93ae5d9dba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd</definition>
        <argsstring>(float *grad_in_a, __nv_bfloat16 *grad_in_b, __nv_bfloat16 *grad_weight, __nv_bfloat16 *grad_bias, const __nv_bfloat16 *grad_out, const float *in_a, const __nv_bfloat16 *in_b, const __nv_bfloat16 *weight, const __nv_bfloat16 *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_bias</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="220" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="220" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a93eba036acac2649d6b27907c2db6e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd</definition>
        <argsstring>(__half *grad_in_a, float *grad_in_b, __half *grad_weight, __half *grad_bias, const __half *grad_out, const __half *in_a, const float *in_b, const __half *weight, const __half *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_bias</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="235" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="235" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0f8d06b335ed79b5aaefd0acf40a9fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_in_a, float *grad_in_b, __nv_bfloat16 *grad_weight, __nv_bfloat16 *grad_bias, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *in_a, const float *in_b, const __nv_bfloat16 *weight, const __nv_bfloat16 *bias, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_bias</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="250" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="250" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4a374a621d2874607414d769f558da54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd_bwd</definition>
        <argsstring>(float *grad_in_a, float *grad_in_b, float *grad_weight, float *grad_grad_out, const float *grad_grad_in_a, const float *grad_grad_in_b, const float *grad_grad_weight, const float *grad_out, const float *in_a, const float *in_b, const float *weight, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_fwd, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_grad_in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_grad_in_b</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_grad_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_fwd</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="266" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="266" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a07f65f22a7bd8aa2517a33b295d1264a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd_bwd</definition>
        <argsstring>(__half *grad_in_a, __half *grad_in_b, __half *grad_weight, __half *grad_grad_out, const __half *grad_grad_in_a, const __half *grad_grad_in_b, const __half *grad_grad_weight, const __half *grad_out, const __half *in_a, const __half *in_b, const __half *weight, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_fwd, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_grad_in_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_grad_in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_grad_weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_fwd</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="284" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="284" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0f013ab9c63c2ef711ae427849e9cc27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_in_a, __nv_bfloat16 *grad_in_b, __nv_bfloat16 *grad_weight, __nv_bfloat16 *grad_grad_out, const __nv_bfloat16 *grad_grad_in_a, const __nv_bfloat16 *grad_grad_in_b, const __nv_bfloat16 *grad_grad_weight, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *in_a, const __nv_bfloat16 *in_b, const __nv_bfloat16 *weight, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_fwd, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_grad_in_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_grad_in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_grad_weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_fwd</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="302" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="302" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1ab71aa6569777e165e6155d2e2fd17ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd_bwd</definition>
        <argsstring>(float *grad_in_a, __half *grad_in_b, __half *grad_weight, __half *grad_grad_out, const float *grad_grad_in_a, const __half *grad_grad_in_b, const __half *grad_grad_weight, const __half *grad_out, const float *in_a, const __half *in_b, const __half *weight, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_fwd, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_grad_in_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_grad_in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_grad_weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_fwd</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="320" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="320" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a14f00c8ebc165b689cab837e26f69887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd_bwd</definition>
        <argsstring>(float *grad_in_a, __nv_bfloat16 *grad_in_b, __nv_bfloat16 *grad_weight, __nv_bfloat16 *grad_grad_out, const float *grad_grad_in_a, const __nv_bfloat16 *grad_grad_in_b, const __nv_bfloat16 *grad_grad_weight, const __nv_bfloat16 *grad_out, const float *in_a, const __nv_bfloat16 *in_b, const __nv_bfloat16 *weight, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_fwd, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd_bwd</name>
        <param>
          <type>float *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_grad_in_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_grad_in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_grad_weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_fwd</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="338" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="338" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4f17bffaf6d789d8ba8a6ee2327539a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd_bwd</definition>
        <argsstring>(__half *grad_in_a, float *grad_in_b, __half *grad_weight, __half *grad_grad_out, const __half *grad_grad_in_a, const float *grad_grad_in_b, const __half *grad_grad_weight, const __half *grad_out, const __half *in_a, const float *in_b, const __half *weight, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_fwd, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd_bwd</name>
        <param>
          <type>__half *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__half *</type>
          <declname>grad_grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_grad_in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_grad_in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_grad_weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_fwd</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="356" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="356" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a7a4e082fd8406a5f684358387dc40b66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::fused_tp_n2n_bwd_bwd</definition>
        <argsstring>(__nv_bfloat16 *grad_in_a, float *grad_in_b, __nv_bfloat16 *grad_weight, __nv_bfloat16 *grad_grad_out, const __nv_bfloat16 *grad_grad_in_a, const float *grad_grad_in_b, const __nv_bfloat16 *grad_grad_weight, const __nv_bfloat16 *grad_out, const __nv_bfloat16 *in_a, const float *in_b, const __nv_bfloat16 *weight, ConnectionModeT mode, const tp_info&lt; float &gt; &amp;info_fwd, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_a, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_b, const tp_info&lt; float &gt; &amp;info_bwd_dgrad_w, const tp_data_sizes &amp;sizes, const cuda::stream &amp;stream)</argsstring>
        <name>fused_tp_n2n_bwd_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_in_a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>grad_in_b</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_weight</declname>
        </param>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>grad_grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_grad_in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>grad_grad_in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_grad_weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>in_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type><ref refid="namespacecugraph_1_1ops_1a875dde2f3614b805ba0a5e63516887e9" kindref="member">ConnectionModeT</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_fwd</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_a</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_b</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__info" kindref="compound">tp_info</ref>&lt; float &gt; &amp;</type>
          <declname>info_bwd_dgrad_w</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1tp__data__sizes" kindref="compound">tp_data_sizes</ref> &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/fused_tp.hpp" line="374" column="6" declfile="include/cugraph-ops/operators/fused_tp.hpp" declline="374" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a4aba7c4370c667c38b8179cd99c93e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::symmetric_tensor_contraction_n2n_fwd</definition>
        <argsstring>(float *feat_b, const float *feat_a, const float *weight, const int32_t *weight_id, const clebsch_gordan_tensor&lt; float &gt; &amp;cg_tensor, const int32_t &amp;stride_b, const int32_t &amp;stride_a, const int32_t &amp;stride_w, const int32_t &amp;stride_feat, const int32_t &amp;num_batches, const int32_t &amp;correlation, const cuda::stream &amp;stream)</argsstring>
        <name>symmetric_tensor_contraction_n2n_fwd</name>
        <param>
          <type>float *</type>
          <declname>feat_b</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>feat_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>weight_id</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" kindref="compound">clebsch_gordan_tensor</ref>&lt; float &gt; &amp;</type>
          <declname>cg_tensor</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_b</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_a</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_feat</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>num_batches</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>correlation</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mace.hpp" line="33" column="6" declfile="include/cugraph-ops/operators/mace.hpp" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a0f2ed3d0ce784a9a5e50393a22dcd09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::symmetric_tensor_contraction_n2n_fwd</definition>
        <argsstring>(__half *feat_b, const __half *feat_a, const __half *weight, const int32_t *weight_id, const clebsch_gordan_tensor&lt; __half &gt; &amp;cg_tensor, const int32_t &amp;stride_b, const int32_t &amp;stride_a, const int32_t &amp;stride_w, const int32_t &amp;stride_feat, const int32_t &amp;num_batches, const int32_t &amp;correlation, const cuda::stream &amp;stream)</argsstring>
        <name>symmetric_tensor_contraction_n2n_fwd</name>
        <param>
          <type>__half *</type>
          <declname>feat_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>feat_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>weight_id</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" kindref="compound">clebsch_gordan_tensor</ref>&lt; __half &gt; &amp;</type>
          <declname>cg_tensor</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_b</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_a</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_feat</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>num_batches</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>correlation</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mace.hpp" line="46" column="6" declfile="include/cugraph-ops/operators/mace.hpp" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1aea059fdf79ef38773a569da32c4a1599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::symmetric_tensor_contraction_n2n_fwd</definition>
        <argsstring>(__nv_bfloat16 *feat_b, const __nv_bfloat16 *feat_a, const __nv_bfloat16 *weight, const int32_t *weight_id, const clebsch_gordan_tensor&lt; __nv_bfloat16 &gt; &amp;cg_tensor, const int32_t &amp;stride_b, const int32_t &amp;stride_a, const int32_t &amp;stride_w, const int32_t &amp;stride_feat, const int32_t &amp;num_batches, const int32_t &amp;correlation, const cuda::stream &amp;stream)</argsstring>
        <name>symmetric_tensor_contraction_n2n_fwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>feat_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>feat_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>weight_id</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" kindref="compound">clebsch_gordan_tensor</ref>&lt; __nv_bfloat16 &gt; &amp;</type>
          <declname>cg_tensor</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_b</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_a</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_feat</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>num_batches</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>correlation</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mace.hpp" line="59" column="6" declfile="include/cugraph-ops/operators/mace.hpp" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1abec72c8115684bed7bb43f6b272dca6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::symmetric_tensor_contraction_n2n_bwd</definition>
        <argsstring>(float *d_feat_a, float *d_weight, const float *feat_b, const float *feat_a, const float *weight, const int32_t *weight_id, const clebsch_gordan_tensor&lt; float &gt; &amp;cg_tensor0, const clebsch_gordan_tensor&lt; float &gt; &amp;cg_tensor1, const int32_t &amp;stride_b, const int32_t &amp;stride_a, const int32_t &amp;stride_w, const int32_t &amp;stride_feat, const int32_t &amp;num_batches, const int32_t &amp;correlation, const cuda::stream &amp;stream)</argsstring>
        <name>symmetric_tensor_contraction_n2n_bwd</name>
        <param>
          <type>float *</type>
          <declname>d_feat_a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_weight</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>feat_b</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>feat_a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>weight_id</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" kindref="compound">clebsch_gordan_tensor</ref>&lt; float &gt; &amp;</type>
          <declname>cg_tensor0</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" kindref="compound">clebsch_gordan_tensor</ref>&lt; float &gt; &amp;</type>
          <declname>cg_tensor1</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_b</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_a</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_feat</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>num_batches</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>correlation</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mace.hpp" line="72" column="6" declfile="include/cugraph-ops/operators/mace.hpp" declline="72" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1a8ec029aeed90ed17cd36403b36e57b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::symmetric_tensor_contraction_n2n_bwd</definition>
        <argsstring>(__half *d_feat_a, float *d_weight, const __half *feat_b, const __half *feat_a, const __half *weight, const int32_t *weight_id, const clebsch_gordan_tensor&lt; __half &gt; &amp;cg_tensor0, const clebsch_gordan_tensor&lt; __half &gt; &amp;cg_tensor1, const int32_t &amp;stride_b, const int32_t &amp;stride_a, const int32_t &amp;stride_w, const int32_t &amp;stride_feat, const int32_t &amp;num_batches, const int32_t &amp;correlation, const cuda::stream &amp;stream)</argsstring>
        <name>symmetric_tensor_contraction_n2n_bwd</name>
        <param>
          <type>__half *</type>
          <declname>d_feat_a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_weight</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>feat_b</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>feat_a</declname>
        </param>
        <param>
          <type>const __half *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>weight_id</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" kindref="compound">clebsch_gordan_tensor</ref>&lt; __half &gt; &amp;</type>
          <declname>cg_tensor0</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" kindref="compound">clebsch_gordan_tensor</ref>&lt; __half &gt; &amp;</type>
          <declname>cg_tensor1</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_b</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_a</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_feat</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>num_batches</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>correlation</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mace.hpp" line="88" column="6" declfile="include/cugraph-ops/operators/mace.hpp" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1adecc59fe28cf1997151f82d1fd31a2cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::symmetric_tensor_contraction_n2n_bwd</definition>
        <argsstring>(__nv_bfloat16 *d_feat_a, float *d_weight, const __nv_bfloat16 *feat_b, const __nv_bfloat16 *feat_a, const __nv_bfloat16 *weight, const int32_t *weight_id, const clebsch_gordan_tensor&lt; __nv_bfloat16 &gt; &amp;cg_tensor0, const clebsch_gordan_tensor&lt; __nv_bfloat16 &gt; &amp;cg_tensor1, const int32_t &amp;stride_b, const int32_t &amp;stride_a, const int32_t &amp;stride_w, const int32_t &amp;stride_feat, const int32_t &amp;num_batches, const int32_t &amp;correlation, const cuda::stream &amp;stream)</argsstring>
        <name>symmetric_tensor_contraction_n2n_bwd</name>
        <param>
          <type>__nv_bfloat16 *</type>
          <declname>d_feat_a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d_weight</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>feat_b</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>feat_a</declname>
        </param>
        <param>
          <type>const __nv_bfloat16 *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>weight_id</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" kindref="compound">clebsch_gordan_tensor</ref>&lt; __nv_bfloat16 &gt; &amp;</type>
          <declname>cg_tensor0</declname>
        </param>
        <param>
          <type>const <ref refid="structcugraph_1_1ops_1_1clebsch__gordan__tensor" kindref="compound">clebsch_gordan_tensor</ref>&lt; __nv_bfloat16 &gt; &amp;</type>
          <declname>cg_tensor1</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_b</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_a</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>stride_feat</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>num_batches</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>correlation</declname>
        </param>
        <param>
          <type>const <ref refid="classcugraph_1_1ops_1_1cuda_1_1stream" kindref="compound">cuda::stream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/operators/mace.hpp" line="104" column="6" declfile="include/cugraph-ops/operators/mace.hpp" declline="104" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/cugraph-ops/activation.hpp" line="13" column="1"/>
  </compounddef>
</doxygen>
