<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacecugraph_1_1ops_1_1utils" kind="namespace" language="C++">
    <compoundname>cugraph::ops::utils</compoundname>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1a3232d8a10e46f722c302546a02cf30d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cugraph::ops::utils::str2int</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>str2int</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts the input string into an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>input string. If it is not an integer, an exception will be raised </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/string_utils.hpp" line="35" column="5" declfile="include/cugraph-ops/utils/string_utils.hpp" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1a2f9d904df03d36a5e25914cf1c92498c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t cugraph::ops::utils::str2uint64_t</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>str2uint64_t</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/string_utils.hpp" line="36" column="10" declfile="include/cugraph-ops/utils/string_utils.hpp" declline="36" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1a0c9ddd262b6ae6787a0f13308afbfe9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::utils::disable_nvtx_ranges</definition>
        <argsstring>()</argsstring>
        <name>disable_nvtx_ranges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>at runtime disable the creation of nvtx ranges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/nvtx.hpp" line="14" column="6" declfile="include/cugraph-ops/utils/nvtx.hpp" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1a8b29b3a6b44b0221448704a807a564cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::utils::enable_nvtx_ranges</definition>
        <argsstring>()</argsstring>
        <name>enable_nvtx_ranges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>at runtime enable the creation of nvtx ranges (default is, disabled) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/nvtx.hpp" line="17" column="6" declfile="include/cugraph-ops/utils/nvtx.hpp" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1af918f3b74074fbf5fd5e686eb55eb7f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::utils::push_range</definition>
        <argsstring>(const char *name)</argsstring>
        <name>push_range</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Push a named nvtx range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>range name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/nvtx.hpp" line="23" column="6" declfile="include/cugraph-ops/utils/nvtx.hpp" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1a8f5ab6db0f9d76e9af413091a9371480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cugraph::ops::utils::pop_range</definition>
        <argsstring>()</argsstring>
        <name>pop_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pop the latest range </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/nvtx.hpp" line="26" column="6" declfile="include/cugraph-ops/utils/nvtx.hpp" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1ac11c2c718a82a568893ba2b5c605f42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; cugraph::ops::utils::split</definition>
        <argsstring>(const std::string &amp;str, char delim)</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Splits the input string into a vector as per the delimiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>input string to be split </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delim</parametername>
</parameternamelist>
<parameterdescription>
<para>the delimiter char </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/string_utils.hpp" line="25" column="13" declfile="include/cugraph-ops/utils/string_utils.hpp" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1ac20713c448ea20a39385dd0736bfda3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float cugraph::ops::utils::str2float</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>str2float</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/string_utils.hpp" line="39" column="7" declfile="include/cugraph-ops/utils/string_utils.hpp" declline="39" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1ac7e80ceb1a61d069b5bd0f870649a7ef" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cugraph::ops::utils::format</definition>
        <argsstring>(const char *fmt,...) noexcept</argsstring>
        <name>format</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Format a &quot;format&quot; literal according to the arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>We don&apos;t use variadic templates here as this is called for every logging call, thus variadic templates may increase compilation time and binary size.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the format string literal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>the arguments to be formatted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/string_utils.hpp" line="51" column="13" declfile="include/cugraph-ops/utils/string_utils.hpp" declline="51" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1ac1206c96d2c617dee0a2b92114d10711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cugraph::ops::utils::is_any_of</definition>
        <argsstring>(const std::string &amp;val, const std::vector&lt; std::string &gt; &amp;vals)</argsstring>
        <name>is_any_of</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
<para>Checks for the input value to belong to the list of allowed options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be checked for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vals</parametername>
</parameternamelist>
<parameterdescription>
<para>list of values to be compared against. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/string_utils.hpp" line="59" column="6" declfile="include/cugraph-ops/utils/string_utils.hpp" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1a42dca3a4f815b79ecd859d699add3488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cugraph::ops::utils::is_any_of</definition>
        <argsstring>(const std::string &amp;val, const std::string &amp;options)</argsstring>
        <name>is_any_of</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Checks for the input value to belong to the list of allowed options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be checked for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>values to be compared against. They must be passed as a string of comma-separated values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/string_utils.hpp" line="68" column="6" declfile="include/cugraph-ops/utils/string_utils.hpp" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecugraph_1_1ops_1_1utils_1aa1be283d81d27ddb0a430a493df19ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cugraph::ops::utils::version_str</definition>
        <argsstring>()</argsstring>
        <name>version_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the library version as a string </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/utils/version.hpp" line="16" column="13" declfile="include/cugraph-ops/utils/version.hpp" declline="16" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/cugraph-ops/utils/nvtx.hpp" line="11" column="1"/>
  </compounddef>
</doxygen>
