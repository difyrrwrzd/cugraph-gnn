<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structcugraph_1_1ops_1_1graph_1_1csc" kind="struct" language="C++" prot="public">
    <compoundname>cugraph::ops::graph::csc</compoundname>
    <basecompoundref refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc" prot="public" virt="non-virtual">cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, EdgeIdxT &gt;</basecompoundref>
    <includes refid="format_8hpp" local="no">format.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename EdgeIdxT</type>
      </param>
      <param>
        <type>typename NodeIdxT</type>
        <defval>EdgeIdxT</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcugraph_1_1ops_1_1graph_1_1csc_1a2912976c3b0b4715e7dfc0d06396b462" prot="public" static="no">
        <type>NodeIdxT</type>
        <definition>using cugraph::ops::graph::csc&lt; EdgeIdxT, NodeIdxT &gt;::nidx_t =  NodeIdxT</definition>
        <argsstring></argsstring>
        <name>nidx_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="215" column="3" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcugraph_1_1ops_1_1graph_1_1csc_1ac3a027977575c2d0d6b6e44a6b6ac2a4" prot="public" static="no">
        <type>EdgeIdxT</type>
        <definition>using cugraph::ops::graph::csc&lt; EdgeIdxT, NodeIdxT &gt;::eidx_t =  EdgeIdxT</definition>
        <argsstring></argsstring>
        <name>eidx_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="216" column="3" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcugraph_1_1ops_1_1graph_1_1csc_1a6de260fb4e2b21b8738552a5d53f80dd" prot="public" static="no">
        <type><ref refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc" kindref="compound">bipartite_csc</ref>&lt; EdgeIdxT, NodeIdxT &gt;</type>
        <definition>using cugraph::ops::graph::csc&lt; EdgeIdxT, NodeIdxT &gt;::base_t =  bipartite_csc&lt;EdgeIdxT, NodeIdxT&gt;</definition>
        <argsstring></argsstring>
        <name>base_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="217" column="3" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structcugraph_1_1ops_1_1graph_1_1csc_1ab5dc5f437c05f2a049dbfc129b231517" prot="public" static="no" mutable="no">
        <type>NodeIdxT *</type>
        <definition>NodeIdxT* cugraph::ops::graph::csc&lt; EdgeIdxT, NodeIdxT &gt;::map_dst_to_src</definition>
        <argsstring></argsstring>
        <name>map_dst_to_src</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>optional map which maps the node IDs of destination nodes to their corresponding IDs as source nodes. This can be helpful if the sampling algorithm for instance does not gurantuee to always place the destination nodes at the front of the list of source node IDs.</para>
<para><simplesect kind="note"><para>If this is passed as <computeroutput>nullptr</computeroutput>, it is assumed that the the ID of any of the <computeroutput>N</computeroutput> destination nodes is the same ID out of the range <computeroutput>0, ..., N - 1</computeroutput> among the source nodes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="233" column="12" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcugraph_1_1ops_1_1graph_1_1csc_1af237b420666b370cbba6a1900d603a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cugraph::ops::graph::csc&lt; EdgeIdxT, NodeIdxT &gt;::csc</definition>
        <argsstring>()=default</argsstring>
        <name>csc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="219" column="3"/>
      </memberdef>
      <memberdef kind="function" id="structcugraph_1_1ops_1_1graph_1_1csc_1aa12692585e841f5660b9c72084c719fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cugraph::ops::graph::csc&lt; EdgeIdxT, NodeIdxT &gt;::~csc</definition>
        <argsstring>() override=default</argsstring>
        <name>~csc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cugraph-ops/graph/format.hpp" line="220" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CSC representation of a static graph or sampled subgraph. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EdgeIdxT</parametername>
</parameternamelist>
<parameterdescription>
<para>edge index type (signed type, see <computeroutput>INVALID_ID</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NodeIdxT</parametername>
</parameternamelist>
<parameterdescription>
<para>node index type (signed type, see <computeroutput>INVALID_ID</computeroutput>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>CSC follows the convention of referring to the in-graph as CSC while the out-graph is referred to as CSR of the underlying adjancency matrix. </para>
</simplesect>
<simplesect kind="note"><para>Valid NIDs: [0, 2^(sizeof(NodeIdxT) * 8 - 1) - 2] (see <computeroutput>INVALID_ID</computeroutput>) </para>
</simplesect>
<simplesect kind="note"><para>Valid EIDs: [0, 2^(sizeof(EdgeIdxT) * 8 - 1) - 2] (see <computeroutput>INVALID_ID</computeroutput>) </para>
</simplesect>
<simplesect kind="note"><para>This object does NOT own any of the underlying pointers and thus their lifetime management is left to the calling code. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>cugraph::ops::graph::csc&lt; EdgeIdxT, NodeIdxT &gt;</label>
        <link refid="structcugraph_1_1ops_1_1graph_1_1csc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, EdgeIdxT &gt;</label>
        <link refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>cugraph::ops::graph::csc&lt; EdgeIdxT, NodeIdxT &gt;</label>
        <link refid="structcugraph_1_1ops_1_1graph_1_1csc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>cugraph::ops::graph::bipartite_csc&lt; EdgeIdxT, EdgeIdxT &gt;</label>
        <link refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc"/>
      </node>
    </collaborationgraph>
    <location file="include/cugraph-ops/graph/format.hpp" line="214" column="1" bodyfile="include/cugraph-ops/graph/format.hpp" bodystart="214" bodyend="234"/>
    <listofallmembers>
      <member refid="structcugraph_1_1ops_1_1graph_1_1csc_1a6de260fb4e2b21b8738552a5d53f80dd" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>base_t</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ab69e75e810e6c8a973858bbe33e7ecda" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>bipartite_csc</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1csc_1af237b420666b370cbba6a1900d603a0e" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>csc</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a93e10c6ca65dd78760797982f55e237a" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>dst_max_in_degree</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1csc_1ac3a027977575c2d0d6b6e44a6b6ac2a4" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>eidx_t</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a566c378a014616f5c4c180283b2dceca" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>indices</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1acae4cc7b09bf5f00abdcc93c5d1f17f7" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>map_csc_to_coo</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1csc_1ab5dc5f437c05f2a049dbfc129b231517" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>map_dst_to_src</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a8088d54f9d63214d6873fcf71f2fe7ce" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>map_rev_to_coo</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a84ada7fee8adcb98cb500bf11ea43172" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>n_dst_nodes</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ad037efd8755b5244a6126b8de7baaf00" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>n_indices</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1ac24ef40142a0d5ef101899187dffabb2" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>n_src_nodes</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1csc_1a2912976c3b0b4715e7dfc0d06396b462" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>nidx_t</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a72802c96495d28f575c5c0c6bae4c725" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>offsets</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a0de3988f82147ee86664d55a9580bbb6" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>rev_indices</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a0b5c775eeba9cb7c81f3f6a0022a0755" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>rev_offsets</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1bipartite__csc_1a895c19fed988281437d6b5f96fbab8cc" prot="public" virt="virtual"><scope>cugraph::ops::graph::csc</scope><name>~bipartite_csc</name></member>
      <member refid="structcugraph_1_1ops_1_1graph_1_1csc_1aa12692585e841f5660b9c72084c719fe" prot="public" virt="non-virtual"><scope>cugraph::ops::graph::csc</scope><name>~csc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
